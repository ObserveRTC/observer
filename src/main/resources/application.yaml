micronaut:
  heartbeat:
    enabled: true
  metrics:
    enabled: ${METRICS_ENABLED:True}
    export:
      prometheus:
        enabled: true
        descriptions: true
        step: PT1M
  security:
    enabled: false
    authentication: idtoken
      endpoints:
        login:
          enabled: true
      redirect:
        login-success: /secure/anonymous
      token:
        jwt:
          enabled: true
          signatures.jwks.keycloak:
            url: http://localhost:8888/auth/realms/master/protocol/openid-connect/certs
      oauth2.clients.keycloak:
        grant-type: password
        client-id: micronaut
        client-secret: 7dd4d516-e06d-4d81-b5e7-3a15debacebf
        authorization:
          url: http://localhost:8888/auth/realms/master/protocol/openid-connect/auth
        token:
          url: http://localhost:8888/auth/realms/master/protocol/openid-connect/token
          auth-method: client-secret-post
#    authentication: idtoken
#    endpoints:
#      logout:
#        get-allowed: true
#    redirect:
#      login-success: /whoiam
#    oauth2:
#      clients:
#        google:
#          client-id: '${OAUTH_CLIENT_ID}'
#          client-secret: '${OAUTH_CLIENT_SECRET}'
#          openid:
#            issuer: 'https://accounts.google.com'
#        cognito:
#          client-id: '${OAUTH_CLIENT_ID}'
#          client-secret: '${OAUTH_CLIENT_SECRET}'
#          openid:
#            issuer: 'https://cognito-idp.${COGNITO_REGION}.amazonaws.com/${COGNITO_POOL_ID}/'
#         okta:
#           client-secret: '${OAUTH_CLIENT_SECRET}'
#           client-id: '${OAUTH_CLIENT_ID}'
#            openid:
#              issuer: '${OIDC_ISSUER_DOMAIN}/oauth2/${OIDC_ISSUER_AUTHSERVERID}'
#    authentication: bearer
#    token:
#      jwt:
#        signatures:
#          secret:
#            generator:
#              secret: '"${JWT_GENERATOR_SIGNATURE_SECRET:pleaseChangeThisSecretForANewOne}"'
  server:
    port: ${APPLICATION_SERVER_PORT:7080}
  application:
    name: "webrtc-observer"
#  ssl:
#    enabled: true
#    buildSelfSigned: true
---
endpoints:
  all:
    port: ${APPLICATION_MANAGEMENT_PORT:7081}
  prometheus:
    enabled: true
    sensitive: false
  health:
    enabled: true
    sensitive: false
  logout:
    get-allowed: true
---
observer:
  sources:
    pcSamples:
      enabled: true
      defaultServiceName: "defaultServiceName"
      security:
        dropUnknownServices: False

  security:
    dropUnknownServices: False

  sentinelsCheckingPeriodInMin: 1
  connectors:
    - name: "ReportSinkLogger"
      buffer:
        maxItems: 100
        maxWaitingTimeInS: 10
#      sink:
#        type: LoggerSink
#        config:
#          printReports: False
      sink:
        type: KafkaSink
        config:
          topic: reports
          properties:
            bootstrap.servers: "loca
  ipAddressConverter:
    enabled: False
    algorithm: SHA-256
    salt: "MySalt"

  reportMonitor:
    enabled: true
    tagByServiceName: true
    tagByServiceUUID: false
    tagByType: false

  userMediaErrorsMonitor:
    enabled: true
    tagByServiceName: true
    tagByServiceUUID: false

  evaluators:
    impairablePCsCallName: "impairable-peer-connections-default-call-name"
    observedPCSBufferMaxTimeInS: 10
    observedPCSBufferMaxItemNums: 10000
    peerConnectionMaxIdleTimeInS: 60

  outboundReports:
    reportOutboundRTPs: True
    reportInboundRTPs: True
    reportRemoteInboundRTPs: True
    reportTracks: True
    reportMediaSources: True
    reportCandidatePairs: True
    reportLocalCandidates: True
    reportRemoteCandidates: True
    reportUserMediaErrors: True
  hazelcast:
    configFile: ${HAZELCAST_CONFIG_FILE:`classpath:hazelcast.yaml`}