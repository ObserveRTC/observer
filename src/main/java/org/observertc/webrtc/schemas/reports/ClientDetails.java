/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.observertc.webrtc.schemas.reports;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

/** General browser details of a client to understand more about about the platform, browser version where webrtc is running. */
@org.apache.avro.specific.AvroGenerated
public class ClientDetails extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7986093774222147363L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ClientDetails\",\"namespace\":\"org.observertc.webrtc.schemas.reports\",\"doc\":\"General browser details of a client to understand more about about the platform, browser version where webrtc is running.\",\"fields\":[{\"name\":\"mediaUnitId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"peerConnectionUUID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"callName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"userId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"browserId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"browserName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"browserVersion\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"engineName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"engineVersion\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"osName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"osVersion\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"platformType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"platformVendor\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"platformModel\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ClientDetails> ENCODER =
      new BinaryMessageEncoder<ClientDetails>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ClientDetails> DECODER =
      new BinaryMessageDecoder<ClientDetails>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ClientDetails> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ClientDetails> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ClientDetails> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ClientDetails>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ClientDetails to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ClientDetails from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ClientDetails instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ClientDetails fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private String mediaUnitId;
   private String peerConnectionUUID;
   private String callName;
   private String userId;
   private String browserId;
   private String browserName;
   private String browserVersion;
   private String engineName;
   private String engineVersion;
   private String osName;
   private String osVersion;
   private String platformType;
   private String platformVendor;
   private String platformModel;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ClientDetails() {}

  /**
   * All-args constructor.
   * @param mediaUnitId The new value for mediaUnitId
   * @param peerConnectionUUID The new value for peerConnectionUUID
   * @param callName The new value for callName
   * @param userId The new value for userId
   * @param browserId The new value for browserId
   * @param browserName The new value for browserName
   * @param browserVersion The new value for browserVersion
   * @param engineName The new value for engineName
   * @param engineVersion The new value for engineVersion
   * @param osName The new value for osName
   * @param osVersion The new value for osVersion
   * @param platformType The new value for platformType
   * @param platformVendor The new value for platformVendor
   * @param platformModel The new value for platformModel
   */
  public ClientDetails(String mediaUnitId, String peerConnectionUUID, String callName, String userId, String browserId, String browserName, String browserVersion, String engineName, String engineVersion, String osName, String osVersion, String platformType, String platformVendor, String platformModel) {
    this.mediaUnitId = mediaUnitId;
    this.peerConnectionUUID = peerConnectionUUID;
    this.callName = callName;
    this.userId = userId;
    this.browserId = browserId;
    this.browserName = browserName;
    this.browserVersion = browserVersion;
    this.engineName = engineName;
    this.engineVersion = engineVersion;
    this.osName = osName;
    this.osVersion = osVersion;
    this.platformType = platformType;
    this.platformVendor = platformVendor;
    this.platformModel = platformModel;
  }

  public SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return mediaUnitId;
    case 1: return peerConnectionUUID;
    case 2: return callName;
    case 3: return userId;
    case 4: return browserId;
    case 5: return browserName;
    case 6: return browserVersion;
    case 7: return engineName;
    case 8: return engineVersion;
    case 9: return osName;
    case 10: return osVersion;
    case 11: return platformType;
    case 12: return platformVendor;
    case 13: return platformModel;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: mediaUnitId = value$ != null ? value$.toString() : null; break;
    case 1: peerConnectionUUID = value$ != null ? value$.toString() : null; break;
    case 2: callName = value$ != null ? value$.toString() : null; break;
    case 3: userId = value$ != null ? value$.toString() : null; break;
    case 4: browserId = value$ != null ? value$.toString() : null; break;
    case 5: browserName = value$ != null ? value$.toString() : null; break;
    case 6: browserVersion = value$ != null ? value$.toString() : null; break;
    case 7: engineName = value$ != null ? value$.toString() : null; break;
    case 8: engineVersion = value$ != null ? value$.toString() : null; break;
    case 9: osName = value$ != null ? value$.toString() : null; break;
    case 10: osVersion = value$ != null ? value$.toString() : null; break;
    case 11: platformType = value$ != null ? value$.toString() : null; break;
    case 12: platformVendor = value$ != null ? value$.toString() : null; break;
    case 13: platformModel = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'mediaUnitId' field.
   * @return The value of the 'mediaUnitId' field.
   */
  public String getMediaUnitId() {
    return mediaUnitId;
  }



  /**
   * Gets the value of the 'peerConnectionUUID' field.
   * @return The value of the 'peerConnectionUUID' field.
   */
  public String getPeerConnectionUUID() {
    return peerConnectionUUID;
  }



  /**
   * Gets the value of the 'callName' field.
   * @return The value of the 'callName' field.
   */
  public String getCallName() {
    return callName;
  }



  /**
   * Gets the value of the 'userId' field.
   * @return The value of the 'userId' field.
   */
  public String getUserId() {
    return userId;
  }



  /**
   * Gets the value of the 'browserId' field.
   * @return The value of the 'browserId' field.
   */
  public String getBrowserId() {
    return browserId;
  }



  /**
   * Gets the value of the 'browserName' field.
   * @return The value of the 'browserName' field.
   */
  public String getBrowserName() {
    return browserName;
  }



  /**
   * Gets the value of the 'browserVersion' field.
   * @return The value of the 'browserVersion' field.
   */
  public String getBrowserVersion() {
    return browserVersion;
  }



  /**
   * Gets the value of the 'engineName' field.
   * @return The value of the 'engineName' field.
   */
  public String getEngineName() {
    return engineName;
  }



  /**
   * Gets the value of the 'engineVersion' field.
   * @return The value of the 'engineVersion' field.
   */
  public String getEngineVersion() {
    return engineVersion;
  }



  /**
   * Gets the value of the 'osName' field.
   * @return The value of the 'osName' field.
   */
  public String getOsName() {
    return osName;
  }



  /**
   * Gets the value of the 'osVersion' field.
   * @return The value of the 'osVersion' field.
   */
  public String getOsVersion() {
    return osVersion;
  }



  /**
   * Gets the value of the 'platformType' field.
   * @return The value of the 'platformType' field.
   */
  public String getPlatformType() {
    return platformType;
  }



  /**
   * Gets the value of the 'platformVendor' field.
   * @return The value of the 'platformVendor' field.
   */
  public String getPlatformVendor() {
    return platformVendor;
  }



  /**
   * Gets the value of the 'platformModel' field.
   * @return The value of the 'platformModel' field.
   */
  public String getPlatformModel() {
    return platformModel;
  }



  /**
   * Creates a new ClientDetails RecordBuilder.
   * @return A new ClientDetails RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new ClientDetails RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ClientDetails RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * Creates a new ClientDetails RecordBuilder by copying an existing ClientDetails instance.
   * @param other The existing instance to copy.
   * @return A new ClientDetails RecordBuilder
   */
  public static Builder newBuilder(ClientDetails other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * RecordBuilder for ClientDetails instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ClientDetails>
    implements org.apache.avro.data.RecordBuilder<ClientDetails> {

    private String mediaUnitId;
    private String peerConnectionUUID;
    private String callName;
    private String userId;
    private String browserId;
    private String browserName;
    private String browserVersion;
    private String engineName;
    private String engineVersion;
    private String osName;
    private String osVersion;
    private String platformType;
    private String platformVendor;
    private String platformModel;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.mediaUnitId)) {
        this.mediaUnitId = data().deepCopy(fields()[0].schema(), other.mediaUnitId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.peerConnectionUUID)) {
        this.peerConnectionUUID = data().deepCopy(fields()[1].schema(), other.peerConnectionUUID);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.callName)) {
        this.callName = data().deepCopy(fields()[2].schema(), other.callName);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.userId)) {
        this.userId = data().deepCopy(fields()[3].schema(), other.userId);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.browserId)) {
        this.browserId = data().deepCopy(fields()[4].schema(), other.browserId);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.browserName)) {
        this.browserName = data().deepCopy(fields()[5].schema(), other.browserName);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.browserVersion)) {
        this.browserVersion = data().deepCopy(fields()[6].schema(), other.browserVersion);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.engineName)) {
        this.engineName = data().deepCopy(fields()[7].schema(), other.engineName);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.engineVersion)) {
        this.engineVersion = data().deepCopy(fields()[8].schema(), other.engineVersion);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.osName)) {
        this.osName = data().deepCopy(fields()[9].schema(), other.osName);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.osVersion)) {
        this.osVersion = data().deepCopy(fields()[10].schema(), other.osVersion);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.platformType)) {
        this.platformType = data().deepCopy(fields()[11].schema(), other.platformType);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.platformVendor)) {
        this.platformVendor = data().deepCopy(fields()[12].schema(), other.platformVendor);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.platformModel)) {
        this.platformModel = data().deepCopy(fields()[13].schema(), other.platformModel);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
    }

    /**
     * Creates a Builder by copying an existing ClientDetails instance
     * @param other The existing instance to copy.
     */
    private Builder(ClientDetails other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.mediaUnitId)) {
        this.mediaUnitId = data().deepCopy(fields()[0].schema(), other.mediaUnitId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.peerConnectionUUID)) {
        this.peerConnectionUUID = data().deepCopy(fields()[1].schema(), other.peerConnectionUUID);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.callName)) {
        this.callName = data().deepCopy(fields()[2].schema(), other.callName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.userId)) {
        this.userId = data().deepCopy(fields()[3].schema(), other.userId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.browserId)) {
        this.browserId = data().deepCopy(fields()[4].schema(), other.browserId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.browserName)) {
        this.browserName = data().deepCopy(fields()[5].schema(), other.browserName);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.browserVersion)) {
        this.browserVersion = data().deepCopy(fields()[6].schema(), other.browserVersion);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.engineName)) {
        this.engineName = data().deepCopy(fields()[7].schema(), other.engineName);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.engineVersion)) {
        this.engineVersion = data().deepCopy(fields()[8].schema(), other.engineVersion);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.osName)) {
        this.osName = data().deepCopy(fields()[9].schema(), other.osName);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.osVersion)) {
        this.osVersion = data().deepCopy(fields()[10].schema(), other.osVersion);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.platformType)) {
        this.platformType = data().deepCopy(fields()[11].schema(), other.platformType);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.platformVendor)) {
        this.platformVendor = data().deepCopy(fields()[12].schema(), other.platformVendor);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.platformModel)) {
        this.platformModel = data().deepCopy(fields()[13].schema(), other.platformModel);
        fieldSetFlags()[13] = true;
      }
    }

    /**
      * Gets the value of the 'mediaUnitId' field.
      * @return The value.
      */
    public String getMediaUnitId() {
      return mediaUnitId;
    }


    /**
      * Sets the value of the 'mediaUnitId' field.
      * @param value The value of 'mediaUnitId'.
      * @return This builder.
      */
    public Builder setMediaUnitId(String value) {
      validate(fields()[0], value);
      this.mediaUnitId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'mediaUnitId' field has been set.
      * @return True if the 'mediaUnitId' field has been set, false otherwise.
      */
    public boolean hasMediaUnitId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'mediaUnitId' field.
      * @return This builder.
      */
    public Builder clearMediaUnitId() {
      mediaUnitId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'peerConnectionUUID' field.
      * @return The value.
      */
    public String getPeerConnectionUUID() {
      return peerConnectionUUID;
    }


    /**
      * Sets the value of the 'peerConnectionUUID' field.
      * @param value The value of 'peerConnectionUUID'.
      * @return This builder.
      */
    public Builder setPeerConnectionUUID(String value) {
      validate(fields()[1], value);
      this.peerConnectionUUID = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'peerConnectionUUID' field has been set.
      * @return True if the 'peerConnectionUUID' field has been set, false otherwise.
      */
    public boolean hasPeerConnectionUUID() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'peerConnectionUUID' field.
      * @return This builder.
      */
    public Builder clearPeerConnectionUUID() {
      peerConnectionUUID = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'callName' field.
      * @return The value.
      */
    public String getCallName() {
      return callName;
    }


    /**
      * Sets the value of the 'callName' field.
      * @param value The value of 'callName'.
      * @return This builder.
      */
    public Builder setCallName(String value) {
      validate(fields()[2], value);
      this.callName = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'callName' field has been set.
      * @return True if the 'callName' field has been set, false otherwise.
      */
    public boolean hasCallName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'callName' field.
      * @return This builder.
      */
    public Builder clearCallName() {
      callName = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'userId' field.
      * @return The value.
      */
    public String getUserId() {
      return userId;
    }


    /**
      * Sets the value of the 'userId' field.
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public Builder setUserId(String value) {
      validate(fields()[3], value);
      this.userId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'userId' field.
      * @return This builder.
      */
    public Builder clearUserId() {
      userId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'browserId' field.
      * @return The value.
      */
    public String getBrowserId() {
      return browserId;
    }


    /**
      * Sets the value of the 'browserId' field.
      * @param value The value of 'browserId'.
      * @return This builder.
      */
    public Builder setBrowserId(String value) {
      validate(fields()[4], value);
      this.browserId = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'browserId' field has been set.
      * @return True if the 'browserId' field has been set, false otherwise.
      */
    public boolean hasBrowserId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'browserId' field.
      * @return This builder.
      */
    public Builder clearBrowserId() {
      browserId = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'browserName' field.
      * @return The value.
      */
    public String getBrowserName() {
      return browserName;
    }


    /**
      * Sets the value of the 'browserName' field.
      * @param value The value of 'browserName'.
      * @return This builder.
      */
    public Builder setBrowserName(String value) {
      validate(fields()[5], value);
      this.browserName = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'browserName' field has been set.
      * @return True if the 'browserName' field has been set, false otherwise.
      */
    public boolean hasBrowserName() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'browserName' field.
      * @return This builder.
      */
    public Builder clearBrowserName() {
      browserName = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'browserVersion' field.
      * @return The value.
      */
    public String getBrowserVersion() {
      return browserVersion;
    }


    /**
      * Sets the value of the 'browserVersion' field.
      * @param value The value of 'browserVersion'.
      * @return This builder.
      */
    public Builder setBrowserVersion(String value) {
      validate(fields()[6], value);
      this.browserVersion = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'browserVersion' field has been set.
      * @return True if the 'browserVersion' field has been set, false otherwise.
      */
    public boolean hasBrowserVersion() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'browserVersion' field.
      * @return This builder.
      */
    public Builder clearBrowserVersion() {
      browserVersion = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'engineName' field.
      * @return The value.
      */
    public String getEngineName() {
      return engineName;
    }


    /**
      * Sets the value of the 'engineName' field.
      * @param value The value of 'engineName'.
      * @return This builder.
      */
    public Builder setEngineName(String value) {
      validate(fields()[7], value);
      this.engineName = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'engineName' field has been set.
      * @return True if the 'engineName' field has been set, false otherwise.
      */
    public boolean hasEngineName() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'engineName' field.
      * @return This builder.
      */
    public Builder clearEngineName() {
      engineName = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'engineVersion' field.
      * @return The value.
      */
    public String getEngineVersion() {
      return engineVersion;
    }


    /**
      * Sets the value of the 'engineVersion' field.
      * @param value The value of 'engineVersion'.
      * @return This builder.
      */
    public Builder setEngineVersion(String value) {
      validate(fields()[8], value);
      this.engineVersion = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'engineVersion' field has been set.
      * @return True if the 'engineVersion' field has been set, false otherwise.
      */
    public boolean hasEngineVersion() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'engineVersion' field.
      * @return This builder.
      */
    public Builder clearEngineVersion() {
      engineVersion = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'osName' field.
      * @return The value.
      */
    public String getOsName() {
      return osName;
    }


    /**
      * Sets the value of the 'osName' field.
      * @param value The value of 'osName'.
      * @return This builder.
      */
    public Builder setOsName(String value) {
      validate(fields()[9], value);
      this.osName = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'osName' field has been set.
      * @return True if the 'osName' field has been set, false otherwise.
      */
    public boolean hasOsName() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'osName' field.
      * @return This builder.
      */
    public Builder clearOsName() {
      osName = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'osVersion' field.
      * @return The value.
      */
    public String getOsVersion() {
      return osVersion;
    }


    /**
      * Sets the value of the 'osVersion' field.
      * @param value The value of 'osVersion'.
      * @return This builder.
      */
    public Builder setOsVersion(String value) {
      validate(fields()[10], value);
      this.osVersion = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'osVersion' field has been set.
      * @return True if the 'osVersion' field has been set, false otherwise.
      */
    public boolean hasOsVersion() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'osVersion' field.
      * @return This builder.
      */
    public Builder clearOsVersion() {
      osVersion = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'platformType' field.
      * @return The value.
      */
    public String getPlatformType() {
      return platformType;
    }


    /**
      * Sets the value of the 'platformType' field.
      * @param value The value of 'platformType'.
      * @return This builder.
      */
    public Builder setPlatformType(String value) {
      validate(fields()[11], value);
      this.platformType = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'platformType' field has been set.
      * @return True if the 'platformType' field has been set, false otherwise.
      */
    public boolean hasPlatformType() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'platformType' field.
      * @return This builder.
      */
    public Builder clearPlatformType() {
      platformType = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'platformVendor' field.
      * @return The value.
      */
    public String getPlatformVendor() {
      return platformVendor;
    }


    /**
      * Sets the value of the 'platformVendor' field.
      * @param value The value of 'platformVendor'.
      * @return This builder.
      */
    public Builder setPlatformVendor(String value) {
      validate(fields()[12], value);
      this.platformVendor = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'platformVendor' field has been set.
      * @return True if the 'platformVendor' field has been set, false otherwise.
      */
    public boolean hasPlatformVendor() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'platformVendor' field.
      * @return This builder.
      */
    public Builder clearPlatformVendor() {
      platformVendor = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'platformModel' field.
      * @return The value.
      */
    public String getPlatformModel() {
      return platformModel;
    }


    /**
      * Sets the value of the 'platformModel' field.
      * @param value The value of 'platformModel'.
      * @return This builder.
      */
    public Builder setPlatformModel(String value) {
      validate(fields()[13], value);
      this.platformModel = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'platformModel' field has been set.
      * @return True if the 'platformModel' field has been set, false otherwise.
      */
    public boolean hasPlatformModel() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'platformModel' field.
      * @return This builder.
      */
    public Builder clearPlatformModel() {
      platformModel = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ClientDetails build() {
      try {
        ClientDetails record = new ClientDetails();
        record.mediaUnitId = fieldSetFlags()[0] ? this.mediaUnitId : (String) defaultValue(fields()[0]);
        record.peerConnectionUUID = fieldSetFlags()[1] ? this.peerConnectionUUID : (String) defaultValue(fields()[1]);
        record.callName = fieldSetFlags()[2] ? this.callName : (String) defaultValue(fields()[2]);
        record.userId = fieldSetFlags()[3] ? this.userId : (String) defaultValue(fields()[3]);
        record.browserId = fieldSetFlags()[4] ? this.browserId : (String) defaultValue(fields()[4]);
        record.browserName = fieldSetFlags()[5] ? this.browserName : (String) defaultValue(fields()[5]);
        record.browserVersion = fieldSetFlags()[6] ? this.browserVersion : (String) defaultValue(fields()[6]);
        record.engineName = fieldSetFlags()[7] ? this.engineName : (String) defaultValue(fields()[7]);
        record.engineVersion = fieldSetFlags()[8] ? this.engineVersion : (String) defaultValue(fields()[8]);
        record.osName = fieldSetFlags()[9] ? this.osName : (String) defaultValue(fields()[9]);
        record.osVersion = fieldSetFlags()[10] ? this.osVersion : (String) defaultValue(fields()[10]);
        record.platformType = fieldSetFlags()[11] ? this.platformType : (String) defaultValue(fields()[11]);
        record.platformVendor = fieldSetFlags()[12] ? this.platformVendor : (String) defaultValue(fields()[12]);
        record.platformModel = fieldSetFlags()[13] ? this.platformModel : (String) defaultValue(fields()[13]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ClientDetails>
    WRITER$ = (org.apache.avro.io.DatumWriter<ClientDetails>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ClientDetails>
    READER$ = (org.apache.avro.io.DatumReader<ClientDetails>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.mediaUnitId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.mediaUnitId);
    }

    out.writeString(this.peerConnectionUUID);

    if (this.callName == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.callName);
    }

    if (this.userId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.userId);
    }

    if (this.browserId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.browserId);
    }

    if (this.browserName == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.browserName);
    }

    if (this.browserVersion == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.browserVersion);
    }

    if (this.engineName == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.engineName);
    }

    if (this.engineVersion == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.engineVersion);
    }

    if (this.osName == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.osName);
    }

    if (this.osVersion == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.osVersion);
    }

    if (this.platformType == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.platformType);
    }

    if (this.platformVendor == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.platformVendor);
    }

    if (this.platformModel == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.platformModel);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.mediaUnitId = null;
      } else {
        this.mediaUnitId = in.readString();
      }

      this.peerConnectionUUID = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.callName = null;
      } else {
        this.callName = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.userId = null;
      } else {
        this.userId = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.browserId = null;
      } else {
        this.browserId = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.browserName = null;
      } else {
        this.browserName = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.browserVersion = null;
      } else {
        this.browserVersion = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.engineName = null;
      } else {
        this.engineName = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.engineVersion = null;
      } else {
        this.engineVersion = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.osName = null;
      } else {
        this.osName = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.osVersion = null;
      } else {
        this.osVersion = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.platformType = null;
      } else {
        this.platformType = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.platformVendor = null;
      } else {
        this.platformVendor = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.platformModel = null;
      } else {
        this.platformModel = in.readString();
      }

    } else {
      for (int i = 0; i < 14; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.mediaUnitId = null;
          } else {
            this.mediaUnitId = in.readString();
          }
          break;

        case 1:
          this.peerConnectionUUID = in.readString();
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.callName = null;
          } else {
            this.callName = in.readString();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.userId = null;
          } else {
            this.userId = in.readString();
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.browserId = null;
          } else {
            this.browserId = in.readString();
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.browserName = null;
          } else {
            this.browserName = in.readString();
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.browserVersion = null;
          } else {
            this.browserVersion = in.readString();
          }
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.engineName = null;
          } else {
            this.engineName = in.readString();
          }
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.engineVersion = null;
          } else {
            this.engineVersion = in.readString();
          }
          break;

        case 9:
          if (in.readIndex() != 1) {
            in.readNull();
            this.osName = null;
          } else {
            this.osName = in.readString();
          }
          break;

        case 10:
          if (in.readIndex() != 1) {
            in.readNull();
            this.osVersion = null;
          } else {
            this.osVersion = in.readString();
          }
          break;

        case 11:
          if (in.readIndex() != 1) {
            in.readNull();
            this.platformType = null;
          } else {
            this.platformType = in.readString();
          }
          break;

        case 12:
          if (in.readIndex() != 1) {
            in.readNull();
            this.platformVendor = null;
          } else {
            this.platformVendor = in.readString();
          }
          break;

        case 13:
          if (in.readIndex() != 1) {
            in.readNull();
            this.platformModel = null;
          } else {
            this.platformModel = in.readString();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










