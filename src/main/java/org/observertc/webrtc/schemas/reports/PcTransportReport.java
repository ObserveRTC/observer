/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.observertc.webrtc.schemas.reports;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** A Report created for PeerConnection Transport. It is a combination of Transport report, sender, receiver, local, remote and candidate pair of ICE together with the used certificates */
@org.apache.avro.specific.AvroGenerated
public class PcTransportReport extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 9059750238807025483L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PcTransportReport\",\"namespace\":\"org.observertc.webrtc.schemas.reports\",\"doc\":\"A Report created for PeerConnection Transport. It is a combination of Transport report, sender, receiver, local, remote and candidate pair of ICE together with the used certificates\",\"fields\":[{\"name\":\"serviceId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The unique identifier of the service\"},{\"name\":\"serviceName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The resolved service name configured for the service Id\",\"default\":null},{\"name\":\"mediaUnitId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The media unit id the report belongs to\"},{\"name\":\"marker\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The marker the originated sample is reported with\",\"default\":null},{\"name\":\"timestamp\",\"type\":\"long\",\"doc\":\"The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)\"},{\"name\":\"callId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The generated unique identifier of the call\"},{\"name\":\"roomId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"webrtc app provided room id\",\"default\":null},{\"name\":\"clientId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The generated unique identifier of the client\"},{\"name\":\"userId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"webrtc app provided user identifier\",\"default\":null},{\"name\":\"peerConnectionId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The unique identifier of the peer connection\"},{\"name\":\"label\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The webrtc app provided label the peer connection is marked with\",\"default\":null},{\"name\":\"packetsSent\",\"type\":[\"null\",\"int\"],\"doc\":\"Represents the total number of packets sent on the corresponded transport\",\"default\":null},{\"name\":\"packetsReceived\",\"type\":[\"null\",\"int\"],\"doc\":\"Represents the total number of packets received on the corresponded transport\",\"default\":null},{\"name\":\"bytesSent\",\"type\":[\"null\",\"int\"],\"doc\":\"Represents the total amount of bytes sent on the corresponded transport\",\"default\":null},{\"name\":\"bytesReceived\",\"type\":[\"null\",\"int\"],\"doc\":\"Represents the total amount of bytes received on the corresponded transport\",\"default\":null},{\"name\":\"iceRole\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Represent the current role of ICE under DTLS Transport\",\"default\":null},{\"name\":\"iceLocalUsernameFragment\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Represent the current local username fragment used in message validation procedures for ICE under DTLS Transport\",\"default\":null},{\"name\":\"dtlsState\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Represents the current state of DTLS for the peer connection transport layer\",\"default\":null},{\"name\":\"iceTransportState\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Represents the current transport state (RTCIceTransportState) of ICE for the peer connection transport layer\",\"default\":null},{\"name\":\"tlsVersion\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Represents the version number of the TLS used in the corresponded transport\",\"default\":null},{\"name\":\"dtlsCipher\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Represents the name of the DTLS cipher used in the corresponded transport\",\"default\":null},{\"name\":\"srtpCipher\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Represents the name of the SRTP cipher used in the corresponded transport\",\"default\":null},{\"name\":\"tlsGroup\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Represents the name of the IANA TLS Supported Groups used in the corresponded transport\",\"default\":null},{\"name\":\"selectedCandidatePairChanges\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of candidate pair changes over the peer connection\",\"default\":null},{\"name\":\"localFingerprint\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The fingerprint of the certificate certifies the local endpoint of the transport\",\"default\":null},{\"name\":\"localFingerprintAlgorithm\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The algorithm generate the fingerprint of the certificate certifies the local endpoint of the transport\",\"default\":null},{\"name\":\"localBase64Certificate\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The base64 encoded certificate for the local endpoint corresponded to the transport\",\"default\":null},{\"name\":\"remoteFingerprint\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The fingerprint of the certificate certifies the remote endpoint of the transport\",\"default\":null},{\"name\":\"remoteFingerprintAlgorithm\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The algorithm generate the fingerprint of the certificate certifies the remote endpoint of the transport\",\"default\":null},{\"name\":\"remoteBase64Certificate\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The base64 encoded certificate for the remote endpoint corresponded to the transport\",\"default\":null},{\"name\":\"localAddress\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The address of the candidate (IPv4, IPv6, FQDN)\",\"default\":null},{\"name\":\"localPort\",\"type\":[\"null\",\"int\"],\"doc\":\"The locally used port to communicate with the remote peer\",\"default\":null},{\"name\":\"localProtocol\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The protocol used by the local endpoint for the corresponded transport\",\"default\":null},{\"name\":\"localCandidateType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The type of the ICE candidate used at the local endpoint on the corresponded transport\",\"default\":null},{\"name\":\"localCandidatePriority\",\"type\":[\"null\",\"int\"],\"doc\":\"The priority of the ICE candidate used at the local endpoint on the corresponded transport\",\"default\":null},{\"name\":\"localCandidateICEServerUrl\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The url of the ICE server used by the local endpoint on the corresponded transport\",\"default\":null},{\"name\":\"localCandidateRelayProtocol\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The relay protocol of the ICE candidate used by the local endpoint on the corresponded transport\",\"default\":null},{\"name\":\"remoteAddress\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The address of the candidate (IPv4, IPv6, FQDN)\",\"default\":null},{\"name\":\"remotePort\",\"type\":[\"null\",\"int\"],\"doc\":\"The remotely used port to communicate with the remote peer\",\"default\":null},{\"name\":\"remoteProtocol\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The protocol used by the remote endpoint for the corresponded transport\",\"default\":null},{\"name\":\"remoteCandidateType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The type of the ICE candidate used at the remote endpoint on the corresponded transport\",\"default\":null},{\"name\":\"remoteCandidatePriority\",\"type\":[\"null\",\"int\"],\"doc\":\"The priority of the ICE candidate used at the remote endpoint on the corresponded transport\",\"default\":null},{\"name\":\"remoteCandidateICEServerUrl\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The url of the ICE server used by the remote endpoint on the corresponded transport\",\"default\":null},{\"name\":\"remoteCandidateRelayProtocol\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The relay protocol of the ICE candidate used by the remote endpoint on the corresponded transport\",\"default\":null},{\"name\":\"iceCandidatePairState\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The state of ICE Candidate Pairs (RTCStatsIceCandidatePairState) on the corresponded transport\",\"default\":null},{\"name\":\"iceCandidatePairPacketsSent\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of packets sent using the last sele","cted candidate pair over the corresponded transport\",\"default\":null},{\"name\":\"iceCandidatePairPacketsReceived\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of packets received using the last selected candidate pair over the corresponded transport\",\"default\":null},{\"name\":\"iceCandidatePairBytesSent\",\"type\":[\"null\",\"long\"],\"doc\":\"The total number of bytes sent using the last selected candidate pair over the corresponded transport\",\"default\":null},{\"name\":\"iceCandidatePairBytesReceived\",\"type\":[\"null\",\"long\"],\"doc\":\"The total number of bytes received using the last selected candidate pair over the corresponded transport\",\"default\":null},{\"name\":\"iceCandidatePairLastPacketSentTimestamp\",\"type\":[\"null\",\"long\"],\"doc\":\"Represents the timestamp at which the last packet was sent on the selected candidate pair, excluding STUN packets over the corresponded transport (UTC Epoch in ms)\",\"default\":null},{\"name\":\"iceCandidatePairLastPacketReceivedTimestamp\",\"type\":[\"null\",\"long\"],\"doc\":\"Represents the timestamp at which the last packet was received on the selected candidate pair, excluding STUN packets over the corresponded transport (UTC Epoch in ms)\",\"default\":null},{\"name\":\"iceCandidatePairFirstRequestTimestamp\",\"type\":[\"null\",\"long\"],\"doc\":\"Represents the timestamp at which the first STUN request was sent on this particular candidate pair over the corresponded transport (UTC Epoch in ms)\",\"default\":null},{\"name\":\"iceCandidatePairLastRequestTimestamp\",\"type\":[\"null\",\"long\"],\"doc\":\"Represents the timestamp at which the last STUN request was sent on this particular candidate pair over the corresponded transport (UTC Epoch in ms)\",\"default\":null},{\"name\":\"iceCandidatePairLastResponseTimestamp\",\"type\":[\"null\",\"long\"],\"doc\":\"Represents the timestamp at which the last STUN response was received on this particular candidate pair over the corresponded transport (UTC Epoch in ms)\",\"default\":null},{\"name\":\"stunProvidedTotalRoundTripTime\",\"type\":[\"null\",\"double\"],\"doc\":\"Represents the sum of all round trip time measurements in seconds since the beginning of the session, based on STUN connectivity check over the corresponded transport\",\"default\":null},{\"name\":\"stunProvidedCurrentRoundTripTime\",\"type\":[\"null\",\"double\"],\"doc\":\"Represents the last round trip time measurements in seconds based on STUN connectivity check over the corresponded transport\",\"default\":null},{\"name\":\"availableOutgoingBitrate\",\"type\":[\"null\",\"double\"],\"doc\":\"The sum of the underlying cc algorithm provided outgoing bitrate for the RTP streams over the corresponded transport\",\"default\":null},{\"name\":\"availableIncomingBitrate\",\"type\":[\"null\",\"double\"],\"doc\":\"The sum of the underlying cc algorithm provided incoming bitrate for the RTP streams over the corresponded transport\",\"default\":null},{\"name\":\"circuitBreakerTriggerCount\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of circuit breaker triggered over the corresponded transport using the selected candidate pair\",\"default\":null},{\"name\":\"candidatePairRequestsReceived\",\"type\":[\"null\",\"int\"],\"doc\":\"Represents the total number of connectivity check requests received on the selected candidate pair using the corresponded transport\",\"default\":null},{\"name\":\"candidatePairRequestsSent\",\"type\":[\"null\",\"int\"],\"doc\":\"Represents the total number of connectivity check requests sent on the selected candidate pair using the corresponded transport\",\"default\":null},{\"name\":\"candidatePairResponsesReceived\",\"type\":[\"null\",\"int\"],\"doc\":\"Represents the total number of connectivity check responses received on the selected candidate pair using the corresponded transport\",\"default\":null},{\"name\":\"candidatePairResponsesSent\",\"type\":[\"null\",\"int\"],\"doc\":\"Represents the total number of connectivity check responses sent on the selected candidate pair using the corresponded transport\",\"default\":null},{\"name\":\"candidatePairRetransmissionReceived\",\"type\":[\"null\",\"int\"],\"doc\":\"Represents the total number of connectivity check retransmission received on the selected candidate pair using the corresponded transport\",\"default\":null},{\"name\":\"candidatePairRetransmissionSent\",\"type\":[\"null\",\"int\"],\"doc\":\"Represents the total number of connectivity check retransmission sent on the selected candidate pair using the corresponded transport\",\"default\":null},{\"name\":\"candidatePairConsentRequestsSent\",\"type\":[\"null\",\"int\"],\"doc\":\"Represents the total number of consent requests sent on the selected candidate pair using the corresponded transport\",\"default\":null},{\"name\":\"candidatePairConsentExpiredTimestamp\",\"type\":[\"null\",\"long\"],\"doc\":\"Represents the timestamp at which the latest valid STUN binding response expired on the selected candidate pair using the corresponded transport\",\"default\":null},{\"name\":\"candidatePairBytesDiscardedOnSend\",\"type\":[\"null\",\"long\"],\"doc\":\"Total amount of bytes for this candidate pair that have been discarded due to socket errors on the selected candidate pair using the corresponded transport\",\"default\":null},{\"name\":\"candidatePairRequestBytesSent\",\"type\":[\"null\",\"long\"],\"doc\":\"Total number of bytes sent for connectivity checks on the selected candidate pair using the corresponded transport\",\"default\":null},{\"name\":\"candidatePairConsentRequestBytesSent\",\"type\":[\"null\",\"long\"],\"doc\":\"Total number of bytes sent for consent requests on the selected candidate pair using the corresponded transport\",\"default\":null},{\"name\":\"candidatePairResponseBytesSent\",\"type\":[\"null\",\"int\"],\"doc\":\"Total number of bytes sent for connectivity check responses on the selected candidate pair using the corresponded transport\",\"default\":null},{\"name\":\"sctpSmoothedRoundTripTime\",\"type\":[\"null\",\"double\"],\"doc\":\"The latest smoothed round-trip time value, corresponding to spinfo_srtt defined in [RFC6458] but converted to seconds. \",\"default\":null},{\"name\":\"sctpCongestionWindow\",\"type\":[\"null\",\"double\"],\"doc\":\"The latest congestion window, corresponding to spinfo_cwnd.\",\"default\":null},{\"name\":\"sctpReceiverWindow\",\"type\":[\"null\",\"double\"],\"doc\":\"The latest receiver window, corresponding to sstat_rwnd.\",\"default\":null},{\"name\":\"sctpMtu\",\"type\":[\"null\",\"int\"],\"doc\":\"The latest maximum transmission unit, corresponding to spinfo_mtu.\",\"default\":null},{\"name\":\"sctpUnackData\",\"type\":[\"null\",\"int\"],\"doc\":\"The number of unacknowledged DATA chunks, corresponding to sstat_unackdata.\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The unique identifier of the service */
   private String serviceId;
  /** The resolved service name configured for the service Id */
   private String serviceName;
  /** The media unit id the report belongs to */
   private String mediaUnitId;
  /** The marker the originated sample is reported with */
   private String marker;
  /** The timestamp when the corresponded data is generated for the report (UTC Epoch in ms) */
   private long timestamp;
  /** The generated unique identifier of the call */
   private String callId;
  /** webrtc app provided room id */
   private String roomId;
  /** The generated unique identifier of the client */
   private String clientId;
  /** webrtc app provided user identifier */
   private String userId;
  /** The unique identifier of the peer connection */
   private String peerConnectionId;
  /** The webrtc app provided label the peer connection is marked with */
   private String label;
  /** Represents the total number of packets sent on the corresponded transport */
   private Integer packetsSent;
  /** Represents the total number of packets received on the corresponded transport */
   private Integer packetsReceived;
  /** Represents the total amount of bytes sent on the corresponded transport */
   private Integer bytesSent;
  /** Represents the total amount of bytes received on the corresponded transport */
   private Integer bytesReceived;
  /** Represent the current role of ICE under DTLS Transport */
   private String iceRole;
  /** Represent the current local username fragment used in message validation procedures for ICE under DTLS Transport */
   private String iceLocalUsernameFragment;
  /** Represents the current state of DTLS for the peer connection transport layer */
   private String dtlsState;
  /** Represents the current transport state (RTCIceTransportState) of ICE for the peer connection transport layer */
   private String iceTransportState;
  /** Represents the version number of the TLS used in the corresponded transport */
   private String tlsVersion;
  /** Represents the name of the DTLS cipher used in the corresponded transport */
   private String dtlsCipher;
  /** Represents the name of the SRTP cipher used in the corresponded transport */
   private String srtpCipher;
  /** Represents the name of the IANA TLS Supported Groups used in the corresponded transport */
   private String tlsGroup;
  /** The total number of candidate pair changes over the peer connection */
   private Integer selectedCandidatePairChanges;
  /** The fingerprint of the certificate certifies the local endpoint of the transport */
   private String localFingerprint;
  /** The algorithm generate the fingerprint of the certificate certifies the local endpoint of the transport */
   private String localFingerprintAlgorithm;
  /** The base64 encoded certificate for the local endpoint corresponded to the transport */
   private String localBase64Certificate;
  /** The fingerprint of the certificate certifies the remote endpoint of the transport */
   private String remoteFingerprint;
  /** The algorithm generate the fingerprint of the certificate certifies the remote endpoint of the transport */
   private String remoteFingerprintAlgorithm;
  /** The base64 encoded certificate for the remote endpoint corresponded to the transport */
   private String remoteBase64Certificate;
  /** The address of the candidate (IPv4, IPv6, FQDN) */
   private String localAddress;
  /** The locally used port to communicate with the remote peer */
   private Integer localPort;
  /** The protocol used by the local endpoint for the corresponded transport */
   private String localProtocol;
  /** The type of the ICE candidate used at the local endpoint on the corresponded transport */
   private String localCandidateType;
  /** The priority of the ICE candidate used at the local endpoint on the corresponded transport */
   private Integer localCandidatePriority;
  /** The url of the ICE server used by the local endpoint on the corresponded transport */
   private String localCandidateICEServerUrl;
  /** The relay protocol of the ICE candidate used by the local endpoint on the corresponded transport */
   private String localCandidateRelayProtocol;
  /** The address of the candidate (IPv4, IPv6, FQDN) */
   private String remoteAddress;
  /** The remotely used port to communicate with the remote peer */
   private Integer remotePort;
  /** The protocol used by the remote endpoint for the corresponded transport */
   private String remoteProtocol;
  /** The type of the ICE candidate used at the remote endpoint on the corresponded transport */
   private String remoteCandidateType;
  /** The priority of the ICE candidate used at the remote endpoint on the corresponded transport */
   private Integer remoteCandidatePriority;
  /** The url of the ICE server used by the remote endpoint on the corresponded transport */
   private String remoteCandidateICEServerUrl;
  /** The relay protocol of the ICE candidate used by the remote endpoint on the corresponded transport */
   private String remoteCandidateRelayProtocol;
  /** The state of ICE Candidate Pairs (RTCStatsIceCandidatePairState) on the corresponded transport */
   private String iceCandidatePairState;
  /** The total number of packets sent using the last selected candidate pair over the corresponded transport */
   private Integer iceCandidatePairPacketsSent;
  /** The total number of packets received using the last selected candidate pair over the corresponded transport */
   private Integer iceCandidatePairPacketsReceived;
  /** The total number of bytes sent using the last selected candidate pair over the corresponded transport */
   private Long iceCandidatePairBytesSent;
  /** The total number of bytes received using the last selected candidate pair over the corresponded transport */
   private Long iceCandidatePairBytesReceived;
  /** Represents the timestamp at which the last packet was sent on the selected candidate pair, excluding STUN packets over the corresponded transport (UTC Epoch in ms) */
   private Long iceCandidatePairLastPacketSentTimestamp;
  /** Represents the timestamp at which the last packet was received on the selected candidate pair, excluding STUN packets over the corresponded transport (UTC Epoch in ms) */
   private Long iceCandidatePairLastPacketReceivedTimestamp;
  /** Represents the timestamp at which the first STUN request was sent on this particular candidate pair over the corresponded transport (UTC Epoch in ms) */
   private Long iceCandidatePairFirstRequestTimestamp;
  /** Represents the timestamp at which the last STUN request was sent on this particular candidate pair over the corresponded transport (UTC Epoch in ms) */
   private Long iceCandidatePairLastRequestTimestamp;
  /** Represents the timestamp at which the last STUN response was received on this particular candidate pair over the corresponded transport (UTC Epoch in ms) */
   private Long iceCandidatePairLastResponseTimestamp;
  /** Represents the sum of all round trip time measurements in seconds since the beginning of the session, based on STUN connectivity check over the corresponded transport */
   private Double stunProvidedTotalRoundTripTime;
  /** Represents the last round trip time measurements in seconds based on STUN connectivity check over the corresponded transport */
   private Double stunProvidedCurrentRoundTripTime;
  /** The sum of the underlying cc algorithm provided outgoing bitrate for the RTP streams over the corresponded transport */
   private Double availableOutgoingBitrate;
  /** The sum of the underlying cc algorithm provided incoming bitrate for the RTP streams over the corresponded transport */
   private Double availableIncomingBitrate;
  /** The total number of circuit breaker triggered over the corresponded transport using the selected candidate pair */
   private Integer circuitBreakerTriggerCount;
  /** Represents the total number of connectivity check requests received on the selected candidate pair using the corresponded transport */
   private Integer candidatePairRequestsReceived;
  /** Represents the total number of connectivity check requests sent on the selected candidate pair using the corresponded transport */
   private Integer candidatePairRequestsSent;
  /** Represents the total number of connectivity check responses received on the selected candidate pair using the corresponded transport */
   private Integer candidatePairResponsesReceived;
  /** Represents the total number of connectivity check responses sent on the selected candidate pair using the corresponded transport */
   private Integer candidatePairResponsesSent;
  /** Represents the total number of connectivity check retransmission received on the selected candidate pair using the corresponded transport */
   private Integer candidatePairRetransmissionReceived;
  /** Represents the total number of connectivity check retransmission sent on the selected candidate pair using the corresponded transport */
   private Integer candidatePairRetransmissionSent;
  /** Represents the total number of consent requests sent on the selected candidate pair using the corresponded transport */
   private Integer candidatePairConsentRequestsSent;
  /** Represents the timestamp at which the latest valid STUN binding response expired on the selected candidate pair using the corresponded transport */
   private Long candidatePairConsentExpiredTimestamp;
  /** Total amount of bytes for this candidate pair that have been discarded due to socket errors on the selected candidate pair using the corresponded transport */
   private Long candidatePairBytesDiscardedOnSend;
  /** Total number of bytes sent for connectivity checks on the selected candidate pair using the corresponded transport */
   private Long candidatePairRequestBytesSent;
  /** Total number of bytes sent for consent requests on the selected candidate pair using the corresponded transport */
   private Long candidatePairConsentRequestBytesSent;
  /** Total number of bytes sent for connectivity check responses on the selected candidate pair using the corresponded transport */
   private Integer candidatePairResponseBytesSent;
  /** The latest smoothed round-trip time value, corresponding to spinfo_srtt defined in [RFC6458] but converted to seconds.  */
   private Double sctpSmoothedRoundTripTime;
  /** The latest congestion window, corresponding to spinfo_cwnd. */
   private Double sctpCongestionWindow;
  /** The latest receiver window, corresponding to sstat_rwnd. */
   private Double sctpReceiverWindow;
  /** The latest maximum transmission unit, corresponding to spinfo_mtu. */
   private Integer sctpMtu;
  /** The number of unacknowledged DATA chunks, corresponding to sstat_unackdata. */
   private Integer sctpUnackData;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PcTransportReport() {}

  /**
   * All-args constructor.
   * @param serviceId The unique identifier of the service
   * @param serviceName The resolved service name configured for the service Id
   * @param mediaUnitId The media unit id the report belongs to
   * @param marker The marker the originated sample is reported with
   * @param timestamp The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
   * @param callId The generated unique identifier of the call
   * @param roomId webrtc app provided room id
   * @param clientId The generated unique identifier of the client
   * @param userId webrtc app provided user identifier
   * @param peerConnectionId The unique identifier of the peer connection
   * @param label The webrtc app provided label the peer connection is marked with
   * @param packetsSent Represents the total number of packets sent on the corresponded transport
   * @param packetsReceived Represents the total number of packets received on the corresponded transport
   * @param bytesSent Represents the total amount of bytes sent on the corresponded transport
   * @param bytesReceived Represents the total amount of bytes received on the corresponded transport
   * @param iceRole Represent the current role of ICE under DTLS Transport
   * @param iceLocalUsernameFragment Represent the current local username fragment used in message validation procedures for ICE under DTLS Transport
   * @param dtlsState Represents the current state of DTLS for the peer connection transport layer
   * @param iceTransportState Represents the current transport state (RTCIceTransportState) of ICE for the peer connection transport layer
   * @param tlsVersion Represents the version number of the TLS used in the corresponded transport
   * @param dtlsCipher Represents the name of the DTLS cipher used in the corresponded transport
   * @param srtpCipher Represents the name of the SRTP cipher used in the corresponded transport
   * @param tlsGroup Represents the name of the IANA TLS Supported Groups used in the corresponded transport
   * @param selectedCandidatePairChanges The total number of candidate pair changes over the peer connection
   * @param localFingerprint The fingerprint of the certificate certifies the local endpoint of the transport
   * @param localFingerprintAlgorithm The algorithm generate the fingerprint of the certificate certifies the local endpoint of the transport
   * @param localBase64Certificate The base64 encoded certificate for the local endpoint corresponded to the transport
   * @param remoteFingerprint The fingerprint of the certificate certifies the remote endpoint of the transport
   * @param remoteFingerprintAlgorithm The algorithm generate the fingerprint of the certificate certifies the remote endpoint of the transport
   * @param remoteBase64Certificate The base64 encoded certificate for the remote endpoint corresponded to the transport
   * @param localAddress The address of the candidate (IPv4, IPv6, FQDN)
   * @param localPort The locally used port to communicate with the remote peer
   * @param localProtocol The protocol used by the local endpoint for the corresponded transport
   * @param localCandidateType The type of the ICE candidate used at the local endpoint on the corresponded transport
   * @param localCandidatePriority The priority of the ICE candidate used at the local endpoint on the corresponded transport
   * @param localCandidateICEServerUrl The url of the ICE server used by the local endpoint on the corresponded transport
   * @param localCandidateRelayProtocol The relay protocol of the ICE candidate used by the local endpoint on the corresponded transport
   * @param remoteAddress The address of the candidate (IPv4, IPv6, FQDN)
   * @param remotePort The remotely used port to communicate with the remote peer
   * @param remoteProtocol The protocol used by the remote endpoint for the corresponded transport
   * @param remoteCandidateType The type of the ICE candidate used at the remote endpoint on the corresponded transport
   * @param remoteCandidatePriority The priority of the ICE candidate used at the remote endpoint on the corresponded transport
   * @param remoteCandidateICEServerUrl The url of the ICE server used by the remote endpoint on the corresponded transport
   * @param remoteCandidateRelayProtocol The relay protocol of the ICE candidate used by the remote endpoint on the corresponded transport
   * @param iceCandidatePairState The state of ICE Candidate Pairs (RTCStatsIceCandidatePairState) on the corresponded transport
   * @param iceCandidatePairPacketsSent The total number of packets sent using the last selected candidate pair over the corresponded transport
   * @param iceCandidatePairPacketsReceived The total number of packets received using the last selected candidate pair over the corresponded transport
   * @param iceCandidatePairBytesSent The total number of bytes sent using the last selected candidate pair over the corresponded transport
   * @param iceCandidatePairBytesReceived The total number of bytes received using the last selected candidate pair over the corresponded transport
   * @param iceCandidatePairLastPacketSentTimestamp Represents the timestamp at which the last packet was sent on the selected candidate pair, excluding STUN packets over the corresponded transport (UTC Epoch in ms)
   * @param iceCandidatePairLastPacketReceivedTimestamp Represents the timestamp at which the last packet was received on the selected candidate pair, excluding STUN packets over the corresponded transport (UTC Epoch in ms)
   * @param iceCandidatePairFirstRequestTimestamp Represents the timestamp at which the first STUN request was sent on this particular candidate pair over the corresponded transport (UTC Epoch in ms)
   * @param iceCandidatePairLastRequestTimestamp Represents the timestamp at which the last STUN request was sent on this particular candidate pair over the corresponded transport (UTC Epoch in ms)
   * @param iceCandidatePairLastResponseTimestamp Represents the timestamp at which the last STUN response was received on this particular candidate pair over the corresponded transport (UTC Epoch in ms)
   * @param stunProvidedTotalRoundTripTime Represents the sum of all round trip time measurements in seconds since the beginning of the session, based on STUN connectivity check over the corresponded transport
   * @param stunProvidedCurrentRoundTripTime Represents the last round trip time measurements in seconds based on STUN connectivity check over the corresponded transport
   * @param availableOutgoingBitrate The sum of the underlying cc algorithm provided outgoing bitrate for the RTP streams over the corresponded transport
   * @param availableIncomingBitrate The sum of the underlying cc algorithm provided incoming bitrate for the RTP streams over the corresponded transport
   * @param circuitBreakerTriggerCount The total number of circuit breaker triggered over the corresponded transport using the selected candidate pair
   * @param candidatePairRequestsReceived Represents the total number of connectivity check requests received on the selected candidate pair using the corresponded transport
   * @param candidatePairRequestsSent Represents the total number of connectivity check requests sent on the selected candidate pair using the corresponded transport
   * @param candidatePairResponsesReceived Represents the total number of connectivity check responses received on the selected candidate pair using the corresponded transport
   * @param candidatePairResponsesSent Represents the total number of connectivity check responses sent on the selected candidate pair using the corresponded transport
   * @param candidatePairRetransmissionReceived Represents the total number of connectivity check retransmission received on the selected candidate pair using the corresponded transport
   * @param candidatePairRetransmissionSent Represents the total number of connectivity check retransmission sent on the selected candidate pair using the corresponded transport
   * @param candidatePairConsentRequestsSent Represents the total number of consent requests sent on the selected candidate pair using the corresponded transport
   * @param candidatePairConsentExpiredTimestamp Represents the timestamp at which the latest valid STUN binding response expired on the selected candidate pair using the corresponded transport
   * @param candidatePairBytesDiscardedOnSend Total amount of bytes for this candidate pair that have been discarded due to socket errors on the selected candidate pair using the corresponded transport
   * @param candidatePairRequestBytesSent Total number of bytes sent for connectivity checks on the selected candidate pair using the corresponded transport
   * @param candidatePairConsentRequestBytesSent Total number of bytes sent for consent requests on the selected candidate pair using the corresponded transport
   * @param candidatePairResponseBytesSent Total number of bytes sent for connectivity check responses on the selected candidate pair using the corresponded transport
   * @param sctpSmoothedRoundTripTime The latest smoothed round-trip time value, corresponding to spinfo_srtt defined in [RFC6458] but converted to seconds. 
   * @param sctpCongestionWindow The latest congestion window, corresponding to spinfo_cwnd.
   * @param sctpReceiverWindow The latest receiver window, corresponding to sstat_rwnd.
   * @param sctpMtu The latest maximum transmission unit, corresponding to spinfo_mtu.
   * @param sctpUnackData The number of unacknowledged DATA chunks, corresponding to sstat_unackdata.
   */
  public PcTransportReport(String serviceId, String serviceName, String mediaUnitId, String marker, Long timestamp, String callId, String roomId, String clientId, String userId, String peerConnectionId, String label, Integer packetsSent, Integer packetsReceived, Integer bytesSent, Integer bytesReceived, String iceRole, String iceLocalUsernameFragment, String dtlsState, String iceTransportState, String tlsVersion, String dtlsCipher, String srtpCipher, String tlsGroup, Integer selectedCandidatePairChanges, String localFingerprint, String localFingerprintAlgorithm, String localBase64Certificate, String remoteFingerprint, String remoteFingerprintAlgorithm, String remoteBase64Certificate, String localAddress, Integer localPort, String localProtocol, String localCandidateType, Integer localCandidatePriority, String localCandidateICEServerUrl, String localCandidateRelayProtocol, String remoteAddress, Integer remotePort, String remoteProtocol, String remoteCandidateType, Integer remoteCandidatePriority, String remoteCandidateICEServerUrl, String remoteCandidateRelayProtocol, String iceCandidatePairState, Integer iceCandidatePairPacketsSent, Integer iceCandidatePairPacketsReceived, Long iceCandidatePairBytesSent, Long iceCandidatePairBytesReceived, Long iceCandidatePairLastPacketSentTimestamp, Long iceCandidatePairLastPacketReceivedTimestamp, Long iceCandidatePairFirstRequestTimestamp, Long iceCandidatePairLastRequestTimestamp, Long iceCandidatePairLastResponseTimestamp, Double stunProvidedTotalRoundTripTime, Double stunProvidedCurrentRoundTripTime, Double availableOutgoingBitrate, Double availableIncomingBitrate, Integer circuitBreakerTriggerCount, Integer candidatePairRequestsReceived, Integer candidatePairRequestsSent, Integer candidatePairResponsesReceived, Integer candidatePairResponsesSent, Integer candidatePairRetransmissionReceived, Integer candidatePairRetransmissionSent, Integer candidatePairConsentRequestsSent, Long candidatePairConsentExpiredTimestamp, Long candidatePairBytesDiscardedOnSend, Long candidatePairRequestBytesSent, Long candidatePairConsentRequestBytesSent, Integer candidatePairResponseBytesSent, Double sctpSmoothedRoundTripTime, Double sctpCongestionWindow, Double sctpReceiverWindow, Integer sctpMtu, Integer sctpUnackData) {
    this.serviceId = serviceId;
    this.serviceName = serviceName;
    this.mediaUnitId = mediaUnitId;
    this.marker = marker;
    this.timestamp = timestamp;
    this.callId = callId;
    this.roomId = roomId;
    this.clientId = clientId;
    this.userId = userId;
    this.peerConnectionId = peerConnectionId;
    this.label = label;
    this.packetsSent = packetsSent;
    this.packetsReceived = packetsReceived;
    this.bytesSent = bytesSent;
    this.bytesReceived = bytesReceived;
    this.iceRole = iceRole;
    this.iceLocalUsernameFragment = iceLocalUsernameFragment;
    this.dtlsState = dtlsState;
    this.iceTransportState = iceTransportState;
    this.tlsVersion = tlsVersion;
    this.dtlsCipher = dtlsCipher;
    this.srtpCipher = srtpCipher;
    this.tlsGroup = tlsGroup;
    this.selectedCandidatePairChanges = selectedCandidatePairChanges;
    this.localFingerprint = localFingerprint;
    this.localFingerprintAlgorithm = localFingerprintAlgorithm;
    this.localBase64Certificate = localBase64Certificate;
    this.remoteFingerprint = remoteFingerprint;
    this.remoteFingerprintAlgorithm = remoteFingerprintAlgorithm;
    this.remoteBase64Certificate = remoteBase64Certificate;
    this.localAddress = localAddress;
    this.localPort = localPort;
    this.localProtocol = localProtocol;
    this.localCandidateType = localCandidateType;
    this.localCandidatePriority = localCandidatePriority;
    this.localCandidateICEServerUrl = localCandidateICEServerUrl;
    this.localCandidateRelayProtocol = localCandidateRelayProtocol;
    this.remoteAddress = remoteAddress;
    this.remotePort = remotePort;
    this.remoteProtocol = remoteProtocol;
    this.remoteCandidateType = remoteCandidateType;
    this.remoteCandidatePriority = remoteCandidatePriority;
    this.remoteCandidateICEServerUrl = remoteCandidateICEServerUrl;
    this.remoteCandidateRelayProtocol = remoteCandidateRelayProtocol;
    this.iceCandidatePairState = iceCandidatePairState;
    this.iceCandidatePairPacketsSent = iceCandidatePairPacketsSent;
    this.iceCandidatePairPacketsReceived = iceCandidatePairPacketsReceived;
    this.iceCandidatePairBytesSent = iceCandidatePairBytesSent;
    this.iceCandidatePairBytesReceived = iceCandidatePairBytesReceived;
    this.iceCandidatePairLastPacketSentTimestamp = iceCandidatePairLastPacketSentTimestamp;
    this.iceCandidatePairLastPacketReceivedTimestamp = iceCandidatePairLastPacketReceivedTimestamp;
    this.iceCandidatePairFirstRequestTimestamp = iceCandidatePairFirstRequestTimestamp;
    this.iceCandidatePairLastRequestTimestamp = iceCandidatePairLastRequestTimestamp;
    this.iceCandidatePairLastResponseTimestamp = iceCandidatePairLastResponseTimestamp;
    this.stunProvidedTotalRoundTripTime = stunProvidedTotalRoundTripTime;
    this.stunProvidedCurrentRoundTripTime = stunProvidedCurrentRoundTripTime;
    this.availableOutgoingBitrate = availableOutgoingBitrate;
    this.availableIncomingBitrate = availableIncomingBitrate;
    this.circuitBreakerTriggerCount = circuitBreakerTriggerCount;
    this.candidatePairRequestsReceived = candidatePairRequestsReceived;
    this.candidatePairRequestsSent = candidatePairRequestsSent;
    this.candidatePairResponsesReceived = candidatePairResponsesReceived;
    this.candidatePairResponsesSent = candidatePairResponsesSent;
    this.candidatePairRetransmissionReceived = candidatePairRetransmissionReceived;
    this.candidatePairRetransmissionSent = candidatePairRetransmissionSent;
    this.candidatePairConsentRequestsSent = candidatePairConsentRequestsSent;
    this.candidatePairConsentExpiredTimestamp = candidatePairConsentExpiredTimestamp;
    this.candidatePairBytesDiscardedOnSend = candidatePairBytesDiscardedOnSend;
    this.candidatePairRequestBytesSent = candidatePairRequestBytesSent;
    this.candidatePairConsentRequestBytesSent = candidatePairConsentRequestBytesSent;
    this.candidatePairResponseBytesSent = candidatePairResponseBytesSent;
    this.sctpSmoothedRoundTripTime = sctpSmoothedRoundTripTime;
    this.sctpCongestionWindow = sctpCongestionWindow;
    this.sctpReceiverWindow = sctpReceiverWindow;
    this.sctpMtu = sctpMtu;
    this.sctpUnackData = sctpUnackData;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return serviceId;
    case 1: return serviceName;
    case 2: return mediaUnitId;
    case 3: return marker;
    case 4: return timestamp;
    case 5: return callId;
    case 6: return roomId;
    case 7: return clientId;
    case 8: return userId;
    case 9: return peerConnectionId;
    case 10: return label;
    case 11: return packetsSent;
    case 12: return packetsReceived;
    case 13: return bytesSent;
    case 14: return bytesReceived;
    case 15: return iceRole;
    case 16: return iceLocalUsernameFragment;
    case 17: return dtlsState;
    case 18: return iceTransportState;
    case 19: return tlsVersion;
    case 20: return dtlsCipher;
    case 21: return srtpCipher;
    case 22: return tlsGroup;
    case 23: return selectedCandidatePairChanges;
    case 24: return localFingerprint;
    case 25: return localFingerprintAlgorithm;
    case 26: return localBase64Certificate;
    case 27: return remoteFingerprint;
    case 28: return remoteFingerprintAlgorithm;
    case 29: return remoteBase64Certificate;
    case 30: return localAddress;
    case 31: return localPort;
    case 32: return localProtocol;
    case 33: return localCandidateType;
    case 34: return localCandidatePriority;
    case 35: return localCandidateICEServerUrl;
    case 36: return localCandidateRelayProtocol;
    case 37: return remoteAddress;
    case 38: return remotePort;
    case 39: return remoteProtocol;
    case 40: return remoteCandidateType;
    case 41: return remoteCandidatePriority;
    case 42: return remoteCandidateICEServerUrl;
    case 43: return remoteCandidateRelayProtocol;
    case 44: return iceCandidatePairState;
    case 45: return iceCandidatePairPacketsSent;
    case 46: return iceCandidatePairPacketsReceived;
    case 47: return iceCandidatePairBytesSent;
    case 48: return iceCandidatePairBytesReceived;
    case 49: return iceCandidatePairLastPacketSentTimestamp;
    case 50: return iceCandidatePairLastPacketReceivedTimestamp;
    case 51: return iceCandidatePairFirstRequestTimestamp;
    case 52: return iceCandidatePairLastRequestTimestamp;
    case 53: return iceCandidatePairLastResponseTimestamp;
    case 54: return stunProvidedTotalRoundTripTime;
    case 55: return stunProvidedCurrentRoundTripTime;
    case 56: return availableOutgoingBitrate;
    case 57: return availableIncomingBitrate;
    case 58: return circuitBreakerTriggerCount;
    case 59: return candidatePairRequestsReceived;
    case 60: return candidatePairRequestsSent;
    case 61: return candidatePairResponsesReceived;
    case 62: return candidatePairResponsesSent;
    case 63: return candidatePairRetransmissionReceived;
    case 64: return candidatePairRetransmissionSent;
    case 65: return candidatePairConsentRequestsSent;
    case 66: return candidatePairConsentExpiredTimestamp;
    case 67: return candidatePairBytesDiscardedOnSend;
    case 68: return candidatePairRequestBytesSent;
    case 69: return candidatePairConsentRequestBytesSent;
    case 70: return candidatePairResponseBytesSent;
    case 71: return sctpSmoothedRoundTripTime;
    case 72: return sctpCongestionWindow;
    case 73: return sctpReceiverWindow;
    case 74: return sctpMtu;
    case 75: return sctpUnackData;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: serviceId = (String)value$; break;
    case 1: serviceName = (String)value$; break;
    case 2: mediaUnitId = (String)value$; break;
    case 3: marker = (String)value$; break;
    case 4: timestamp = (Long)value$; break;
    case 5: callId = (String)value$; break;
    case 6: roomId = (String)value$; break;
    case 7: clientId = (String)value$; break;
    case 8: userId = (String)value$; break;
    case 9: peerConnectionId = (String)value$; break;
    case 10: label = (String)value$; break;
    case 11: packetsSent = (Integer)value$; break;
    case 12: packetsReceived = (Integer)value$; break;
    case 13: bytesSent = (Integer)value$; break;
    case 14: bytesReceived = (Integer)value$; break;
    case 15: iceRole = (String)value$; break;
    case 16: iceLocalUsernameFragment = (String)value$; break;
    case 17: dtlsState = (String)value$; break;
    case 18: iceTransportState = (String)value$; break;
    case 19: tlsVersion = (String)value$; break;
    case 20: dtlsCipher = (String)value$; break;
    case 21: srtpCipher = (String)value$; break;
    case 22: tlsGroup = (String)value$; break;
    case 23: selectedCandidatePairChanges = (Integer)value$; break;
    case 24: localFingerprint = (String)value$; break;
    case 25: localFingerprintAlgorithm = (String)value$; break;
    case 26: localBase64Certificate = (String)value$; break;
    case 27: remoteFingerprint = (String)value$; break;
    case 28: remoteFingerprintAlgorithm = (String)value$; break;
    case 29: remoteBase64Certificate = (String)value$; break;
    case 30: localAddress = (String)value$; break;
    case 31: localPort = (Integer)value$; break;
    case 32: localProtocol = (String)value$; break;
    case 33: localCandidateType = (String)value$; break;
    case 34: localCandidatePriority = (Integer)value$; break;
    case 35: localCandidateICEServerUrl = (String)value$; break;
    case 36: localCandidateRelayProtocol = (String)value$; break;
    case 37: remoteAddress = (String)value$; break;
    case 38: remotePort = (Integer)value$; break;
    case 39: remoteProtocol = (String)value$; break;
    case 40: remoteCandidateType = (String)value$; break;
    case 41: remoteCandidatePriority = (Integer)value$; break;
    case 42: remoteCandidateICEServerUrl = (String)value$; break;
    case 43: remoteCandidateRelayProtocol = (String)value$; break;
    case 44: iceCandidatePairState = (String)value$; break;
    case 45: iceCandidatePairPacketsSent = (Integer)value$; break;
    case 46: iceCandidatePairPacketsReceived = (Integer)value$; break;
    case 47: iceCandidatePairBytesSent = (Long)value$; break;
    case 48: iceCandidatePairBytesReceived = (Long)value$; break;
    case 49: iceCandidatePairLastPacketSentTimestamp = (Long)value$; break;
    case 50: iceCandidatePairLastPacketReceivedTimestamp = (Long)value$; break;
    case 51: iceCandidatePairFirstRequestTimestamp = (Long)value$; break;
    case 52: iceCandidatePairLastRequestTimestamp = (Long)value$; break;
    case 53: iceCandidatePairLastResponseTimestamp = (Long)value$; break;
    case 54: stunProvidedTotalRoundTripTime = (Double)value$; break;
    case 55: stunProvidedCurrentRoundTripTime = (Double)value$; break;
    case 56: availableOutgoingBitrate = (Double)value$; break;
    case 57: availableIncomingBitrate = (Double)value$; break;
    case 58: circuitBreakerTriggerCount = (Integer)value$; break;
    case 59: candidatePairRequestsReceived = (Integer)value$; break;
    case 60: candidatePairRequestsSent = (Integer)value$; break;
    case 61: candidatePairResponsesReceived = (Integer)value$; break;
    case 62: candidatePairResponsesSent = (Integer)value$; break;
    case 63: candidatePairRetransmissionReceived = (Integer)value$; break;
    case 64: candidatePairRetransmissionSent = (Integer)value$; break;
    case 65: candidatePairConsentRequestsSent = (Integer)value$; break;
    case 66: candidatePairConsentExpiredTimestamp = (Long)value$; break;
    case 67: candidatePairBytesDiscardedOnSend = (Long)value$; break;
    case 68: candidatePairRequestBytesSent = (Long)value$; break;
    case 69: candidatePairConsentRequestBytesSent = (Long)value$; break;
    case 70: candidatePairResponseBytesSent = (Integer)value$; break;
    case 71: sctpSmoothedRoundTripTime = (Double)value$; break;
    case 72: sctpCongestionWindow = (Double)value$; break;
    case 73: sctpReceiverWindow = (Double)value$; break;
    case 74: sctpMtu = (Integer)value$; break;
    case 75: sctpUnackData = (Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'serviceId' field.
   * @return The unique identifier of the service
   */
  public String getServiceId() {
    return serviceId;
  }


  /**
   * Gets the value of the 'serviceName' field.
   * @return The resolved service name configured for the service Id
   */
  public String getServiceName() {
    return serviceName;
  }


  /**
   * Gets the value of the 'mediaUnitId' field.
   * @return The media unit id the report belongs to
   */
  public String getMediaUnitId() {
    return mediaUnitId;
  }


  /**
   * Gets the value of the 'marker' field.
   * @return The marker the originated sample is reported with
   */
  public String getMarker() {
    return marker;
  }


  /**
   * Gets the value of the 'timestamp' field.
   * @return The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
   */
  public Long getTimestamp() {
    return timestamp;
  }


  /**
   * Gets the value of the 'callId' field.
   * @return The generated unique identifier of the call
   */
  public String getCallId() {
    return callId;
  }


  /**
   * Gets the value of the 'roomId' field.
   * @return webrtc app provided room id
   */
  public String getRoomId() {
    return roomId;
  }


  /**
   * Gets the value of the 'clientId' field.
   * @return The generated unique identifier of the client
   */
  public String getClientId() {
    return clientId;
  }


  /**
   * Gets the value of the 'userId' field.
   * @return webrtc app provided user identifier
   */
  public String getUserId() {
    return userId;
  }


  /**
   * Gets the value of the 'peerConnectionId' field.
   * @return The unique identifier of the peer connection
   */
  public String getPeerConnectionId() {
    return peerConnectionId;
  }


  /**
   * Gets the value of the 'label' field.
   * @return The webrtc app provided label the peer connection is marked with
   */
  public String getLabel() {
    return label;
  }


  /**
   * Gets the value of the 'packetsSent' field.
   * @return Represents the total number of packets sent on the corresponded transport
   */
  public Integer getPacketsSent() {
    return packetsSent;
  }


  /**
   * Gets the value of the 'packetsReceived' field.
   * @return Represents the total number of packets received on the corresponded transport
   */
  public Integer getPacketsReceived() {
    return packetsReceived;
  }


  /**
   * Gets the value of the 'bytesSent' field.
   * @return Represents the total amount of bytes sent on the corresponded transport
   */
  public Integer getBytesSent() {
    return bytesSent;
  }


  /**
   * Gets the value of the 'bytesReceived' field.
   * @return Represents the total amount of bytes received on the corresponded transport
   */
  public Integer getBytesReceived() {
    return bytesReceived;
  }


  /**
   * Gets the value of the 'iceRole' field.
   * @return Represent the current role of ICE under DTLS Transport
   */
  public String getIceRole() {
    return iceRole;
  }


  /**
   * Gets the value of the 'iceLocalUsernameFragment' field.
   * @return Represent the current local username fragment used in message validation procedures for ICE under DTLS Transport
   */
  public String getIceLocalUsernameFragment() {
    return iceLocalUsernameFragment;
  }


  /**
   * Gets the value of the 'dtlsState' field.
   * @return Represents the current state of DTLS for the peer connection transport layer
   */
  public String getDtlsState() {
    return dtlsState;
  }


  /**
   * Gets the value of the 'iceTransportState' field.
   * @return Represents the current transport state (RTCIceTransportState) of ICE for the peer connection transport layer
   */
  public String getIceTransportState() {
    return iceTransportState;
  }


  /**
   * Gets the value of the 'tlsVersion' field.
   * @return Represents the version number of the TLS used in the corresponded transport
   */
  public String getTlsVersion() {
    return tlsVersion;
  }


  /**
   * Gets the value of the 'dtlsCipher' field.
   * @return Represents the name of the DTLS cipher used in the corresponded transport
   */
  public String getDtlsCipher() {
    return dtlsCipher;
  }


  /**
   * Gets the value of the 'srtpCipher' field.
   * @return Represents the name of the SRTP cipher used in the corresponded transport
   */
  public String getSrtpCipher() {
    return srtpCipher;
  }


  /**
   * Gets the value of the 'tlsGroup' field.
   * @return Represents the name of the IANA TLS Supported Groups used in the corresponded transport
   */
  public String getTlsGroup() {
    return tlsGroup;
  }


  /**
   * Gets the value of the 'selectedCandidatePairChanges' field.
   * @return The total number of candidate pair changes over the peer connection
   */
  public Integer getSelectedCandidatePairChanges() {
    return selectedCandidatePairChanges;
  }


  /**
   * Gets the value of the 'localFingerprint' field.
   * @return The fingerprint of the certificate certifies the local endpoint of the transport
   */
  public String getLocalFingerprint() {
    return localFingerprint;
  }


  /**
   * Gets the value of the 'localFingerprintAlgorithm' field.
   * @return The algorithm generate the fingerprint of the certificate certifies the local endpoint of the transport
   */
  public String getLocalFingerprintAlgorithm() {
    return localFingerprintAlgorithm;
  }


  /**
   * Gets the value of the 'localBase64Certificate' field.
   * @return The base64 encoded certificate for the local endpoint corresponded to the transport
   */
  public String getLocalBase64Certificate() {
    return localBase64Certificate;
  }


  /**
   * Gets the value of the 'remoteFingerprint' field.
   * @return The fingerprint of the certificate certifies the remote endpoint of the transport
   */
  public String getRemoteFingerprint() {
    return remoteFingerprint;
  }


  /**
   * Gets the value of the 'remoteFingerprintAlgorithm' field.
   * @return The algorithm generate the fingerprint of the certificate certifies the remote endpoint of the transport
   */
  public String getRemoteFingerprintAlgorithm() {
    return remoteFingerprintAlgorithm;
  }


  /**
   * Gets the value of the 'remoteBase64Certificate' field.
   * @return The base64 encoded certificate for the remote endpoint corresponded to the transport
   */
  public String getRemoteBase64Certificate() {
    return remoteBase64Certificate;
  }


  /**
   * Gets the value of the 'localAddress' field.
   * @return The address of the candidate (IPv4, IPv6, FQDN)
   */
  public String getLocalAddress() {
    return localAddress;
  }


  /**
   * Gets the value of the 'localPort' field.
   * @return The locally used port to communicate with the remote peer
   */
  public Integer getLocalPort() {
    return localPort;
  }


  /**
   * Gets the value of the 'localProtocol' field.
   * @return The protocol used by the local endpoint for the corresponded transport
   */
  public String getLocalProtocol() {
    return localProtocol;
  }


  /**
   * Gets the value of the 'localCandidateType' field.
   * @return The type of the ICE candidate used at the local endpoint on the corresponded transport
   */
  public String getLocalCandidateType() {
    return localCandidateType;
  }


  /**
   * Gets the value of the 'localCandidatePriority' field.
   * @return The priority of the ICE candidate used at the local endpoint on the corresponded transport
   */
  public Integer getLocalCandidatePriority() {
    return localCandidatePriority;
  }


  /**
   * Gets the value of the 'localCandidateICEServerUrl' field.
   * @return The url of the ICE server used by the local endpoint on the corresponded transport
   */
  public String getLocalCandidateICEServerUrl() {
    return localCandidateICEServerUrl;
  }


  /**
   * Gets the value of the 'localCandidateRelayProtocol' field.
   * @return The relay protocol of the ICE candidate used by the local endpoint on the corresponded transport
   */
  public String getLocalCandidateRelayProtocol() {
    return localCandidateRelayProtocol;
  }


  /**
   * Gets the value of the 'remoteAddress' field.
   * @return The address of the candidate (IPv4, IPv6, FQDN)
   */
  public String getRemoteAddress() {
    return remoteAddress;
  }


  /**
   * Gets the value of the 'remotePort' field.
   * @return The remotely used port to communicate with the remote peer
   */
  public Integer getRemotePort() {
    return remotePort;
  }


  /**
   * Gets the value of the 'remoteProtocol' field.
   * @return The protocol used by the remote endpoint for the corresponded transport
   */
  public String getRemoteProtocol() {
    return remoteProtocol;
  }


  /**
   * Gets the value of the 'remoteCandidateType' field.
   * @return The type of the ICE candidate used at the remote endpoint on the corresponded transport
   */
  public String getRemoteCandidateType() {
    return remoteCandidateType;
  }


  /**
   * Gets the value of the 'remoteCandidatePriority' field.
   * @return The priority of the ICE candidate used at the remote endpoint on the corresponded transport
   */
  public Integer getRemoteCandidatePriority() {
    return remoteCandidatePriority;
  }


  /**
   * Gets the value of the 'remoteCandidateICEServerUrl' field.
   * @return The url of the ICE server used by the remote endpoint on the corresponded transport
   */
  public String getRemoteCandidateICEServerUrl() {
    return remoteCandidateICEServerUrl;
  }


  /**
   * Gets the value of the 'remoteCandidateRelayProtocol' field.
   * @return The relay protocol of the ICE candidate used by the remote endpoint on the corresponded transport
   */
  public String getRemoteCandidateRelayProtocol() {
    return remoteCandidateRelayProtocol;
  }


  /**
   * Gets the value of the 'iceCandidatePairState' field.
   * @return The state of ICE Candidate Pairs (RTCStatsIceCandidatePairState) on the corresponded transport
   */
  public String getIceCandidatePairState() {
    return iceCandidatePairState;
  }


  /**
   * Gets the value of the 'iceCandidatePairPacketsSent' field.
   * @return The total number of packets sent using the last selected candidate pair over the corresponded transport
   */
  public Integer getIceCandidatePairPacketsSent() {
    return iceCandidatePairPacketsSent;
  }


  /**
   * Gets the value of the 'iceCandidatePairPacketsReceived' field.
   * @return The total number of packets received using the last selected candidate pair over the corresponded transport
   */
  public Integer getIceCandidatePairPacketsReceived() {
    return iceCandidatePairPacketsReceived;
  }


  /**
   * Gets the value of the 'iceCandidatePairBytesSent' field.
   * @return The total number of bytes sent using the last selected candidate pair over the corresponded transport
   */
  public Long getIceCandidatePairBytesSent() {
    return iceCandidatePairBytesSent;
  }


  /**
   * Gets the value of the 'iceCandidatePairBytesReceived' field.
   * @return The total number of bytes received using the last selected candidate pair over the corresponded transport
   */
  public Long getIceCandidatePairBytesReceived() {
    return iceCandidatePairBytesReceived;
  }


  /**
   * Gets the value of the 'iceCandidatePairLastPacketSentTimestamp' field.
   * @return Represents the timestamp at which the last packet was sent on the selected candidate pair, excluding STUN packets over the corresponded transport (UTC Epoch in ms)
   */
  public Long getIceCandidatePairLastPacketSentTimestamp() {
    return iceCandidatePairLastPacketSentTimestamp;
  }


  /**
   * Gets the value of the 'iceCandidatePairLastPacketReceivedTimestamp' field.
   * @return Represents the timestamp at which the last packet was received on the selected candidate pair, excluding STUN packets over the corresponded transport (UTC Epoch in ms)
   */
  public Long getIceCandidatePairLastPacketReceivedTimestamp() {
    return iceCandidatePairLastPacketReceivedTimestamp;
  }


  /**
   * Gets the value of the 'iceCandidatePairFirstRequestTimestamp' field.
   * @return Represents the timestamp at which the first STUN request was sent on this particular candidate pair over the corresponded transport (UTC Epoch in ms)
   */
  public Long getIceCandidatePairFirstRequestTimestamp() {
    return iceCandidatePairFirstRequestTimestamp;
  }


  /**
   * Gets the value of the 'iceCandidatePairLastRequestTimestamp' field.
   * @return Represents the timestamp at which the last STUN request was sent on this particular candidate pair over the corresponded transport (UTC Epoch in ms)
   */
  public Long getIceCandidatePairLastRequestTimestamp() {
    return iceCandidatePairLastRequestTimestamp;
  }


  /**
   * Gets the value of the 'iceCandidatePairLastResponseTimestamp' field.
   * @return Represents the timestamp at which the last STUN response was received on this particular candidate pair over the corresponded transport (UTC Epoch in ms)
   */
  public Long getIceCandidatePairLastResponseTimestamp() {
    return iceCandidatePairLastResponseTimestamp;
  }


  /**
   * Gets the value of the 'stunProvidedTotalRoundTripTime' field.
   * @return Represents the sum of all round trip time measurements in seconds since the beginning of the session, based on STUN connectivity check over the corresponded transport
   */
  public Double getStunProvidedTotalRoundTripTime() {
    return stunProvidedTotalRoundTripTime;
  }


  /**
   * Gets the value of the 'stunProvidedCurrentRoundTripTime' field.
   * @return Represents the last round trip time measurements in seconds based on STUN connectivity check over the corresponded transport
   */
  public Double getStunProvidedCurrentRoundTripTime() {
    return stunProvidedCurrentRoundTripTime;
  }


  /**
   * Gets the value of the 'availableOutgoingBitrate' field.
   * @return The sum of the underlying cc algorithm provided outgoing bitrate for the RTP streams over the corresponded transport
   */
  public Double getAvailableOutgoingBitrate() {
    return availableOutgoingBitrate;
  }


  /**
   * Gets the value of the 'availableIncomingBitrate' field.
   * @return The sum of the underlying cc algorithm provided incoming bitrate for the RTP streams over the corresponded transport
   */
  public Double getAvailableIncomingBitrate() {
    return availableIncomingBitrate;
  }


  /**
   * Gets the value of the 'circuitBreakerTriggerCount' field.
   * @return The total number of circuit breaker triggered over the corresponded transport using the selected candidate pair
   */
  public Integer getCircuitBreakerTriggerCount() {
    return circuitBreakerTriggerCount;
  }


  /**
   * Gets the value of the 'candidatePairRequestsReceived' field.
   * @return Represents the total number of connectivity check requests received on the selected candidate pair using the corresponded transport
   */
  public Integer getCandidatePairRequestsReceived() {
    return candidatePairRequestsReceived;
  }


  /**
   * Gets the value of the 'candidatePairRequestsSent' field.
   * @return Represents the total number of connectivity check requests sent on the selected candidate pair using the corresponded transport
   */
  public Integer getCandidatePairRequestsSent() {
    return candidatePairRequestsSent;
  }


  /**
   * Gets the value of the 'candidatePairResponsesReceived' field.
   * @return Represents the total number of connectivity check responses received on the selected candidate pair using the corresponded transport
   */
  public Integer getCandidatePairResponsesReceived() {
    return candidatePairResponsesReceived;
  }


  /**
   * Gets the value of the 'candidatePairResponsesSent' field.
   * @return Represents the total number of connectivity check responses sent on the selected candidate pair using the corresponded transport
   */
  public Integer getCandidatePairResponsesSent() {
    return candidatePairResponsesSent;
  }


  /**
   * Gets the value of the 'candidatePairRetransmissionReceived' field.
   * @return Represents the total number of connectivity check retransmission received on the selected candidate pair using the corresponded transport
   */
  public Integer getCandidatePairRetransmissionReceived() {
    return candidatePairRetransmissionReceived;
  }


  /**
   * Gets the value of the 'candidatePairRetransmissionSent' field.
   * @return Represents the total number of connectivity check retransmission sent on the selected candidate pair using the corresponded transport
   */
  public Integer getCandidatePairRetransmissionSent() {
    return candidatePairRetransmissionSent;
  }


  /**
   * Gets the value of the 'candidatePairConsentRequestsSent' field.
   * @return Represents the total number of consent requests sent on the selected candidate pair using the corresponded transport
   */
  public Integer getCandidatePairConsentRequestsSent() {
    return candidatePairConsentRequestsSent;
  }


  /**
   * Gets the value of the 'candidatePairConsentExpiredTimestamp' field.
   * @return Represents the timestamp at which the latest valid STUN binding response expired on the selected candidate pair using the corresponded transport
   */
  public Long getCandidatePairConsentExpiredTimestamp() {
    return candidatePairConsentExpiredTimestamp;
  }


  /**
   * Gets the value of the 'candidatePairBytesDiscardedOnSend' field.
   * @return Total amount of bytes for this candidate pair that have been discarded due to socket errors on the selected candidate pair using the corresponded transport
   */
  public Long getCandidatePairBytesDiscardedOnSend() {
    return candidatePairBytesDiscardedOnSend;
  }


  /**
   * Gets the value of the 'candidatePairRequestBytesSent' field.
   * @return Total number of bytes sent for connectivity checks on the selected candidate pair using the corresponded transport
   */
  public Long getCandidatePairRequestBytesSent() {
    return candidatePairRequestBytesSent;
  }


  /**
   * Gets the value of the 'candidatePairConsentRequestBytesSent' field.
   * @return Total number of bytes sent for consent requests on the selected candidate pair using the corresponded transport
   */
  public Long getCandidatePairConsentRequestBytesSent() {
    return candidatePairConsentRequestBytesSent;
  }


  /**
   * Gets the value of the 'candidatePairResponseBytesSent' field.
   * @return Total number of bytes sent for connectivity check responses on the selected candidate pair using the corresponded transport
   */
  public Integer getCandidatePairResponseBytesSent() {
    return candidatePairResponseBytesSent;
  }


  /**
   * Gets the value of the 'sctpSmoothedRoundTripTime' field.
   * @return The latest smoothed round-trip time value, corresponding to spinfo_srtt defined in [RFC6458] but converted to seconds. 
   */
  public Double getSctpSmoothedRoundTripTime() {
    return sctpSmoothedRoundTripTime;
  }


  /**
   * Gets the value of the 'sctpCongestionWindow' field.
   * @return The latest congestion window, corresponding to spinfo_cwnd.
   */
  public Double getSctpCongestionWindow() {
    return sctpCongestionWindow;
  }


  /**
   * Gets the value of the 'sctpReceiverWindow' field.
   * @return The latest receiver window, corresponding to sstat_rwnd.
   */
  public Double getSctpReceiverWindow() {
    return sctpReceiverWindow;
  }


  /**
   * Gets the value of the 'sctpMtu' field.
   * @return The latest maximum transmission unit, corresponding to spinfo_mtu.
   */
  public Integer getSctpMtu() {
    return sctpMtu;
  }


  /**
   * Gets the value of the 'sctpUnackData' field.
   * @return The number of unacknowledged DATA chunks, corresponding to sstat_unackdata.
   */
  public Integer getSctpUnackData() {
    return sctpUnackData;
  }


  /**
   * Creates a new PcTransportReport RecordBuilder.
   * @return A new PcTransportReport RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new PcTransportReport RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PcTransportReport RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }

  /**
   * Creates a new PcTransportReport RecordBuilder by copying an existing PcTransportReport instance.
   * @param other The existing instance to copy.
   * @return A new PcTransportReport RecordBuilder
   */
  public static Builder newBuilder(PcTransportReport other) {
    return new Builder(other);
  }

  /**
   * RecordBuilder for PcTransportReport instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PcTransportReport>
    implements org.apache.avro.data.RecordBuilder<PcTransportReport> {

    /** The unique identifier of the service */
    private String serviceId;
    /** The resolved service name configured for the service Id */
    private String serviceName;
    /** The media unit id the report belongs to */
    private String mediaUnitId;
    /** The marker the originated sample is reported with */
    private String marker;
    /** The timestamp when the corresponded data is generated for the report (UTC Epoch in ms) */
    private long timestamp;
    /** The generated unique identifier of the call */
    private String callId;
    /** webrtc app provided room id */
    private String roomId;
    /** The generated unique identifier of the client */
    private String clientId;
    /** webrtc app provided user identifier */
    private String userId;
    /** The unique identifier of the peer connection */
    private String peerConnectionId;
    /** The webrtc app provided label the peer connection is marked with */
    private String label;
    /** Represents the total number of packets sent on the corresponded transport */
    private Integer packetsSent;
    /** Represents the total number of packets received on the corresponded transport */
    private Integer packetsReceived;
    /** Represents the total amount of bytes sent on the corresponded transport */
    private Integer bytesSent;
    /** Represents the total amount of bytes received on the corresponded transport */
    private Integer bytesReceived;
    /** Represent the current role of ICE under DTLS Transport */
    private String iceRole;
    /** Represent the current local username fragment used in message validation procedures for ICE under DTLS Transport */
    private String iceLocalUsernameFragment;
    /** Represents the current state of DTLS for the peer connection transport layer */
    private String dtlsState;
    /** Represents the current transport state (RTCIceTransportState) of ICE for the peer connection transport layer */
    private String iceTransportState;
    /** Represents the version number of the TLS used in the corresponded transport */
    private String tlsVersion;
    /** Represents the name of the DTLS cipher used in the corresponded transport */
    private String dtlsCipher;
    /** Represents the name of the SRTP cipher used in the corresponded transport */
    private String srtpCipher;
    /** Represents the name of the IANA TLS Supported Groups used in the corresponded transport */
    private String tlsGroup;
    /** The total number of candidate pair changes over the peer connection */
    private Integer selectedCandidatePairChanges;
    /** The fingerprint of the certificate certifies the local endpoint of the transport */
    private String localFingerprint;
    /** The algorithm generate the fingerprint of the certificate certifies the local endpoint of the transport */
    private String localFingerprintAlgorithm;
    /** The base64 encoded certificate for the local endpoint corresponded to the transport */
    private String localBase64Certificate;
    /** The fingerprint of the certificate certifies the remote endpoint of the transport */
    private String remoteFingerprint;
    /** The algorithm generate the fingerprint of the certificate certifies the remote endpoint of the transport */
    private String remoteFingerprintAlgorithm;
    /** The base64 encoded certificate for the remote endpoint corresponded to the transport */
    private String remoteBase64Certificate;
    /** The address of the candidate (IPv4, IPv6, FQDN) */
    private String localAddress;
    /** The locally used port to communicate with the remote peer */
    private Integer localPort;
    /** The protocol used by the local endpoint for the corresponded transport */
    private String localProtocol;
    /** The type of the ICE candidate used at the local endpoint on the corresponded transport */
    private String localCandidateType;
    /** The priority of the ICE candidate used at the local endpoint on the corresponded transport */
    private Integer localCandidatePriority;
    /** The url of the ICE server used by the local endpoint on the corresponded transport */
    private String localCandidateICEServerUrl;
    /** The relay protocol of the ICE candidate used by the local endpoint on the corresponded transport */
    private String localCandidateRelayProtocol;
    /** The address of the candidate (IPv4, IPv6, FQDN) */
    private String remoteAddress;
    /** The remotely used port to communicate with the remote peer */
    private Integer remotePort;
    /** The protocol used by the remote endpoint for the corresponded transport */
    private String remoteProtocol;
    /** The type of the ICE candidate used at the remote endpoint on the corresponded transport */
    private String remoteCandidateType;
    /** The priority of the ICE candidate used at the remote endpoint on the corresponded transport */
    private Integer remoteCandidatePriority;
    /** The url of the ICE server used by the remote endpoint on the corresponded transport */
    private String remoteCandidateICEServerUrl;
    /** The relay protocol of the ICE candidate used by the remote endpoint on the corresponded transport */
    private String remoteCandidateRelayProtocol;
    /** The state of ICE Candidate Pairs (RTCStatsIceCandidatePairState) on the corresponded transport */
    private String iceCandidatePairState;
    /** The total number of packets sent using the last selected candidate pair over the corresponded transport */
    private Integer iceCandidatePairPacketsSent;
    /** The total number of packets received using the last selected candidate pair over the corresponded transport */
    private Integer iceCandidatePairPacketsReceived;
    /** The total number of bytes sent using the last selected candidate pair over the corresponded transport */
    private Long iceCandidatePairBytesSent;
    /** The total number of bytes received using the last selected candidate pair over the corresponded transport */
    private Long iceCandidatePairBytesReceived;
    /** Represents the timestamp at which the last packet was sent on the selected candidate pair, excluding STUN packets over the corresponded transport (UTC Epoch in ms) */
    private Long iceCandidatePairLastPacketSentTimestamp;
    /** Represents the timestamp at which the last packet was received on the selected candidate pair, excluding STUN packets over the corresponded transport (UTC Epoch in ms) */
    private Long iceCandidatePairLastPacketReceivedTimestamp;
    /** Represents the timestamp at which the first STUN request was sent on this particular candidate pair over the corresponded transport (UTC Epoch in ms) */
    private Long iceCandidatePairFirstRequestTimestamp;
    /** Represents the timestamp at which the last STUN request was sent on this particular candidate pair over the corresponded transport (UTC Epoch in ms) */
    private Long iceCandidatePairLastRequestTimestamp;
    /** Represents the timestamp at which the last STUN response was received on this particular candidate pair over the corresponded transport (UTC Epoch in ms) */
    private Long iceCandidatePairLastResponseTimestamp;
    /** Represents the sum of all round trip time measurements in seconds since the beginning of the session, based on STUN connectivity check over the corresponded transport */
    private Double stunProvidedTotalRoundTripTime;
    /** Represents the last round trip time measurements in seconds based on STUN connectivity check over the corresponded transport */
    private Double stunProvidedCurrentRoundTripTime;
    /** The sum of the underlying cc algorithm provided outgoing bitrate for the RTP streams over the corresponded transport */
    private Double availableOutgoingBitrate;
    /** The sum of the underlying cc algorithm provided incoming bitrate for the RTP streams over the corresponded transport */
    private Double availableIncomingBitrate;
    /** The total number of circuit breaker triggered over the corresponded transport using the selected candidate pair */
    private Integer circuitBreakerTriggerCount;
    /** Represents the total number of connectivity check requests received on the selected candidate pair using the corresponded transport */
    private Integer candidatePairRequestsReceived;
    /** Represents the total number of connectivity check requests sent on the selected candidate pair using the corresponded transport */
    private Integer candidatePairRequestsSent;
    /** Represents the total number of connectivity check responses received on the selected candidate pair using the corresponded transport */
    private Integer candidatePairResponsesReceived;
    /** Represents the total number of connectivity check responses sent on the selected candidate pair using the corresponded transport */
    private Integer candidatePairResponsesSent;
    /** Represents the total number of connectivity check retransmission received on the selected candidate pair using the corresponded transport */
    private Integer candidatePairRetransmissionReceived;
    /** Represents the total number of connectivity check retransmission sent on the selected candidate pair using the corresponded transport */
    private Integer candidatePairRetransmissionSent;
    /** Represents the total number of consent requests sent on the selected candidate pair using the corresponded transport */
    private Integer candidatePairConsentRequestsSent;
    /** Represents the timestamp at which the latest valid STUN binding response expired on the selected candidate pair using the corresponded transport */
    private Long candidatePairConsentExpiredTimestamp;
    /** Total amount of bytes for this candidate pair that have been discarded due to socket errors on the selected candidate pair using the corresponded transport */
    private Long candidatePairBytesDiscardedOnSend;
    /** Total number of bytes sent for connectivity checks on the selected candidate pair using the corresponded transport */
    private Long candidatePairRequestBytesSent;
    /** Total number of bytes sent for consent requests on the selected candidate pair using the corresponded transport */
    private Long candidatePairConsentRequestBytesSent;
    /** Total number of bytes sent for connectivity check responses on the selected candidate pair using the corresponded transport */
    private Integer candidatePairResponseBytesSent;
    /** The latest smoothed round-trip time value, corresponding to spinfo_srtt defined in [RFC6458] but converted to seconds.  */
    private Double sctpSmoothedRoundTripTime;
    /** The latest congestion window, corresponding to spinfo_cwnd. */
    private Double sctpCongestionWindow;
    /** The latest receiver window, corresponding to sstat_rwnd. */
    private Double sctpReceiverWindow;
    /** The latest maximum transmission unit, corresponding to spinfo_mtu. */
    private Integer sctpMtu;
    /** The number of unacknowledged DATA chunks, corresponding to sstat_unackdata. */
    private Integer sctpUnackData;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.serviceId)) {
        this.serviceId = data().deepCopy(fields()[0].schema(), other.serviceId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.serviceName)) {
        this.serviceName = data().deepCopy(fields()[1].schema(), other.serviceName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.mediaUnitId)) {
        this.mediaUnitId = data().deepCopy(fields()[2].schema(), other.mediaUnitId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.marker)) {
        this.marker = data().deepCopy(fields()[3].schema(), other.marker);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[4].schema(), other.timestamp);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.callId)) {
        this.callId = data().deepCopy(fields()[5].schema(), other.callId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.roomId)) {
        this.roomId = data().deepCopy(fields()[6].schema(), other.roomId);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.clientId)) {
        this.clientId = data().deepCopy(fields()[7].schema(), other.clientId);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.userId)) {
        this.userId = data().deepCopy(fields()[8].schema(), other.userId);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.peerConnectionId)) {
        this.peerConnectionId = data().deepCopy(fields()[9].schema(), other.peerConnectionId);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.label)) {
        this.label = data().deepCopy(fields()[10].schema(), other.label);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.packetsSent)) {
        this.packetsSent = data().deepCopy(fields()[11].schema(), other.packetsSent);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.packetsReceived)) {
        this.packetsReceived = data().deepCopy(fields()[12].schema(), other.packetsReceived);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.bytesSent)) {
        this.bytesSent = data().deepCopy(fields()[13].schema(), other.bytesSent);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.bytesReceived)) {
        this.bytesReceived = data().deepCopy(fields()[14].schema(), other.bytesReceived);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.iceRole)) {
        this.iceRole = data().deepCopy(fields()[15].schema(), other.iceRole);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.iceLocalUsernameFragment)) {
        this.iceLocalUsernameFragment = data().deepCopy(fields()[16].schema(), other.iceLocalUsernameFragment);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.dtlsState)) {
        this.dtlsState = data().deepCopy(fields()[17].schema(), other.dtlsState);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.iceTransportState)) {
        this.iceTransportState = data().deepCopy(fields()[18].schema(), other.iceTransportState);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.tlsVersion)) {
        this.tlsVersion = data().deepCopy(fields()[19].schema(), other.tlsVersion);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.dtlsCipher)) {
        this.dtlsCipher = data().deepCopy(fields()[20].schema(), other.dtlsCipher);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.srtpCipher)) {
        this.srtpCipher = data().deepCopy(fields()[21].schema(), other.srtpCipher);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.tlsGroup)) {
        this.tlsGroup = data().deepCopy(fields()[22].schema(), other.tlsGroup);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.selectedCandidatePairChanges)) {
        this.selectedCandidatePairChanges = data().deepCopy(fields()[23].schema(), other.selectedCandidatePairChanges);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.localFingerprint)) {
        this.localFingerprint = data().deepCopy(fields()[24].schema(), other.localFingerprint);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.localFingerprintAlgorithm)) {
        this.localFingerprintAlgorithm = data().deepCopy(fields()[25].schema(), other.localFingerprintAlgorithm);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.localBase64Certificate)) {
        this.localBase64Certificate = data().deepCopy(fields()[26].schema(), other.localBase64Certificate);
        fieldSetFlags()[26] = true;
      }
      if (isValidValue(fields()[27], other.remoteFingerprint)) {
        this.remoteFingerprint = data().deepCopy(fields()[27].schema(), other.remoteFingerprint);
        fieldSetFlags()[27] = true;
      }
      if (isValidValue(fields()[28], other.remoteFingerprintAlgorithm)) {
        this.remoteFingerprintAlgorithm = data().deepCopy(fields()[28].schema(), other.remoteFingerprintAlgorithm);
        fieldSetFlags()[28] = true;
      }
      if (isValidValue(fields()[29], other.remoteBase64Certificate)) {
        this.remoteBase64Certificate = data().deepCopy(fields()[29].schema(), other.remoteBase64Certificate);
        fieldSetFlags()[29] = true;
      }
      if (isValidValue(fields()[30], other.localAddress)) {
        this.localAddress = data().deepCopy(fields()[30].schema(), other.localAddress);
        fieldSetFlags()[30] = true;
      }
      if (isValidValue(fields()[31], other.localPort)) {
        this.localPort = data().deepCopy(fields()[31].schema(), other.localPort);
        fieldSetFlags()[31] = true;
      }
      if (isValidValue(fields()[32], other.localProtocol)) {
        this.localProtocol = data().deepCopy(fields()[32].schema(), other.localProtocol);
        fieldSetFlags()[32] = true;
      }
      if (isValidValue(fields()[33], other.localCandidateType)) {
        this.localCandidateType = data().deepCopy(fields()[33].schema(), other.localCandidateType);
        fieldSetFlags()[33] = true;
      }
      if (isValidValue(fields()[34], other.localCandidatePriority)) {
        this.localCandidatePriority = data().deepCopy(fields()[34].schema(), other.localCandidatePriority);
        fieldSetFlags()[34] = true;
      }
      if (isValidValue(fields()[35], other.localCandidateICEServerUrl)) {
        this.localCandidateICEServerUrl = data().deepCopy(fields()[35].schema(), other.localCandidateICEServerUrl);
        fieldSetFlags()[35] = true;
      }
      if (isValidValue(fields()[36], other.localCandidateRelayProtocol)) {
        this.localCandidateRelayProtocol = data().deepCopy(fields()[36].schema(), other.localCandidateRelayProtocol);
        fieldSetFlags()[36] = true;
      }
      if (isValidValue(fields()[37], other.remoteAddress)) {
        this.remoteAddress = data().deepCopy(fields()[37].schema(), other.remoteAddress);
        fieldSetFlags()[37] = true;
      }
      if (isValidValue(fields()[38], other.remotePort)) {
        this.remotePort = data().deepCopy(fields()[38].schema(), other.remotePort);
        fieldSetFlags()[38] = true;
      }
      if (isValidValue(fields()[39], other.remoteProtocol)) {
        this.remoteProtocol = data().deepCopy(fields()[39].schema(), other.remoteProtocol);
        fieldSetFlags()[39] = true;
      }
      if (isValidValue(fields()[40], other.remoteCandidateType)) {
        this.remoteCandidateType = data().deepCopy(fields()[40].schema(), other.remoteCandidateType);
        fieldSetFlags()[40] = true;
      }
      if (isValidValue(fields()[41], other.remoteCandidatePriority)) {
        this.remoteCandidatePriority = data().deepCopy(fields()[41].schema(), other.remoteCandidatePriority);
        fieldSetFlags()[41] = true;
      }
      if (isValidValue(fields()[42], other.remoteCandidateICEServerUrl)) {
        this.remoteCandidateICEServerUrl = data().deepCopy(fields()[42].schema(), other.remoteCandidateICEServerUrl);
        fieldSetFlags()[42] = true;
      }
      if (isValidValue(fields()[43], other.remoteCandidateRelayProtocol)) {
        this.remoteCandidateRelayProtocol = data().deepCopy(fields()[43].schema(), other.remoteCandidateRelayProtocol);
        fieldSetFlags()[43] = true;
      }
      if (isValidValue(fields()[44], other.iceCandidatePairState)) {
        this.iceCandidatePairState = data().deepCopy(fields()[44].schema(), other.iceCandidatePairState);
        fieldSetFlags()[44] = true;
      }
      if (isValidValue(fields()[45], other.iceCandidatePairPacketsSent)) {
        this.iceCandidatePairPacketsSent = data().deepCopy(fields()[45].schema(), other.iceCandidatePairPacketsSent);
        fieldSetFlags()[45] = true;
      }
      if (isValidValue(fields()[46], other.iceCandidatePairPacketsReceived)) {
        this.iceCandidatePairPacketsReceived = data().deepCopy(fields()[46].schema(), other.iceCandidatePairPacketsReceived);
        fieldSetFlags()[46] = true;
      }
      if (isValidValue(fields()[47], other.iceCandidatePairBytesSent)) {
        this.iceCandidatePairBytesSent = data().deepCopy(fields()[47].schema(), other.iceCandidatePairBytesSent);
        fieldSetFlags()[47] = true;
      }
      if (isValidValue(fields()[48], other.iceCandidatePairBytesReceived)) {
        this.iceCandidatePairBytesReceived = data().deepCopy(fields()[48].schema(), other.iceCandidatePairBytesReceived);
        fieldSetFlags()[48] = true;
      }
      if (isValidValue(fields()[49], other.iceCandidatePairLastPacketSentTimestamp)) {
        this.iceCandidatePairLastPacketSentTimestamp = data().deepCopy(fields()[49].schema(), other.iceCandidatePairLastPacketSentTimestamp);
        fieldSetFlags()[49] = true;
      }
      if (isValidValue(fields()[50], other.iceCandidatePairLastPacketReceivedTimestamp)) {
        this.iceCandidatePairLastPacketReceivedTimestamp = data().deepCopy(fields()[50].schema(), other.iceCandidatePairLastPacketReceivedTimestamp);
        fieldSetFlags()[50] = true;
      }
      if (isValidValue(fields()[51], other.iceCandidatePairFirstRequestTimestamp)) {
        this.iceCandidatePairFirstRequestTimestamp = data().deepCopy(fields()[51].schema(), other.iceCandidatePairFirstRequestTimestamp);
        fieldSetFlags()[51] = true;
      }
      if (isValidValue(fields()[52], other.iceCandidatePairLastRequestTimestamp)) {
        this.iceCandidatePairLastRequestTimestamp = data().deepCopy(fields()[52].schema(), other.iceCandidatePairLastRequestTimestamp);
        fieldSetFlags()[52] = true;
      }
      if (isValidValue(fields()[53], other.iceCandidatePairLastResponseTimestamp)) {
        this.iceCandidatePairLastResponseTimestamp = data().deepCopy(fields()[53].schema(), other.iceCandidatePairLastResponseTimestamp);
        fieldSetFlags()[53] = true;
      }
      if (isValidValue(fields()[54], other.stunProvidedTotalRoundTripTime)) {
        this.stunProvidedTotalRoundTripTime = data().deepCopy(fields()[54].schema(), other.stunProvidedTotalRoundTripTime);
        fieldSetFlags()[54] = true;
      }
      if (isValidValue(fields()[55], other.stunProvidedCurrentRoundTripTime)) {
        this.stunProvidedCurrentRoundTripTime = data().deepCopy(fields()[55].schema(), other.stunProvidedCurrentRoundTripTime);
        fieldSetFlags()[55] = true;
      }
      if (isValidValue(fields()[56], other.availableOutgoingBitrate)) {
        this.availableOutgoingBitrate = data().deepCopy(fields()[56].schema(), other.availableOutgoingBitrate);
        fieldSetFlags()[56] = true;
      }
      if (isValidValue(fields()[57], other.availableIncomingBitrate)) {
        this.availableIncomingBitrate = data().deepCopy(fields()[57].schema(), other.availableIncomingBitrate);
        fieldSetFlags()[57] = true;
      }
      if (isValidValue(fields()[58], other.circuitBreakerTriggerCount)) {
        this.circuitBreakerTriggerCount = data().deepCopy(fields()[58].schema(), other.circuitBreakerTriggerCount);
        fieldSetFlags()[58] = true;
      }
      if (isValidValue(fields()[59], other.candidatePairRequestsReceived)) {
        this.candidatePairRequestsReceived = data().deepCopy(fields()[59].schema(), other.candidatePairRequestsReceived);
        fieldSetFlags()[59] = true;
      }
      if (isValidValue(fields()[60], other.candidatePairRequestsSent)) {
        this.candidatePairRequestsSent = data().deepCopy(fields()[60].schema(), other.candidatePairRequestsSent);
        fieldSetFlags()[60] = true;
      }
      if (isValidValue(fields()[61], other.candidatePairResponsesReceived)) {
        this.candidatePairResponsesReceived = data().deepCopy(fields()[61].schema(), other.candidatePairResponsesReceived);
        fieldSetFlags()[61] = true;
      }
      if (isValidValue(fields()[62], other.candidatePairResponsesSent)) {
        this.candidatePairResponsesSent = data().deepCopy(fields()[62].schema(), other.candidatePairResponsesSent);
        fieldSetFlags()[62] = true;
      }
      if (isValidValue(fields()[63], other.candidatePairRetransmissionReceived)) {
        this.candidatePairRetransmissionReceived = data().deepCopy(fields()[63].schema(), other.candidatePairRetransmissionReceived);
        fieldSetFlags()[63] = true;
      }
      if (isValidValue(fields()[64], other.candidatePairRetransmissionSent)) {
        this.candidatePairRetransmissionSent = data().deepCopy(fields()[64].schema(), other.candidatePairRetransmissionSent);
        fieldSetFlags()[64] = true;
      }
      if (isValidValue(fields()[65], other.candidatePairConsentRequestsSent)) {
        this.candidatePairConsentRequestsSent = data().deepCopy(fields()[65].schema(), other.candidatePairConsentRequestsSent);
        fieldSetFlags()[65] = true;
      }
      if (isValidValue(fields()[66], other.candidatePairConsentExpiredTimestamp)) {
        this.candidatePairConsentExpiredTimestamp = data().deepCopy(fields()[66].schema(), other.candidatePairConsentExpiredTimestamp);
        fieldSetFlags()[66] = true;
      }
      if (isValidValue(fields()[67], other.candidatePairBytesDiscardedOnSend)) {
        this.candidatePairBytesDiscardedOnSend = data().deepCopy(fields()[67].schema(), other.candidatePairBytesDiscardedOnSend);
        fieldSetFlags()[67] = true;
      }
      if (isValidValue(fields()[68], other.candidatePairRequestBytesSent)) {
        this.candidatePairRequestBytesSent = data().deepCopy(fields()[68].schema(), other.candidatePairRequestBytesSent);
        fieldSetFlags()[68] = true;
      }
      if (isValidValue(fields()[69], other.candidatePairConsentRequestBytesSent)) {
        this.candidatePairConsentRequestBytesSent = data().deepCopy(fields()[69].schema(), other.candidatePairConsentRequestBytesSent);
        fieldSetFlags()[69] = true;
      }
      if (isValidValue(fields()[70], other.candidatePairResponseBytesSent)) {
        this.candidatePairResponseBytesSent = data().deepCopy(fields()[70].schema(), other.candidatePairResponseBytesSent);
        fieldSetFlags()[70] = true;
      }
      if (isValidValue(fields()[71], other.sctpSmoothedRoundTripTime)) {
        this.sctpSmoothedRoundTripTime = data().deepCopy(fields()[71].schema(), other.sctpSmoothedRoundTripTime);
        fieldSetFlags()[71] = true;
      }
      if (isValidValue(fields()[72], other.sctpCongestionWindow)) {
        this.sctpCongestionWindow = data().deepCopy(fields()[72].schema(), other.sctpCongestionWindow);
        fieldSetFlags()[72] = true;
      }
      if (isValidValue(fields()[73], other.sctpReceiverWindow)) {
        this.sctpReceiverWindow = data().deepCopy(fields()[73].schema(), other.sctpReceiverWindow);
        fieldSetFlags()[73] = true;
      }
      if (isValidValue(fields()[74], other.sctpMtu)) {
        this.sctpMtu = data().deepCopy(fields()[74].schema(), other.sctpMtu);
        fieldSetFlags()[74] = true;
      }
      if (isValidValue(fields()[75], other.sctpUnackData)) {
        this.sctpUnackData = data().deepCopy(fields()[75].schema(), other.sctpUnackData);
        fieldSetFlags()[75] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing PcTransportReport instance
     * @param other The existing instance to copy.
     */
    private Builder(PcTransportReport other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.serviceId)) {
        this.serviceId = data().deepCopy(fields()[0].schema(), other.serviceId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.serviceName)) {
        this.serviceName = data().deepCopy(fields()[1].schema(), other.serviceName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.mediaUnitId)) {
        this.mediaUnitId = data().deepCopy(fields()[2].schema(), other.mediaUnitId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.marker)) {
        this.marker = data().deepCopy(fields()[3].schema(), other.marker);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[4].schema(), other.timestamp);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.callId)) {
        this.callId = data().deepCopy(fields()[5].schema(), other.callId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.roomId)) {
        this.roomId = data().deepCopy(fields()[6].schema(), other.roomId);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.clientId)) {
        this.clientId = data().deepCopy(fields()[7].schema(), other.clientId);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.userId)) {
        this.userId = data().deepCopy(fields()[8].schema(), other.userId);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.peerConnectionId)) {
        this.peerConnectionId = data().deepCopy(fields()[9].schema(), other.peerConnectionId);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.label)) {
        this.label = data().deepCopy(fields()[10].schema(), other.label);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.packetsSent)) {
        this.packetsSent = data().deepCopy(fields()[11].schema(), other.packetsSent);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.packetsReceived)) {
        this.packetsReceived = data().deepCopy(fields()[12].schema(), other.packetsReceived);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.bytesSent)) {
        this.bytesSent = data().deepCopy(fields()[13].schema(), other.bytesSent);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.bytesReceived)) {
        this.bytesReceived = data().deepCopy(fields()[14].schema(), other.bytesReceived);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.iceRole)) {
        this.iceRole = data().deepCopy(fields()[15].schema(), other.iceRole);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.iceLocalUsernameFragment)) {
        this.iceLocalUsernameFragment = data().deepCopy(fields()[16].schema(), other.iceLocalUsernameFragment);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.dtlsState)) {
        this.dtlsState = data().deepCopy(fields()[17].schema(), other.dtlsState);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.iceTransportState)) {
        this.iceTransportState = data().deepCopy(fields()[18].schema(), other.iceTransportState);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.tlsVersion)) {
        this.tlsVersion = data().deepCopy(fields()[19].schema(), other.tlsVersion);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.dtlsCipher)) {
        this.dtlsCipher = data().deepCopy(fields()[20].schema(), other.dtlsCipher);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.srtpCipher)) {
        this.srtpCipher = data().deepCopy(fields()[21].schema(), other.srtpCipher);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.tlsGroup)) {
        this.tlsGroup = data().deepCopy(fields()[22].schema(), other.tlsGroup);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.selectedCandidatePairChanges)) {
        this.selectedCandidatePairChanges = data().deepCopy(fields()[23].schema(), other.selectedCandidatePairChanges);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.localFingerprint)) {
        this.localFingerprint = data().deepCopy(fields()[24].schema(), other.localFingerprint);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.localFingerprintAlgorithm)) {
        this.localFingerprintAlgorithm = data().deepCopy(fields()[25].schema(), other.localFingerprintAlgorithm);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.localBase64Certificate)) {
        this.localBase64Certificate = data().deepCopy(fields()[26].schema(), other.localBase64Certificate);
        fieldSetFlags()[26] = true;
      }
      if (isValidValue(fields()[27], other.remoteFingerprint)) {
        this.remoteFingerprint = data().deepCopy(fields()[27].schema(), other.remoteFingerprint);
        fieldSetFlags()[27] = true;
      }
      if (isValidValue(fields()[28], other.remoteFingerprintAlgorithm)) {
        this.remoteFingerprintAlgorithm = data().deepCopy(fields()[28].schema(), other.remoteFingerprintAlgorithm);
        fieldSetFlags()[28] = true;
      }
      if (isValidValue(fields()[29], other.remoteBase64Certificate)) {
        this.remoteBase64Certificate = data().deepCopy(fields()[29].schema(), other.remoteBase64Certificate);
        fieldSetFlags()[29] = true;
      }
      if (isValidValue(fields()[30], other.localAddress)) {
        this.localAddress = data().deepCopy(fields()[30].schema(), other.localAddress);
        fieldSetFlags()[30] = true;
      }
      if (isValidValue(fields()[31], other.localPort)) {
        this.localPort = data().deepCopy(fields()[31].schema(), other.localPort);
        fieldSetFlags()[31] = true;
      }
      if (isValidValue(fields()[32], other.localProtocol)) {
        this.localProtocol = data().deepCopy(fields()[32].schema(), other.localProtocol);
        fieldSetFlags()[32] = true;
      }
      if (isValidValue(fields()[33], other.localCandidateType)) {
        this.localCandidateType = data().deepCopy(fields()[33].schema(), other.localCandidateType);
        fieldSetFlags()[33] = true;
      }
      if (isValidValue(fields()[34], other.localCandidatePriority)) {
        this.localCandidatePriority = data().deepCopy(fields()[34].schema(), other.localCandidatePriority);
        fieldSetFlags()[34] = true;
      }
      if (isValidValue(fields()[35], other.localCandidateICEServerUrl)) {
        this.localCandidateICEServerUrl = data().deepCopy(fields()[35].schema(), other.localCandidateICEServerUrl);
        fieldSetFlags()[35] = true;
      }
      if (isValidValue(fields()[36], other.localCandidateRelayProtocol)) {
        this.localCandidateRelayProtocol = data().deepCopy(fields()[36].schema(), other.localCandidateRelayProtocol);
        fieldSetFlags()[36] = true;
      }
      if (isValidValue(fields()[37], other.remoteAddress)) {
        this.remoteAddress = data().deepCopy(fields()[37].schema(), other.remoteAddress);
        fieldSetFlags()[37] = true;
      }
      if (isValidValue(fields()[38], other.remotePort)) {
        this.remotePort = data().deepCopy(fields()[38].schema(), other.remotePort);
        fieldSetFlags()[38] = true;
      }
      if (isValidValue(fields()[39], other.remoteProtocol)) {
        this.remoteProtocol = data().deepCopy(fields()[39].schema(), other.remoteProtocol);
        fieldSetFlags()[39] = true;
      }
      if (isValidValue(fields()[40], other.remoteCandidateType)) {
        this.remoteCandidateType = data().deepCopy(fields()[40].schema(), other.remoteCandidateType);
        fieldSetFlags()[40] = true;
      }
      if (isValidValue(fields()[41], other.remoteCandidatePriority)) {
        this.remoteCandidatePriority = data().deepCopy(fields()[41].schema(), other.remoteCandidatePriority);
        fieldSetFlags()[41] = true;
      }
      if (isValidValue(fields()[42], other.remoteCandidateICEServerUrl)) {
        this.remoteCandidateICEServerUrl = data().deepCopy(fields()[42].schema(), other.remoteCandidateICEServerUrl);
        fieldSetFlags()[42] = true;
      }
      if (isValidValue(fields()[43], other.remoteCandidateRelayProtocol)) {
        this.remoteCandidateRelayProtocol = data().deepCopy(fields()[43].schema(), other.remoteCandidateRelayProtocol);
        fieldSetFlags()[43] = true;
      }
      if (isValidValue(fields()[44], other.iceCandidatePairState)) {
        this.iceCandidatePairState = data().deepCopy(fields()[44].schema(), other.iceCandidatePairState);
        fieldSetFlags()[44] = true;
      }
      if (isValidValue(fields()[45], other.iceCandidatePairPacketsSent)) {
        this.iceCandidatePairPacketsSent = data().deepCopy(fields()[45].schema(), other.iceCandidatePairPacketsSent);
        fieldSetFlags()[45] = true;
      }
      if (isValidValue(fields()[46], other.iceCandidatePairPacketsReceived)) {
        this.iceCandidatePairPacketsReceived = data().deepCopy(fields()[46].schema(), other.iceCandidatePairPacketsReceived);
        fieldSetFlags()[46] = true;
      }
      if (isValidValue(fields()[47], other.iceCandidatePairBytesSent)) {
        this.iceCandidatePairBytesSent = data().deepCopy(fields()[47].schema(), other.iceCandidatePairBytesSent);
        fieldSetFlags()[47] = true;
      }
      if (isValidValue(fields()[48], other.iceCandidatePairBytesReceived)) {
        this.iceCandidatePairBytesReceived = data().deepCopy(fields()[48].schema(), other.iceCandidatePairBytesReceived);
        fieldSetFlags()[48] = true;
      }
      if (isValidValue(fields()[49], other.iceCandidatePairLastPacketSentTimestamp)) {
        this.iceCandidatePairLastPacketSentTimestamp = data().deepCopy(fields()[49].schema(), other.iceCandidatePairLastPacketSentTimestamp);
        fieldSetFlags()[49] = true;
      }
      if (isValidValue(fields()[50], other.iceCandidatePairLastPacketReceivedTimestamp)) {
        this.iceCandidatePairLastPacketReceivedTimestamp = data().deepCopy(fields()[50].schema(), other.iceCandidatePairLastPacketReceivedTimestamp);
        fieldSetFlags()[50] = true;
      }
      if (isValidValue(fields()[51], other.iceCandidatePairFirstRequestTimestamp)) {
        this.iceCandidatePairFirstRequestTimestamp = data().deepCopy(fields()[51].schema(), other.iceCandidatePairFirstRequestTimestamp);
        fieldSetFlags()[51] = true;
      }
      if (isValidValue(fields()[52], other.iceCandidatePairLastRequestTimestamp)) {
        this.iceCandidatePairLastRequestTimestamp = data().deepCopy(fields()[52].schema(), other.iceCandidatePairLastRequestTimestamp);
        fieldSetFlags()[52] = true;
      }
      if (isValidValue(fields()[53], other.iceCandidatePairLastResponseTimestamp)) {
        this.iceCandidatePairLastResponseTimestamp = data().deepCopy(fields()[53].schema(), other.iceCandidatePairLastResponseTimestamp);
        fieldSetFlags()[53] = true;
      }
      if (isValidValue(fields()[54], other.stunProvidedTotalRoundTripTime)) {
        this.stunProvidedTotalRoundTripTime = data().deepCopy(fields()[54].schema(), other.stunProvidedTotalRoundTripTime);
        fieldSetFlags()[54] = true;
      }
      if (isValidValue(fields()[55], other.stunProvidedCurrentRoundTripTime)) {
        this.stunProvidedCurrentRoundTripTime = data().deepCopy(fields()[55].schema(), other.stunProvidedCurrentRoundTripTime);
        fieldSetFlags()[55] = true;
      }
      if (isValidValue(fields()[56], other.availableOutgoingBitrate)) {
        this.availableOutgoingBitrate = data().deepCopy(fields()[56].schema(), other.availableOutgoingBitrate);
        fieldSetFlags()[56] = true;
      }
      if (isValidValue(fields()[57], other.availableIncomingBitrate)) {
        this.availableIncomingBitrate = data().deepCopy(fields()[57].schema(), other.availableIncomingBitrate);
        fieldSetFlags()[57] = true;
      }
      if (isValidValue(fields()[58], other.circuitBreakerTriggerCount)) {
        this.circuitBreakerTriggerCount = data().deepCopy(fields()[58].schema(), other.circuitBreakerTriggerCount);
        fieldSetFlags()[58] = true;
      }
      if (isValidValue(fields()[59], other.candidatePairRequestsReceived)) {
        this.candidatePairRequestsReceived = data().deepCopy(fields()[59].schema(), other.candidatePairRequestsReceived);
        fieldSetFlags()[59] = true;
      }
      if (isValidValue(fields()[60], other.candidatePairRequestsSent)) {
        this.candidatePairRequestsSent = data().deepCopy(fields()[60].schema(), other.candidatePairRequestsSent);
        fieldSetFlags()[60] = true;
      }
      if (isValidValue(fields()[61], other.candidatePairResponsesReceived)) {
        this.candidatePairResponsesReceived = data().deepCopy(fields()[61].schema(), other.candidatePairResponsesReceived);
        fieldSetFlags()[61] = true;
      }
      if (isValidValue(fields()[62], other.candidatePairResponsesSent)) {
        this.candidatePairResponsesSent = data().deepCopy(fields()[62].schema(), other.candidatePairResponsesSent);
        fieldSetFlags()[62] = true;
      }
      if (isValidValue(fields()[63], other.candidatePairRetransmissionReceived)) {
        this.candidatePairRetransmissionReceived = data().deepCopy(fields()[63].schema(), other.candidatePairRetransmissionReceived);
        fieldSetFlags()[63] = true;
      }
      if (isValidValue(fields()[64], other.candidatePairRetransmissionSent)) {
        this.candidatePairRetransmissionSent = data().deepCopy(fields()[64].schema(), other.candidatePairRetransmissionSent);
        fieldSetFlags()[64] = true;
      }
      if (isValidValue(fields()[65], other.candidatePairConsentRequestsSent)) {
        this.candidatePairConsentRequestsSent = data().deepCopy(fields()[65].schema(), other.candidatePairConsentRequestsSent);
        fieldSetFlags()[65] = true;
      }
      if (isValidValue(fields()[66], other.candidatePairConsentExpiredTimestamp)) {
        this.candidatePairConsentExpiredTimestamp = data().deepCopy(fields()[66].schema(), other.candidatePairConsentExpiredTimestamp);
        fieldSetFlags()[66] = true;
      }
      if (isValidValue(fields()[67], other.candidatePairBytesDiscardedOnSend)) {
        this.candidatePairBytesDiscardedOnSend = data().deepCopy(fields()[67].schema(), other.candidatePairBytesDiscardedOnSend);
        fieldSetFlags()[67] = true;
      }
      if (isValidValue(fields()[68], other.candidatePairRequestBytesSent)) {
        this.candidatePairRequestBytesSent = data().deepCopy(fields()[68].schema(), other.candidatePairRequestBytesSent);
        fieldSetFlags()[68] = true;
      }
      if (isValidValue(fields()[69], other.candidatePairConsentRequestBytesSent)) {
        this.candidatePairConsentRequestBytesSent = data().deepCopy(fields()[69].schema(), other.candidatePairConsentRequestBytesSent);
        fieldSetFlags()[69] = true;
      }
      if (isValidValue(fields()[70], other.candidatePairResponseBytesSent)) {
        this.candidatePairResponseBytesSent = data().deepCopy(fields()[70].schema(), other.candidatePairResponseBytesSent);
        fieldSetFlags()[70] = true;
      }
      if (isValidValue(fields()[71], other.sctpSmoothedRoundTripTime)) {
        this.sctpSmoothedRoundTripTime = data().deepCopy(fields()[71].schema(), other.sctpSmoothedRoundTripTime);
        fieldSetFlags()[71] = true;
      }
      if (isValidValue(fields()[72], other.sctpCongestionWindow)) {
        this.sctpCongestionWindow = data().deepCopy(fields()[72].schema(), other.sctpCongestionWindow);
        fieldSetFlags()[72] = true;
      }
      if (isValidValue(fields()[73], other.sctpReceiverWindow)) {
        this.sctpReceiverWindow = data().deepCopy(fields()[73].schema(), other.sctpReceiverWindow);
        fieldSetFlags()[73] = true;
      }
      if (isValidValue(fields()[74], other.sctpMtu)) {
        this.sctpMtu = data().deepCopy(fields()[74].schema(), other.sctpMtu);
        fieldSetFlags()[74] = true;
      }
      if (isValidValue(fields()[75], other.sctpUnackData)) {
        this.sctpUnackData = data().deepCopy(fields()[75].schema(), other.sctpUnackData);
        fieldSetFlags()[75] = true;
      }
    }

    /**
      * Gets the value of the 'serviceId' field.
      * The unique identifier of the service
      * @return The value.
      */
    public String getServiceId() {
      return serviceId;
    }

    /**
      * Sets the value of the 'serviceId' field.
      * The unique identifier of the service
      * @param value The value of 'serviceId'.
      * @return This builder.
      */
    public Builder setServiceId(String value) {
      validate(fields()[0], value);
      this.serviceId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'serviceId' field has been set.
      * The unique identifier of the service
      * @return True if the 'serviceId' field has been set, false otherwise.
      */
    public boolean hasServiceId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'serviceId' field.
      * The unique identifier of the service
      * @return This builder.
      */
    public Builder clearServiceId() {
      serviceId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'serviceName' field.
      * The resolved service name configured for the service Id
      * @return The value.
      */
    public String getServiceName() {
      return serviceName;
    }

    /**
      * Sets the value of the 'serviceName' field.
      * The resolved service name configured for the service Id
      * @param value The value of 'serviceName'.
      * @return This builder.
      */
    public Builder setServiceName(String value) {
      validate(fields()[1], value);
      this.serviceName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'serviceName' field has been set.
      * The resolved service name configured for the service Id
      * @return True if the 'serviceName' field has been set, false otherwise.
      */
    public boolean hasServiceName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'serviceName' field.
      * The resolved service name configured for the service Id
      * @return This builder.
      */
    public Builder clearServiceName() {
      serviceName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'mediaUnitId' field.
      * The media unit id the report belongs to
      * @return The value.
      */
    public String getMediaUnitId() {
      return mediaUnitId;
    }

    /**
      * Sets the value of the 'mediaUnitId' field.
      * The media unit id the report belongs to
      * @param value The value of 'mediaUnitId'.
      * @return This builder.
      */
    public Builder setMediaUnitId(String value) {
      validate(fields()[2], value);
      this.mediaUnitId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'mediaUnitId' field has been set.
      * The media unit id the report belongs to
      * @return True if the 'mediaUnitId' field has been set, false otherwise.
      */
    public boolean hasMediaUnitId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'mediaUnitId' field.
      * The media unit id the report belongs to
      * @return This builder.
      */
    public Builder clearMediaUnitId() {
      mediaUnitId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'marker' field.
      * The marker the originated sample is reported with
      * @return The value.
      */
    public String getMarker() {
      return marker;
    }

    /**
      * Sets the value of the 'marker' field.
      * The marker the originated sample is reported with
      * @param value The value of 'marker'.
      * @return This builder.
      */
    public Builder setMarker(String value) {
      validate(fields()[3], value);
      this.marker = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'marker' field has been set.
      * The marker the originated sample is reported with
      * @return True if the 'marker' field has been set, false otherwise.
      */
    public boolean hasMarker() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'marker' field.
      * The marker the originated sample is reported with
      * @return This builder.
      */
    public Builder clearMarker() {
      marker = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @return The value.
      */
    public Long getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public Builder setTimestamp(long value) {
      validate(fields()[4], value);
      this.timestamp = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @return This builder.
      */
    public Builder clearTimestamp() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'callId' field.
      * The generated unique identifier of the call
      * @return The value.
      */
    public String getCallId() {
      return callId;
    }

    /**
      * Sets the value of the 'callId' field.
      * The generated unique identifier of the call
      * @param value The value of 'callId'.
      * @return This builder.
      */
    public Builder setCallId(String value) {
      validate(fields()[5], value);
      this.callId = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'callId' field has been set.
      * The generated unique identifier of the call
      * @return True if the 'callId' field has been set, false otherwise.
      */
    public boolean hasCallId() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'callId' field.
      * The generated unique identifier of the call
      * @return This builder.
      */
    public Builder clearCallId() {
      callId = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'roomId' field.
      * webrtc app provided room id
      * @return The value.
      */
    public String getRoomId() {
      return roomId;
    }

    /**
      * Sets the value of the 'roomId' field.
      * webrtc app provided room id
      * @param value The value of 'roomId'.
      * @return This builder.
      */
    public Builder setRoomId(String value) {
      validate(fields()[6], value);
      this.roomId = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'roomId' field has been set.
      * webrtc app provided room id
      * @return True if the 'roomId' field has been set, false otherwise.
      */
    public boolean hasRoomId() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'roomId' field.
      * webrtc app provided room id
      * @return This builder.
      */
    public Builder clearRoomId() {
      roomId = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'clientId' field.
      * The generated unique identifier of the client
      * @return The value.
      */
    public String getClientId() {
      return clientId;
    }

    /**
      * Sets the value of the 'clientId' field.
      * The generated unique identifier of the client
      * @param value The value of 'clientId'.
      * @return This builder.
      */
    public Builder setClientId(String value) {
      validate(fields()[7], value);
      this.clientId = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'clientId' field has been set.
      * The generated unique identifier of the client
      * @return True if the 'clientId' field has been set, false otherwise.
      */
    public boolean hasClientId() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'clientId' field.
      * The generated unique identifier of the client
      * @return This builder.
      */
    public Builder clearClientId() {
      clientId = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'userId' field.
      * webrtc app provided user identifier
      * @return The value.
      */
    public String getUserId() {
      return userId;
    }

    /**
      * Sets the value of the 'userId' field.
      * webrtc app provided user identifier
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public Builder setUserId(String value) {
      validate(fields()[8], value);
      this.userId = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * webrtc app provided user identifier
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'userId' field.
      * webrtc app provided user identifier
      * @return This builder.
      */
    public Builder clearUserId() {
      userId = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'peerConnectionId' field.
      * The unique identifier of the peer connection
      * @return The value.
      */
    public String getPeerConnectionId() {
      return peerConnectionId;
    }

    /**
      * Sets the value of the 'peerConnectionId' field.
      * The unique identifier of the peer connection
      * @param value The value of 'peerConnectionId'.
      * @return This builder.
      */
    public Builder setPeerConnectionId(String value) {
      validate(fields()[9], value);
      this.peerConnectionId = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'peerConnectionId' field has been set.
      * The unique identifier of the peer connection
      * @return True if the 'peerConnectionId' field has been set, false otherwise.
      */
    public boolean hasPeerConnectionId() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'peerConnectionId' field.
      * The unique identifier of the peer connection
      * @return This builder.
      */
    public Builder clearPeerConnectionId() {
      peerConnectionId = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'label' field.
      * The webrtc app provided label the peer connection is marked with
      * @return The value.
      */
    public String getLabel() {
      return label;
    }

    /**
      * Sets the value of the 'label' field.
      * The webrtc app provided label the peer connection is marked with
      * @param value The value of 'label'.
      * @return This builder.
      */
    public Builder setLabel(String value) {
      validate(fields()[10], value);
      this.label = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'label' field has been set.
      * The webrtc app provided label the peer connection is marked with
      * @return True if the 'label' field has been set, false otherwise.
      */
    public boolean hasLabel() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'label' field.
      * The webrtc app provided label the peer connection is marked with
      * @return This builder.
      */
    public Builder clearLabel() {
      label = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'packetsSent' field.
      * Represents the total number of packets sent on the corresponded transport
      * @return The value.
      */
    public Integer getPacketsSent() {
      return packetsSent;
    }

    /**
      * Sets the value of the 'packetsSent' field.
      * Represents the total number of packets sent on the corresponded transport
      * @param value The value of 'packetsSent'.
      * @return This builder.
      */
    public Builder setPacketsSent(Integer value) {
      validate(fields()[11], value);
      this.packetsSent = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'packetsSent' field has been set.
      * Represents the total number of packets sent on the corresponded transport
      * @return True if the 'packetsSent' field has been set, false otherwise.
      */
    public boolean hasPacketsSent() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'packetsSent' field.
      * Represents the total number of packets sent on the corresponded transport
      * @return This builder.
      */
    public Builder clearPacketsSent() {
      packetsSent = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'packetsReceived' field.
      * Represents the total number of packets received on the corresponded transport
      * @return The value.
      */
    public Integer getPacketsReceived() {
      return packetsReceived;
    }

    /**
      * Sets the value of the 'packetsReceived' field.
      * Represents the total number of packets received on the corresponded transport
      * @param value The value of 'packetsReceived'.
      * @return This builder.
      */
    public Builder setPacketsReceived(Integer value) {
      validate(fields()[12], value);
      this.packetsReceived = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'packetsReceived' field has been set.
      * Represents the total number of packets received on the corresponded transport
      * @return True if the 'packetsReceived' field has been set, false otherwise.
      */
    public boolean hasPacketsReceived() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'packetsReceived' field.
      * Represents the total number of packets received on the corresponded transport
      * @return This builder.
      */
    public Builder clearPacketsReceived() {
      packetsReceived = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'bytesSent' field.
      * Represents the total amount of bytes sent on the corresponded transport
      * @return The value.
      */
    public Integer getBytesSent() {
      return bytesSent;
    }

    /**
      * Sets the value of the 'bytesSent' field.
      * Represents the total amount of bytes sent on the corresponded transport
      * @param value The value of 'bytesSent'.
      * @return This builder.
      */
    public Builder setBytesSent(Integer value) {
      validate(fields()[13], value);
      this.bytesSent = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'bytesSent' field has been set.
      * Represents the total amount of bytes sent on the corresponded transport
      * @return True if the 'bytesSent' field has been set, false otherwise.
      */
    public boolean hasBytesSent() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'bytesSent' field.
      * Represents the total amount of bytes sent on the corresponded transport
      * @return This builder.
      */
    public Builder clearBytesSent() {
      bytesSent = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'bytesReceived' field.
      * Represents the total amount of bytes received on the corresponded transport
      * @return The value.
      */
    public Integer getBytesReceived() {
      return bytesReceived;
    }

    /**
      * Sets the value of the 'bytesReceived' field.
      * Represents the total amount of bytes received on the corresponded transport
      * @param value The value of 'bytesReceived'.
      * @return This builder.
      */
    public Builder setBytesReceived(Integer value) {
      validate(fields()[14], value);
      this.bytesReceived = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'bytesReceived' field has been set.
      * Represents the total amount of bytes received on the corresponded transport
      * @return True if the 'bytesReceived' field has been set, false otherwise.
      */
    public boolean hasBytesReceived() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'bytesReceived' field.
      * Represents the total amount of bytes received on the corresponded transport
      * @return This builder.
      */
    public Builder clearBytesReceived() {
      bytesReceived = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'iceRole' field.
      * Represent the current role of ICE under DTLS Transport
      * @return The value.
      */
    public String getIceRole() {
      return iceRole;
    }

    /**
      * Sets the value of the 'iceRole' field.
      * Represent the current role of ICE under DTLS Transport
      * @param value The value of 'iceRole'.
      * @return This builder.
      */
    public Builder setIceRole(String value) {
      validate(fields()[15], value);
      this.iceRole = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'iceRole' field has been set.
      * Represent the current role of ICE under DTLS Transport
      * @return True if the 'iceRole' field has been set, false otherwise.
      */
    public boolean hasIceRole() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'iceRole' field.
      * Represent the current role of ICE under DTLS Transport
      * @return This builder.
      */
    public Builder clearIceRole() {
      iceRole = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'iceLocalUsernameFragment' field.
      * Represent the current local username fragment used in message validation procedures for ICE under DTLS Transport
      * @return The value.
      */
    public String getIceLocalUsernameFragment() {
      return iceLocalUsernameFragment;
    }

    /**
      * Sets the value of the 'iceLocalUsernameFragment' field.
      * Represent the current local username fragment used in message validation procedures for ICE under DTLS Transport
      * @param value The value of 'iceLocalUsernameFragment'.
      * @return This builder.
      */
    public Builder setIceLocalUsernameFragment(String value) {
      validate(fields()[16], value);
      this.iceLocalUsernameFragment = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'iceLocalUsernameFragment' field has been set.
      * Represent the current local username fragment used in message validation procedures for ICE under DTLS Transport
      * @return True if the 'iceLocalUsernameFragment' field has been set, false otherwise.
      */
    public boolean hasIceLocalUsernameFragment() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'iceLocalUsernameFragment' field.
      * Represent the current local username fragment used in message validation procedures for ICE under DTLS Transport
      * @return This builder.
      */
    public Builder clearIceLocalUsernameFragment() {
      iceLocalUsernameFragment = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'dtlsState' field.
      * Represents the current state of DTLS for the peer connection transport layer
      * @return The value.
      */
    public String getDtlsState() {
      return dtlsState;
    }

    /**
      * Sets the value of the 'dtlsState' field.
      * Represents the current state of DTLS for the peer connection transport layer
      * @param value The value of 'dtlsState'.
      * @return This builder.
      */
    public Builder setDtlsState(String value) {
      validate(fields()[17], value);
      this.dtlsState = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'dtlsState' field has been set.
      * Represents the current state of DTLS for the peer connection transport layer
      * @return True if the 'dtlsState' field has been set, false otherwise.
      */
    public boolean hasDtlsState() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'dtlsState' field.
      * Represents the current state of DTLS for the peer connection transport layer
      * @return This builder.
      */
    public Builder clearDtlsState() {
      dtlsState = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'iceTransportState' field.
      * Represents the current transport state (RTCIceTransportState) of ICE for the peer connection transport layer
      * @return The value.
      */
    public String getIceTransportState() {
      return iceTransportState;
    }

    /**
      * Sets the value of the 'iceTransportState' field.
      * Represents the current transport state (RTCIceTransportState) of ICE for the peer connection transport layer
      * @param value The value of 'iceTransportState'.
      * @return This builder.
      */
    public Builder setIceTransportState(String value) {
      validate(fields()[18], value);
      this.iceTransportState = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'iceTransportState' field has been set.
      * Represents the current transport state (RTCIceTransportState) of ICE for the peer connection transport layer
      * @return True if the 'iceTransportState' field has been set, false otherwise.
      */
    public boolean hasIceTransportState() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'iceTransportState' field.
      * Represents the current transport state (RTCIceTransportState) of ICE for the peer connection transport layer
      * @return This builder.
      */
    public Builder clearIceTransportState() {
      iceTransportState = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'tlsVersion' field.
      * Represents the version number of the TLS used in the corresponded transport
      * @return The value.
      */
    public String getTlsVersion() {
      return tlsVersion;
    }

    /**
      * Sets the value of the 'tlsVersion' field.
      * Represents the version number of the TLS used in the corresponded transport
      * @param value The value of 'tlsVersion'.
      * @return This builder.
      */
    public Builder setTlsVersion(String value) {
      validate(fields()[19], value);
      this.tlsVersion = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'tlsVersion' field has been set.
      * Represents the version number of the TLS used in the corresponded transport
      * @return True if the 'tlsVersion' field has been set, false otherwise.
      */
    public boolean hasTlsVersion() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 'tlsVersion' field.
      * Represents the version number of the TLS used in the corresponded transport
      * @return This builder.
      */
    public Builder clearTlsVersion() {
      tlsVersion = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    /**
      * Gets the value of the 'dtlsCipher' field.
      * Represents the name of the DTLS cipher used in the corresponded transport
      * @return The value.
      */
    public String getDtlsCipher() {
      return dtlsCipher;
    }

    /**
      * Sets the value of the 'dtlsCipher' field.
      * Represents the name of the DTLS cipher used in the corresponded transport
      * @param value The value of 'dtlsCipher'.
      * @return This builder.
      */
    public Builder setDtlsCipher(String value) {
      validate(fields()[20], value);
      this.dtlsCipher = value;
      fieldSetFlags()[20] = true;
      return this;
    }

    /**
      * Checks whether the 'dtlsCipher' field has been set.
      * Represents the name of the DTLS cipher used in the corresponded transport
      * @return True if the 'dtlsCipher' field has been set, false otherwise.
      */
    public boolean hasDtlsCipher() {
      return fieldSetFlags()[20];
    }


    /**
      * Clears the value of the 'dtlsCipher' field.
      * Represents the name of the DTLS cipher used in the corresponded transport
      * @return This builder.
      */
    public Builder clearDtlsCipher() {
      dtlsCipher = null;
      fieldSetFlags()[20] = false;
      return this;
    }

    /**
      * Gets the value of the 'srtpCipher' field.
      * Represents the name of the SRTP cipher used in the corresponded transport
      * @return The value.
      */
    public String getSrtpCipher() {
      return srtpCipher;
    }

    /**
      * Sets the value of the 'srtpCipher' field.
      * Represents the name of the SRTP cipher used in the corresponded transport
      * @param value The value of 'srtpCipher'.
      * @return This builder.
      */
    public Builder setSrtpCipher(String value) {
      validate(fields()[21], value);
      this.srtpCipher = value;
      fieldSetFlags()[21] = true;
      return this;
    }

    /**
      * Checks whether the 'srtpCipher' field has been set.
      * Represents the name of the SRTP cipher used in the corresponded transport
      * @return True if the 'srtpCipher' field has been set, false otherwise.
      */
    public boolean hasSrtpCipher() {
      return fieldSetFlags()[21];
    }


    /**
      * Clears the value of the 'srtpCipher' field.
      * Represents the name of the SRTP cipher used in the corresponded transport
      * @return This builder.
      */
    public Builder clearSrtpCipher() {
      srtpCipher = null;
      fieldSetFlags()[21] = false;
      return this;
    }

    /**
      * Gets the value of the 'tlsGroup' field.
      * Represents the name of the IANA TLS Supported Groups used in the corresponded transport
      * @return The value.
      */
    public String getTlsGroup() {
      return tlsGroup;
    }

    /**
      * Sets the value of the 'tlsGroup' field.
      * Represents the name of the IANA TLS Supported Groups used in the corresponded transport
      * @param value The value of 'tlsGroup'.
      * @return This builder.
      */
    public Builder setTlsGroup(String value) {
      validate(fields()[22], value);
      this.tlsGroup = value;
      fieldSetFlags()[22] = true;
      return this;
    }

    /**
      * Checks whether the 'tlsGroup' field has been set.
      * Represents the name of the IANA TLS Supported Groups used in the corresponded transport
      * @return True if the 'tlsGroup' field has been set, false otherwise.
      */
    public boolean hasTlsGroup() {
      return fieldSetFlags()[22];
    }


    /**
      * Clears the value of the 'tlsGroup' field.
      * Represents the name of the IANA TLS Supported Groups used in the corresponded transport
      * @return This builder.
      */
    public Builder clearTlsGroup() {
      tlsGroup = null;
      fieldSetFlags()[22] = false;
      return this;
    }

    /**
      * Gets the value of the 'selectedCandidatePairChanges' field.
      * The total number of candidate pair changes over the peer connection
      * @return The value.
      */
    public Integer getSelectedCandidatePairChanges() {
      return selectedCandidatePairChanges;
    }

    /**
      * Sets the value of the 'selectedCandidatePairChanges' field.
      * The total number of candidate pair changes over the peer connection
      * @param value The value of 'selectedCandidatePairChanges'.
      * @return This builder.
      */
    public Builder setSelectedCandidatePairChanges(Integer value) {
      validate(fields()[23], value);
      this.selectedCandidatePairChanges = value;
      fieldSetFlags()[23] = true;
      return this;
    }

    /**
      * Checks whether the 'selectedCandidatePairChanges' field has been set.
      * The total number of candidate pair changes over the peer connection
      * @return True if the 'selectedCandidatePairChanges' field has been set, false otherwise.
      */
    public boolean hasSelectedCandidatePairChanges() {
      return fieldSetFlags()[23];
    }


    /**
      * Clears the value of the 'selectedCandidatePairChanges' field.
      * The total number of candidate pair changes over the peer connection
      * @return This builder.
      */
    public Builder clearSelectedCandidatePairChanges() {
      selectedCandidatePairChanges = null;
      fieldSetFlags()[23] = false;
      return this;
    }

    /**
      * Gets the value of the 'localFingerprint' field.
      * The fingerprint of the certificate certifies the local endpoint of the transport
      * @return The value.
      */
    public String getLocalFingerprint() {
      return localFingerprint;
    }

    /**
      * Sets the value of the 'localFingerprint' field.
      * The fingerprint of the certificate certifies the local endpoint of the transport
      * @param value The value of 'localFingerprint'.
      * @return This builder.
      */
    public Builder setLocalFingerprint(String value) {
      validate(fields()[24], value);
      this.localFingerprint = value;
      fieldSetFlags()[24] = true;
      return this;
    }

    /**
      * Checks whether the 'localFingerprint' field has been set.
      * The fingerprint of the certificate certifies the local endpoint of the transport
      * @return True if the 'localFingerprint' field has been set, false otherwise.
      */
    public boolean hasLocalFingerprint() {
      return fieldSetFlags()[24];
    }


    /**
      * Clears the value of the 'localFingerprint' field.
      * The fingerprint of the certificate certifies the local endpoint of the transport
      * @return This builder.
      */
    public Builder clearLocalFingerprint() {
      localFingerprint = null;
      fieldSetFlags()[24] = false;
      return this;
    }

    /**
      * Gets the value of the 'localFingerprintAlgorithm' field.
      * The algorithm generate the fingerprint of the certificate certifies the local endpoint of the transport
      * @return The value.
      */
    public String getLocalFingerprintAlgorithm() {
      return localFingerprintAlgorithm;
    }

    /**
      * Sets the value of the 'localFingerprintAlgorithm' field.
      * The algorithm generate the fingerprint of the certificate certifies the local endpoint of the transport
      * @param value The value of 'localFingerprintAlgorithm'.
      * @return This builder.
      */
    public Builder setLocalFingerprintAlgorithm(String value) {
      validate(fields()[25], value);
      this.localFingerprintAlgorithm = value;
      fieldSetFlags()[25] = true;
      return this;
    }

    /**
      * Checks whether the 'localFingerprintAlgorithm' field has been set.
      * The algorithm generate the fingerprint of the certificate certifies the local endpoint of the transport
      * @return True if the 'localFingerprintAlgorithm' field has been set, false otherwise.
      */
    public boolean hasLocalFingerprintAlgorithm() {
      return fieldSetFlags()[25];
    }


    /**
      * Clears the value of the 'localFingerprintAlgorithm' field.
      * The algorithm generate the fingerprint of the certificate certifies the local endpoint of the transport
      * @return This builder.
      */
    public Builder clearLocalFingerprintAlgorithm() {
      localFingerprintAlgorithm = null;
      fieldSetFlags()[25] = false;
      return this;
    }

    /**
      * Gets the value of the 'localBase64Certificate' field.
      * The base64 encoded certificate for the local endpoint corresponded to the transport
      * @return The value.
      */
    public String getLocalBase64Certificate() {
      return localBase64Certificate;
    }

    /**
      * Sets the value of the 'localBase64Certificate' field.
      * The base64 encoded certificate for the local endpoint corresponded to the transport
      * @param value The value of 'localBase64Certificate'.
      * @return This builder.
      */
    public Builder setLocalBase64Certificate(String value) {
      validate(fields()[26], value);
      this.localBase64Certificate = value;
      fieldSetFlags()[26] = true;
      return this;
    }

    /**
      * Checks whether the 'localBase64Certificate' field has been set.
      * The base64 encoded certificate for the local endpoint corresponded to the transport
      * @return True if the 'localBase64Certificate' field has been set, false otherwise.
      */
    public boolean hasLocalBase64Certificate() {
      return fieldSetFlags()[26];
    }


    /**
      * Clears the value of the 'localBase64Certificate' field.
      * The base64 encoded certificate for the local endpoint corresponded to the transport
      * @return This builder.
      */
    public Builder clearLocalBase64Certificate() {
      localBase64Certificate = null;
      fieldSetFlags()[26] = false;
      return this;
    }

    /**
      * Gets the value of the 'remoteFingerprint' field.
      * The fingerprint of the certificate certifies the remote endpoint of the transport
      * @return The value.
      */
    public String getRemoteFingerprint() {
      return remoteFingerprint;
    }

    /**
      * Sets the value of the 'remoteFingerprint' field.
      * The fingerprint of the certificate certifies the remote endpoint of the transport
      * @param value The value of 'remoteFingerprint'.
      * @return This builder.
      */
    public Builder setRemoteFingerprint(String value) {
      validate(fields()[27], value);
      this.remoteFingerprint = value;
      fieldSetFlags()[27] = true;
      return this;
    }

    /**
      * Checks whether the 'remoteFingerprint' field has been set.
      * The fingerprint of the certificate certifies the remote endpoint of the transport
      * @return True if the 'remoteFingerprint' field has been set, false otherwise.
      */
    public boolean hasRemoteFingerprint() {
      return fieldSetFlags()[27];
    }


    /**
      * Clears the value of the 'remoteFingerprint' field.
      * The fingerprint of the certificate certifies the remote endpoint of the transport
      * @return This builder.
      */
    public Builder clearRemoteFingerprint() {
      remoteFingerprint = null;
      fieldSetFlags()[27] = false;
      return this;
    }

    /**
      * Gets the value of the 'remoteFingerprintAlgorithm' field.
      * The algorithm generate the fingerprint of the certificate certifies the remote endpoint of the transport
      * @return The value.
      */
    public String getRemoteFingerprintAlgorithm() {
      return remoteFingerprintAlgorithm;
    }

    /**
      * Sets the value of the 'remoteFingerprintAlgorithm' field.
      * The algorithm generate the fingerprint of the certificate certifies the remote endpoint of the transport
      * @param value The value of 'remoteFingerprintAlgorithm'.
      * @return This builder.
      */
    public Builder setRemoteFingerprintAlgorithm(String value) {
      validate(fields()[28], value);
      this.remoteFingerprintAlgorithm = value;
      fieldSetFlags()[28] = true;
      return this;
    }

    /**
      * Checks whether the 'remoteFingerprintAlgorithm' field has been set.
      * The algorithm generate the fingerprint of the certificate certifies the remote endpoint of the transport
      * @return True if the 'remoteFingerprintAlgorithm' field has been set, false otherwise.
      */
    public boolean hasRemoteFingerprintAlgorithm() {
      return fieldSetFlags()[28];
    }


    /**
      * Clears the value of the 'remoteFingerprintAlgorithm' field.
      * The algorithm generate the fingerprint of the certificate certifies the remote endpoint of the transport
      * @return This builder.
      */
    public Builder clearRemoteFingerprintAlgorithm() {
      remoteFingerprintAlgorithm = null;
      fieldSetFlags()[28] = false;
      return this;
    }

    /**
      * Gets the value of the 'remoteBase64Certificate' field.
      * The base64 encoded certificate for the remote endpoint corresponded to the transport
      * @return The value.
      */
    public String getRemoteBase64Certificate() {
      return remoteBase64Certificate;
    }

    /**
      * Sets the value of the 'remoteBase64Certificate' field.
      * The base64 encoded certificate for the remote endpoint corresponded to the transport
      * @param value The value of 'remoteBase64Certificate'.
      * @return This builder.
      */
    public Builder setRemoteBase64Certificate(String value) {
      validate(fields()[29], value);
      this.remoteBase64Certificate = value;
      fieldSetFlags()[29] = true;
      return this;
    }

    /**
      * Checks whether the 'remoteBase64Certificate' field has been set.
      * The base64 encoded certificate for the remote endpoint corresponded to the transport
      * @return True if the 'remoteBase64Certificate' field has been set, false otherwise.
      */
    public boolean hasRemoteBase64Certificate() {
      return fieldSetFlags()[29];
    }


    /**
      * Clears the value of the 'remoteBase64Certificate' field.
      * The base64 encoded certificate for the remote endpoint corresponded to the transport
      * @return This builder.
      */
    public Builder clearRemoteBase64Certificate() {
      remoteBase64Certificate = null;
      fieldSetFlags()[29] = false;
      return this;
    }

    /**
      * Gets the value of the 'localAddress' field.
      * The address of the candidate (IPv4, IPv6, FQDN)
      * @return The value.
      */
    public String getLocalAddress() {
      return localAddress;
    }

    /**
      * Sets the value of the 'localAddress' field.
      * The address of the candidate (IPv4, IPv6, FQDN)
      * @param value The value of 'localAddress'.
      * @return This builder.
      */
    public Builder setLocalAddress(String value) {
      validate(fields()[30], value);
      this.localAddress = value;
      fieldSetFlags()[30] = true;
      return this;
    }

    /**
      * Checks whether the 'localAddress' field has been set.
      * The address of the candidate (IPv4, IPv6, FQDN)
      * @return True if the 'localAddress' field has been set, false otherwise.
      */
    public boolean hasLocalAddress() {
      return fieldSetFlags()[30];
    }


    /**
      * Clears the value of the 'localAddress' field.
      * The address of the candidate (IPv4, IPv6, FQDN)
      * @return This builder.
      */
    public Builder clearLocalAddress() {
      localAddress = null;
      fieldSetFlags()[30] = false;
      return this;
    }

    /**
      * Gets the value of the 'localPort' field.
      * The locally used port to communicate with the remote peer
      * @return The value.
      */
    public Integer getLocalPort() {
      return localPort;
    }

    /**
      * Sets the value of the 'localPort' field.
      * The locally used port to communicate with the remote peer
      * @param value The value of 'localPort'.
      * @return This builder.
      */
    public Builder setLocalPort(Integer value) {
      validate(fields()[31], value);
      this.localPort = value;
      fieldSetFlags()[31] = true;
      return this;
    }

    /**
      * Checks whether the 'localPort' field has been set.
      * The locally used port to communicate with the remote peer
      * @return True if the 'localPort' field has been set, false otherwise.
      */
    public boolean hasLocalPort() {
      return fieldSetFlags()[31];
    }


    /**
      * Clears the value of the 'localPort' field.
      * The locally used port to communicate with the remote peer
      * @return This builder.
      */
    public Builder clearLocalPort() {
      localPort = null;
      fieldSetFlags()[31] = false;
      return this;
    }

    /**
      * Gets the value of the 'localProtocol' field.
      * The protocol used by the local endpoint for the corresponded transport
      * @return The value.
      */
    public String getLocalProtocol() {
      return localProtocol;
    }

    /**
      * Sets the value of the 'localProtocol' field.
      * The protocol used by the local endpoint for the corresponded transport
      * @param value The value of 'localProtocol'.
      * @return This builder.
      */
    public Builder setLocalProtocol(String value) {
      validate(fields()[32], value);
      this.localProtocol = value;
      fieldSetFlags()[32] = true;
      return this;
    }

    /**
      * Checks whether the 'localProtocol' field has been set.
      * The protocol used by the local endpoint for the corresponded transport
      * @return True if the 'localProtocol' field has been set, false otherwise.
      */
    public boolean hasLocalProtocol() {
      return fieldSetFlags()[32];
    }


    /**
      * Clears the value of the 'localProtocol' field.
      * The protocol used by the local endpoint for the corresponded transport
      * @return This builder.
      */
    public Builder clearLocalProtocol() {
      localProtocol = null;
      fieldSetFlags()[32] = false;
      return this;
    }

    /**
      * Gets the value of the 'localCandidateType' field.
      * The type of the ICE candidate used at the local endpoint on the corresponded transport
      * @return The value.
      */
    public String getLocalCandidateType() {
      return localCandidateType;
    }

    /**
      * Sets the value of the 'localCandidateType' field.
      * The type of the ICE candidate used at the local endpoint on the corresponded transport
      * @param value The value of 'localCandidateType'.
      * @return This builder.
      */
    public Builder setLocalCandidateType(String value) {
      validate(fields()[33], value);
      this.localCandidateType = value;
      fieldSetFlags()[33] = true;
      return this;
    }

    /**
      * Checks whether the 'localCandidateType' field has been set.
      * The type of the ICE candidate used at the local endpoint on the corresponded transport
      * @return True if the 'localCandidateType' field has been set, false otherwise.
      */
    public boolean hasLocalCandidateType() {
      return fieldSetFlags()[33];
    }


    /**
      * Clears the value of the 'localCandidateType' field.
      * The type of the ICE candidate used at the local endpoint on the corresponded transport
      * @return This builder.
      */
    public Builder clearLocalCandidateType() {
      localCandidateType = null;
      fieldSetFlags()[33] = false;
      return this;
    }

    /**
      * Gets the value of the 'localCandidatePriority' field.
      * The priority of the ICE candidate used at the local endpoint on the corresponded transport
      * @return The value.
      */
    public Integer getLocalCandidatePriority() {
      return localCandidatePriority;
    }

    /**
      * Sets the value of the 'localCandidatePriority' field.
      * The priority of the ICE candidate used at the local endpoint on the corresponded transport
      * @param value The value of 'localCandidatePriority'.
      * @return This builder.
      */
    public Builder setLocalCandidatePriority(Integer value) {
      validate(fields()[34], value);
      this.localCandidatePriority = value;
      fieldSetFlags()[34] = true;
      return this;
    }

    /**
      * Checks whether the 'localCandidatePriority' field has been set.
      * The priority of the ICE candidate used at the local endpoint on the corresponded transport
      * @return True if the 'localCandidatePriority' field has been set, false otherwise.
      */
    public boolean hasLocalCandidatePriority() {
      return fieldSetFlags()[34];
    }


    /**
      * Clears the value of the 'localCandidatePriority' field.
      * The priority of the ICE candidate used at the local endpoint on the corresponded transport
      * @return This builder.
      */
    public Builder clearLocalCandidatePriority() {
      localCandidatePriority = null;
      fieldSetFlags()[34] = false;
      return this;
    }

    /**
      * Gets the value of the 'localCandidateICEServerUrl' field.
      * The url of the ICE server used by the local endpoint on the corresponded transport
      * @return The value.
      */
    public String getLocalCandidateICEServerUrl() {
      return localCandidateICEServerUrl;
    }

    /**
      * Sets the value of the 'localCandidateICEServerUrl' field.
      * The url of the ICE server used by the local endpoint on the corresponded transport
      * @param value The value of 'localCandidateICEServerUrl'.
      * @return This builder.
      */
    public Builder setLocalCandidateICEServerUrl(String value) {
      validate(fields()[35], value);
      this.localCandidateICEServerUrl = value;
      fieldSetFlags()[35] = true;
      return this;
    }

    /**
      * Checks whether the 'localCandidateICEServerUrl' field has been set.
      * The url of the ICE server used by the local endpoint on the corresponded transport
      * @return True if the 'localCandidateICEServerUrl' field has been set, false otherwise.
      */
    public boolean hasLocalCandidateICEServerUrl() {
      return fieldSetFlags()[35];
    }


    /**
      * Clears the value of the 'localCandidateICEServerUrl' field.
      * The url of the ICE server used by the local endpoint on the corresponded transport
      * @return This builder.
      */
    public Builder clearLocalCandidateICEServerUrl() {
      localCandidateICEServerUrl = null;
      fieldSetFlags()[35] = false;
      return this;
    }

    /**
      * Gets the value of the 'localCandidateRelayProtocol' field.
      * The relay protocol of the ICE candidate used by the local endpoint on the corresponded transport
      * @return The value.
      */
    public String getLocalCandidateRelayProtocol() {
      return localCandidateRelayProtocol;
    }

    /**
      * Sets the value of the 'localCandidateRelayProtocol' field.
      * The relay protocol of the ICE candidate used by the local endpoint on the corresponded transport
      * @param value The value of 'localCandidateRelayProtocol'.
      * @return This builder.
      */
    public Builder setLocalCandidateRelayProtocol(String value) {
      validate(fields()[36], value);
      this.localCandidateRelayProtocol = value;
      fieldSetFlags()[36] = true;
      return this;
    }

    /**
      * Checks whether the 'localCandidateRelayProtocol' field has been set.
      * The relay protocol of the ICE candidate used by the local endpoint on the corresponded transport
      * @return True if the 'localCandidateRelayProtocol' field has been set, false otherwise.
      */
    public boolean hasLocalCandidateRelayProtocol() {
      return fieldSetFlags()[36];
    }


    /**
      * Clears the value of the 'localCandidateRelayProtocol' field.
      * The relay protocol of the ICE candidate used by the local endpoint on the corresponded transport
      * @return This builder.
      */
    public Builder clearLocalCandidateRelayProtocol() {
      localCandidateRelayProtocol = null;
      fieldSetFlags()[36] = false;
      return this;
    }

    /**
      * Gets the value of the 'remoteAddress' field.
      * The address of the candidate (IPv4, IPv6, FQDN)
      * @return The value.
      */
    public String getRemoteAddress() {
      return remoteAddress;
    }

    /**
      * Sets the value of the 'remoteAddress' field.
      * The address of the candidate (IPv4, IPv6, FQDN)
      * @param value The value of 'remoteAddress'.
      * @return This builder.
      */
    public Builder setRemoteAddress(String value) {
      validate(fields()[37], value);
      this.remoteAddress = value;
      fieldSetFlags()[37] = true;
      return this;
    }

    /**
      * Checks whether the 'remoteAddress' field has been set.
      * The address of the candidate (IPv4, IPv6, FQDN)
      * @return True if the 'remoteAddress' field has been set, false otherwise.
      */
    public boolean hasRemoteAddress() {
      return fieldSetFlags()[37];
    }


    /**
      * Clears the value of the 'remoteAddress' field.
      * The address of the candidate (IPv4, IPv6, FQDN)
      * @return This builder.
      */
    public Builder clearRemoteAddress() {
      remoteAddress = null;
      fieldSetFlags()[37] = false;
      return this;
    }

    /**
      * Gets the value of the 'remotePort' field.
      * The remotely used port to communicate with the remote peer
      * @return The value.
      */
    public Integer getRemotePort() {
      return remotePort;
    }

    /**
      * Sets the value of the 'remotePort' field.
      * The remotely used port to communicate with the remote peer
      * @param value The value of 'remotePort'.
      * @return This builder.
      */
    public Builder setRemotePort(Integer value) {
      validate(fields()[38], value);
      this.remotePort = value;
      fieldSetFlags()[38] = true;
      return this;
    }

    /**
      * Checks whether the 'remotePort' field has been set.
      * The remotely used port to communicate with the remote peer
      * @return True if the 'remotePort' field has been set, false otherwise.
      */
    public boolean hasRemotePort() {
      return fieldSetFlags()[38];
    }


    /**
      * Clears the value of the 'remotePort' field.
      * The remotely used port to communicate with the remote peer
      * @return This builder.
      */
    public Builder clearRemotePort() {
      remotePort = null;
      fieldSetFlags()[38] = false;
      return this;
    }

    /**
      * Gets the value of the 'remoteProtocol' field.
      * The protocol used by the remote endpoint for the corresponded transport
      * @return The value.
      */
    public String getRemoteProtocol() {
      return remoteProtocol;
    }

    /**
      * Sets the value of the 'remoteProtocol' field.
      * The protocol used by the remote endpoint for the corresponded transport
      * @param value The value of 'remoteProtocol'.
      * @return This builder.
      */
    public Builder setRemoteProtocol(String value) {
      validate(fields()[39], value);
      this.remoteProtocol = value;
      fieldSetFlags()[39] = true;
      return this;
    }

    /**
      * Checks whether the 'remoteProtocol' field has been set.
      * The protocol used by the remote endpoint for the corresponded transport
      * @return True if the 'remoteProtocol' field has been set, false otherwise.
      */
    public boolean hasRemoteProtocol() {
      return fieldSetFlags()[39];
    }


    /**
      * Clears the value of the 'remoteProtocol' field.
      * The protocol used by the remote endpoint for the corresponded transport
      * @return This builder.
      */
    public Builder clearRemoteProtocol() {
      remoteProtocol = null;
      fieldSetFlags()[39] = false;
      return this;
    }

    /**
      * Gets the value of the 'remoteCandidateType' field.
      * The type of the ICE candidate used at the remote endpoint on the corresponded transport
      * @return The value.
      */
    public String getRemoteCandidateType() {
      return remoteCandidateType;
    }

    /**
      * Sets the value of the 'remoteCandidateType' field.
      * The type of the ICE candidate used at the remote endpoint on the corresponded transport
      * @param value The value of 'remoteCandidateType'.
      * @return This builder.
      */
    public Builder setRemoteCandidateType(String value) {
      validate(fields()[40], value);
      this.remoteCandidateType = value;
      fieldSetFlags()[40] = true;
      return this;
    }

    /**
      * Checks whether the 'remoteCandidateType' field has been set.
      * The type of the ICE candidate used at the remote endpoint on the corresponded transport
      * @return True if the 'remoteCandidateType' field has been set, false otherwise.
      */
    public boolean hasRemoteCandidateType() {
      return fieldSetFlags()[40];
    }


    /**
      * Clears the value of the 'remoteCandidateType' field.
      * The type of the ICE candidate used at the remote endpoint on the corresponded transport
      * @return This builder.
      */
    public Builder clearRemoteCandidateType() {
      remoteCandidateType = null;
      fieldSetFlags()[40] = false;
      return this;
    }

    /**
      * Gets the value of the 'remoteCandidatePriority' field.
      * The priority of the ICE candidate used at the remote endpoint on the corresponded transport
      * @return The value.
      */
    public Integer getRemoteCandidatePriority() {
      return remoteCandidatePriority;
    }

    /**
      * Sets the value of the 'remoteCandidatePriority' field.
      * The priority of the ICE candidate used at the remote endpoint on the corresponded transport
      * @param value The value of 'remoteCandidatePriority'.
      * @return This builder.
      */
    public Builder setRemoteCandidatePriority(Integer value) {
      validate(fields()[41], value);
      this.remoteCandidatePriority = value;
      fieldSetFlags()[41] = true;
      return this;
    }

    /**
      * Checks whether the 'remoteCandidatePriority' field has been set.
      * The priority of the ICE candidate used at the remote endpoint on the corresponded transport
      * @return True if the 'remoteCandidatePriority' field has been set, false otherwise.
      */
    public boolean hasRemoteCandidatePriority() {
      return fieldSetFlags()[41];
    }


    /**
      * Clears the value of the 'remoteCandidatePriority' field.
      * The priority of the ICE candidate used at the remote endpoint on the corresponded transport
      * @return This builder.
      */
    public Builder clearRemoteCandidatePriority() {
      remoteCandidatePriority = null;
      fieldSetFlags()[41] = false;
      return this;
    }

    /**
      * Gets the value of the 'remoteCandidateICEServerUrl' field.
      * The url of the ICE server used by the remote endpoint on the corresponded transport
      * @return The value.
      */
    public String getRemoteCandidateICEServerUrl() {
      return remoteCandidateICEServerUrl;
    }

    /**
      * Sets the value of the 'remoteCandidateICEServerUrl' field.
      * The url of the ICE server used by the remote endpoint on the corresponded transport
      * @param value The value of 'remoteCandidateICEServerUrl'.
      * @return This builder.
      */
    public Builder setRemoteCandidateICEServerUrl(String value) {
      validate(fields()[42], value);
      this.remoteCandidateICEServerUrl = value;
      fieldSetFlags()[42] = true;
      return this;
    }

    /**
      * Checks whether the 'remoteCandidateICEServerUrl' field has been set.
      * The url of the ICE server used by the remote endpoint on the corresponded transport
      * @return True if the 'remoteCandidateICEServerUrl' field has been set, false otherwise.
      */
    public boolean hasRemoteCandidateICEServerUrl() {
      return fieldSetFlags()[42];
    }


    /**
      * Clears the value of the 'remoteCandidateICEServerUrl' field.
      * The url of the ICE server used by the remote endpoint on the corresponded transport
      * @return This builder.
      */
    public Builder clearRemoteCandidateICEServerUrl() {
      remoteCandidateICEServerUrl = null;
      fieldSetFlags()[42] = false;
      return this;
    }

    /**
      * Gets the value of the 'remoteCandidateRelayProtocol' field.
      * The relay protocol of the ICE candidate used by the remote endpoint on the corresponded transport
      * @return The value.
      */
    public String getRemoteCandidateRelayProtocol() {
      return remoteCandidateRelayProtocol;
    }

    /**
      * Sets the value of the 'remoteCandidateRelayProtocol' field.
      * The relay protocol of the ICE candidate used by the remote endpoint on the corresponded transport
      * @param value The value of 'remoteCandidateRelayProtocol'.
      * @return This builder.
      */
    public Builder setRemoteCandidateRelayProtocol(String value) {
      validate(fields()[43], value);
      this.remoteCandidateRelayProtocol = value;
      fieldSetFlags()[43] = true;
      return this;
    }

    /**
      * Checks whether the 'remoteCandidateRelayProtocol' field has been set.
      * The relay protocol of the ICE candidate used by the remote endpoint on the corresponded transport
      * @return True if the 'remoteCandidateRelayProtocol' field has been set, false otherwise.
      */
    public boolean hasRemoteCandidateRelayProtocol() {
      return fieldSetFlags()[43];
    }


    /**
      * Clears the value of the 'remoteCandidateRelayProtocol' field.
      * The relay protocol of the ICE candidate used by the remote endpoint on the corresponded transport
      * @return This builder.
      */
    public Builder clearRemoteCandidateRelayProtocol() {
      remoteCandidateRelayProtocol = null;
      fieldSetFlags()[43] = false;
      return this;
    }

    /**
      * Gets the value of the 'iceCandidatePairState' field.
      * The state of ICE Candidate Pairs (RTCStatsIceCandidatePairState) on the corresponded transport
      * @return The value.
      */
    public String getIceCandidatePairState() {
      return iceCandidatePairState;
    }

    /**
      * Sets the value of the 'iceCandidatePairState' field.
      * The state of ICE Candidate Pairs (RTCStatsIceCandidatePairState) on the corresponded transport
      * @param value The value of 'iceCandidatePairState'.
      * @return This builder.
      */
    public Builder setIceCandidatePairState(String value) {
      validate(fields()[44], value);
      this.iceCandidatePairState = value;
      fieldSetFlags()[44] = true;
      return this;
    }

    /**
      * Checks whether the 'iceCandidatePairState' field has been set.
      * The state of ICE Candidate Pairs (RTCStatsIceCandidatePairState) on the corresponded transport
      * @return True if the 'iceCandidatePairState' field has been set, false otherwise.
      */
    public boolean hasIceCandidatePairState() {
      return fieldSetFlags()[44];
    }


    /**
      * Clears the value of the 'iceCandidatePairState' field.
      * The state of ICE Candidate Pairs (RTCStatsIceCandidatePairState) on the corresponded transport
      * @return This builder.
      */
    public Builder clearIceCandidatePairState() {
      iceCandidatePairState = null;
      fieldSetFlags()[44] = false;
      return this;
    }

    /**
      * Gets the value of the 'iceCandidatePairPacketsSent' field.
      * The total number of packets sent using the last selected candidate pair over the corresponded transport
      * @return The value.
      */
    public Integer getIceCandidatePairPacketsSent() {
      return iceCandidatePairPacketsSent;
    }

    /**
      * Sets the value of the 'iceCandidatePairPacketsSent' field.
      * The total number of packets sent using the last selected candidate pair over the corresponded transport
      * @param value The value of 'iceCandidatePairPacketsSent'.
      * @return This builder.
      */
    public Builder setIceCandidatePairPacketsSent(Integer value) {
      validate(fields()[45], value);
      this.iceCandidatePairPacketsSent = value;
      fieldSetFlags()[45] = true;
      return this;
    }

    /**
      * Checks whether the 'iceCandidatePairPacketsSent' field has been set.
      * The total number of packets sent using the last selected candidate pair over the corresponded transport
      * @return True if the 'iceCandidatePairPacketsSent' field has been set, false otherwise.
      */
    public boolean hasIceCandidatePairPacketsSent() {
      return fieldSetFlags()[45];
    }


    /**
      * Clears the value of the 'iceCandidatePairPacketsSent' field.
      * The total number of packets sent using the last selected candidate pair over the corresponded transport
      * @return This builder.
      */
    public Builder clearIceCandidatePairPacketsSent() {
      iceCandidatePairPacketsSent = null;
      fieldSetFlags()[45] = false;
      return this;
    }

    /**
      * Gets the value of the 'iceCandidatePairPacketsReceived' field.
      * The total number of packets received using the last selected candidate pair over the corresponded transport
      * @return The value.
      */
    public Integer getIceCandidatePairPacketsReceived() {
      return iceCandidatePairPacketsReceived;
    }

    /**
      * Sets the value of the 'iceCandidatePairPacketsReceived' field.
      * The total number of packets received using the last selected candidate pair over the corresponded transport
      * @param value The value of 'iceCandidatePairPacketsReceived'.
      * @return This builder.
      */
    public Builder setIceCandidatePairPacketsReceived(Integer value) {
      validate(fields()[46], value);
      this.iceCandidatePairPacketsReceived = value;
      fieldSetFlags()[46] = true;
      return this;
    }

    /**
      * Checks whether the 'iceCandidatePairPacketsReceived' field has been set.
      * The total number of packets received using the last selected candidate pair over the corresponded transport
      * @return True if the 'iceCandidatePairPacketsReceived' field has been set, false otherwise.
      */
    public boolean hasIceCandidatePairPacketsReceived() {
      return fieldSetFlags()[46];
    }


    /**
      * Clears the value of the 'iceCandidatePairPacketsReceived' field.
      * The total number of packets received using the last selected candidate pair over the corresponded transport
      * @return This builder.
      */
    public Builder clearIceCandidatePairPacketsReceived() {
      iceCandidatePairPacketsReceived = null;
      fieldSetFlags()[46] = false;
      return this;
    }

    /**
      * Gets the value of the 'iceCandidatePairBytesSent' field.
      * The total number of bytes sent using the last selected candidate pair over the corresponded transport
      * @return The value.
      */
    public Long getIceCandidatePairBytesSent() {
      return iceCandidatePairBytesSent;
    }

    /**
      * Sets the value of the 'iceCandidatePairBytesSent' field.
      * The total number of bytes sent using the last selected candidate pair over the corresponded transport
      * @param value The value of 'iceCandidatePairBytesSent'.
      * @return This builder.
      */
    public Builder setIceCandidatePairBytesSent(Long value) {
      validate(fields()[47], value);
      this.iceCandidatePairBytesSent = value;
      fieldSetFlags()[47] = true;
      return this;
    }

    /**
      * Checks whether the 'iceCandidatePairBytesSent' field has been set.
      * The total number of bytes sent using the last selected candidate pair over the corresponded transport
      * @return True if the 'iceCandidatePairBytesSent' field has been set, false otherwise.
      */
    public boolean hasIceCandidatePairBytesSent() {
      return fieldSetFlags()[47];
    }


    /**
      * Clears the value of the 'iceCandidatePairBytesSent' field.
      * The total number of bytes sent using the last selected candidate pair over the corresponded transport
      * @return This builder.
      */
    public Builder clearIceCandidatePairBytesSent() {
      iceCandidatePairBytesSent = null;
      fieldSetFlags()[47] = false;
      return this;
    }

    /**
      * Gets the value of the 'iceCandidatePairBytesReceived' field.
      * The total number of bytes received using the last selected candidate pair over the corresponded transport
      * @return The value.
      */
    public Long getIceCandidatePairBytesReceived() {
      return iceCandidatePairBytesReceived;
    }

    /**
      * Sets the value of the 'iceCandidatePairBytesReceived' field.
      * The total number of bytes received using the last selected candidate pair over the corresponded transport
      * @param value The value of 'iceCandidatePairBytesReceived'.
      * @return This builder.
      */
    public Builder setIceCandidatePairBytesReceived(Long value) {
      validate(fields()[48], value);
      this.iceCandidatePairBytesReceived = value;
      fieldSetFlags()[48] = true;
      return this;
    }

    /**
      * Checks whether the 'iceCandidatePairBytesReceived' field has been set.
      * The total number of bytes received using the last selected candidate pair over the corresponded transport
      * @return True if the 'iceCandidatePairBytesReceived' field has been set, false otherwise.
      */
    public boolean hasIceCandidatePairBytesReceived() {
      return fieldSetFlags()[48];
    }


    /**
      * Clears the value of the 'iceCandidatePairBytesReceived' field.
      * The total number of bytes received using the last selected candidate pair over the corresponded transport
      * @return This builder.
      */
    public Builder clearIceCandidatePairBytesReceived() {
      iceCandidatePairBytesReceived = null;
      fieldSetFlags()[48] = false;
      return this;
    }

    /**
      * Gets the value of the 'iceCandidatePairLastPacketSentTimestamp' field.
      * Represents the timestamp at which the last packet was sent on the selected candidate pair, excluding STUN packets over the corresponded transport (UTC Epoch in ms)
      * @return The value.
      */
    public Long getIceCandidatePairLastPacketSentTimestamp() {
      return iceCandidatePairLastPacketSentTimestamp;
    }

    /**
      * Sets the value of the 'iceCandidatePairLastPacketSentTimestamp' field.
      * Represents the timestamp at which the last packet was sent on the selected candidate pair, excluding STUN packets over the corresponded transport (UTC Epoch in ms)
      * @param value The value of 'iceCandidatePairLastPacketSentTimestamp'.
      * @return This builder.
      */
    public Builder setIceCandidatePairLastPacketSentTimestamp(Long value) {
      validate(fields()[49], value);
      this.iceCandidatePairLastPacketSentTimestamp = value;
      fieldSetFlags()[49] = true;
      return this;
    }

    /**
      * Checks whether the 'iceCandidatePairLastPacketSentTimestamp' field has been set.
      * Represents the timestamp at which the last packet was sent on the selected candidate pair, excluding STUN packets over the corresponded transport (UTC Epoch in ms)
      * @return True if the 'iceCandidatePairLastPacketSentTimestamp' field has been set, false otherwise.
      */
    public boolean hasIceCandidatePairLastPacketSentTimestamp() {
      return fieldSetFlags()[49];
    }


    /**
      * Clears the value of the 'iceCandidatePairLastPacketSentTimestamp' field.
      * Represents the timestamp at which the last packet was sent on the selected candidate pair, excluding STUN packets over the corresponded transport (UTC Epoch in ms)
      * @return This builder.
      */
    public Builder clearIceCandidatePairLastPacketSentTimestamp() {
      iceCandidatePairLastPacketSentTimestamp = null;
      fieldSetFlags()[49] = false;
      return this;
    }

    /**
      * Gets the value of the 'iceCandidatePairLastPacketReceivedTimestamp' field.
      * Represents the timestamp at which the last packet was received on the selected candidate pair, excluding STUN packets over the corresponded transport (UTC Epoch in ms)
      * @return The value.
      */
    public Long getIceCandidatePairLastPacketReceivedTimestamp() {
      return iceCandidatePairLastPacketReceivedTimestamp;
    }

    /**
      * Sets the value of the 'iceCandidatePairLastPacketReceivedTimestamp' field.
      * Represents the timestamp at which the last packet was received on the selected candidate pair, excluding STUN packets over the corresponded transport (UTC Epoch in ms)
      * @param value The value of 'iceCandidatePairLastPacketReceivedTimestamp'.
      * @return This builder.
      */
    public Builder setIceCandidatePairLastPacketReceivedTimestamp(Long value) {
      validate(fields()[50], value);
      this.iceCandidatePairLastPacketReceivedTimestamp = value;
      fieldSetFlags()[50] = true;
      return this;
    }

    /**
      * Checks whether the 'iceCandidatePairLastPacketReceivedTimestamp' field has been set.
      * Represents the timestamp at which the last packet was received on the selected candidate pair, excluding STUN packets over the corresponded transport (UTC Epoch in ms)
      * @return True if the 'iceCandidatePairLastPacketReceivedTimestamp' field has been set, false otherwise.
      */
    public boolean hasIceCandidatePairLastPacketReceivedTimestamp() {
      return fieldSetFlags()[50];
    }


    /**
      * Clears the value of the 'iceCandidatePairLastPacketReceivedTimestamp' field.
      * Represents the timestamp at which the last packet was received on the selected candidate pair, excluding STUN packets over the corresponded transport (UTC Epoch in ms)
      * @return This builder.
      */
    public Builder clearIceCandidatePairLastPacketReceivedTimestamp() {
      iceCandidatePairLastPacketReceivedTimestamp = null;
      fieldSetFlags()[50] = false;
      return this;
    }

    /**
      * Gets the value of the 'iceCandidatePairFirstRequestTimestamp' field.
      * Represents the timestamp at which the first STUN request was sent on this particular candidate pair over the corresponded transport (UTC Epoch in ms)
      * @return The value.
      */
    public Long getIceCandidatePairFirstRequestTimestamp() {
      return iceCandidatePairFirstRequestTimestamp;
    }

    /**
      * Sets the value of the 'iceCandidatePairFirstRequestTimestamp' field.
      * Represents the timestamp at which the first STUN request was sent on this particular candidate pair over the corresponded transport (UTC Epoch in ms)
      * @param value The value of 'iceCandidatePairFirstRequestTimestamp'.
      * @return This builder.
      */
    public Builder setIceCandidatePairFirstRequestTimestamp(Long value) {
      validate(fields()[51], value);
      this.iceCandidatePairFirstRequestTimestamp = value;
      fieldSetFlags()[51] = true;
      return this;
    }

    /**
      * Checks whether the 'iceCandidatePairFirstRequestTimestamp' field has been set.
      * Represents the timestamp at which the first STUN request was sent on this particular candidate pair over the corresponded transport (UTC Epoch in ms)
      * @return True if the 'iceCandidatePairFirstRequestTimestamp' field has been set, false otherwise.
      */
    public boolean hasIceCandidatePairFirstRequestTimestamp() {
      return fieldSetFlags()[51];
    }


    /**
      * Clears the value of the 'iceCandidatePairFirstRequestTimestamp' field.
      * Represents the timestamp at which the first STUN request was sent on this particular candidate pair over the corresponded transport (UTC Epoch in ms)
      * @return This builder.
      */
    public Builder clearIceCandidatePairFirstRequestTimestamp() {
      iceCandidatePairFirstRequestTimestamp = null;
      fieldSetFlags()[51] = false;
      return this;
    }

    /**
      * Gets the value of the 'iceCandidatePairLastRequestTimestamp' field.
      * Represents the timestamp at which the last STUN request was sent on this particular candidate pair over the corresponded transport (UTC Epoch in ms)
      * @return The value.
      */
    public Long getIceCandidatePairLastRequestTimestamp() {
      return iceCandidatePairLastRequestTimestamp;
    }

    /**
      * Sets the value of the 'iceCandidatePairLastRequestTimestamp' field.
      * Represents the timestamp at which the last STUN request was sent on this particular candidate pair over the corresponded transport (UTC Epoch in ms)
      * @param value The value of 'iceCandidatePairLastRequestTimestamp'.
      * @return This builder.
      */
    public Builder setIceCandidatePairLastRequestTimestamp(Long value) {
      validate(fields()[52], value);
      this.iceCandidatePairLastRequestTimestamp = value;
      fieldSetFlags()[52] = true;
      return this;
    }

    /**
      * Checks whether the 'iceCandidatePairLastRequestTimestamp' field has been set.
      * Represents the timestamp at which the last STUN request was sent on this particular candidate pair over the corresponded transport (UTC Epoch in ms)
      * @return True if the 'iceCandidatePairLastRequestTimestamp' field has been set, false otherwise.
      */
    public boolean hasIceCandidatePairLastRequestTimestamp() {
      return fieldSetFlags()[52];
    }


    /**
      * Clears the value of the 'iceCandidatePairLastRequestTimestamp' field.
      * Represents the timestamp at which the last STUN request was sent on this particular candidate pair over the corresponded transport (UTC Epoch in ms)
      * @return This builder.
      */
    public Builder clearIceCandidatePairLastRequestTimestamp() {
      iceCandidatePairLastRequestTimestamp = null;
      fieldSetFlags()[52] = false;
      return this;
    }

    /**
      * Gets the value of the 'iceCandidatePairLastResponseTimestamp' field.
      * Represents the timestamp at which the last STUN response was received on this particular candidate pair over the corresponded transport (UTC Epoch in ms)
      * @return The value.
      */
    public Long getIceCandidatePairLastResponseTimestamp() {
      return iceCandidatePairLastResponseTimestamp;
    }

    /**
      * Sets the value of the 'iceCandidatePairLastResponseTimestamp' field.
      * Represents the timestamp at which the last STUN response was received on this particular candidate pair over the corresponded transport (UTC Epoch in ms)
      * @param value The value of 'iceCandidatePairLastResponseTimestamp'.
      * @return This builder.
      */
    public Builder setIceCandidatePairLastResponseTimestamp(Long value) {
      validate(fields()[53], value);
      this.iceCandidatePairLastResponseTimestamp = value;
      fieldSetFlags()[53] = true;
      return this;
    }

    /**
      * Checks whether the 'iceCandidatePairLastResponseTimestamp' field has been set.
      * Represents the timestamp at which the last STUN response was received on this particular candidate pair over the corresponded transport (UTC Epoch in ms)
      * @return True if the 'iceCandidatePairLastResponseTimestamp' field has been set, false otherwise.
      */
    public boolean hasIceCandidatePairLastResponseTimestamp() {
      return fieldSetFlags()[53];
    }


    /**
      * Clears the value of the 'iceCandidatePairLastResponseTimestamp' field.
      * Represents the timestamp at which the last STUN response was received on this particular candidate pair over the corresponded transport (UTC Epoch in ms)
      * @return This builder.
      */
    public Builder clearIceCandidatePairLastResponseTimestamp() {
      iceCandidatePairLastResponseTimestamp = null;
      fieldSetFlags()[53] = false;
      return this;
    }

    /**
      * Gets the value of the 'stunProvidedTotalRoundTripTime' field.
      * Represents the sum of all round trip time measurements in seconds since the beginning of the session, based on STUN connectivity check over the corresponded transport
      * @return The value.
      */
    public Double getStunProvidedTotalRoundTripTime() {
      return stunProvidedTotalRoundTripTime;
    }

    /**
      * Sets the value of the 'stunProvidedTotalRoundTripTime' field.
      * Represents the sum of all round trip time measurements in seconds since the beginning of the session, based on STUN connectivity check over the corresponded transport
      * @param value The value of 'stunProvidedTotalRoundTripTime'.
      * @return This builder.
      */
    public Builder setStunProvidedTotalRoundTripTime(Double value) {
      validate(fields()[54], value);
      this.stunProvidedTotalRoundTripTime = value;
      fieldSetFlags()[54] = true;
      return this;
    }

    /**
      * Checks whether the 'stunProvidedTotalRoundTripTime' field has been set.
      * Represents the sum of all round trip time measurements in seconds since the beginning of the session, based on STUN connectivity check over the corresponded transport
      * @return True if the 'stunProvidedTotalRoundTripTime' field has been set, false otherwise.
      */
    public boolean hasStunProvidedTotalRoundTripTime() {
      return fieldSetFlags()[54];
    }


    /**
      * Clears the value of the 'stunProvidedTotalRoundTripTime' field.
      * Represents the sum of all round trip time measurements in seconds since the beginning of the session, based on STUN connectivity check over the corresponded transport
      * @return This builder.
      */
    public Builder clearStunProvidedTotalRoundTripTime() {
      stunProvidedTotalRoundTripTime = null;
      fieldSetFlags()[54] = false;
      return this;
    }

    /**
      * Gets the value of the 'stunProvidedCurrentRoundTripTime' field.
      * Represents the last round trip time measurements in seconds based on STUN connectivity check over the corresponded transport
      * @return The value.
      */
    public Double getStunProvidedCurrentRoundTripTime() {
      return stunProvidedCurrentRoundTripTime;
    }

    /**
      * Sets the value of the 'stunProvidedCurrentRoundTripTime' field.
      * Represents the last round trip time measurements in seconds based on STUN connectivity check over the corresponded transport
      * @param value The value of 'stunProvidedCurrentRoundTripTime'.
      * @return This builder.
      */
    public Builder setStunProvidedCurrentRoundTripTime(Double value) {
      validate(fields()[55], value);
      this.stunProvidedCurrentRoundTripTime = value;
      fieldSetFlags()[55] = true;
      return this;
    }

    /**
      * Checks whether the 'stunProvidedCurrentRoundTripTime' field has been set.
      * Represents the last round trip time measurements in seconds based on STUN connectivity check over the corresponded transport
      * @return True if the 'stunProvidedCurrentRoundTripTime' field has been set, false otherwise.
      */
    public boolean hasStunProvidedCurrentRoundTripTime() {
      return fieldSetFlags()[55];
    }


    /**
      * Clears the value of the 'stunProvidedCurrentRoundTripTime' field.
      * Represents the last round trip time measurements in seconds based on STUN connectivity check over the corresponded transport
      * @return This builder.
      */
    public Builder clearStunProvidedCurrentRoundTripTime() {
      stunProvidedCurrentRoundTripTime = null;
      fieldSetFlags()[55] = false;
      return this;
    }

    /**
      * Gets the value of the 'availableOutgoingBitrate' field.
      * The sum of the underlying cc algorithm provided outgoing bitrate for the RTP streams over the corresponded transport
      * @return The value.
      */
    public Double getAvailableOutgoingBitrate() {
      return availableOutgoingBitrate;
    }

    /**
      * Sets the value of the 'availableOutgoingBitrate' field.
      * The sum of the underlying cc algorithm provided outgoing bitrate for the RTP streams over the corresponded transport
      * @param value The value of 'availableOutgoingBitrate'.
      * @return This builder.
      */
    public Builder setAvailableOutgoingBitrate(Double value) {
      validate(fields()[56], value);
      this.availableOutgoingBitrate = value;
      fieldSetFlags()[56] = true;
      return this;
    }

    /**
      * Checks whether the 'availableOutgoingBitrate' field has been set.
      * The sum of the underlying cc algorithm provided outgoing bitrate for the RTP streams over the corresponded transport
      * @return True if the 'availableOutgoingBitrate' field has been set, false otherwise.
      */
    public boolean hasAvailableOutgoingBitrate() {
      return fieldSetFlags()[56];
    }


    /**
      * Clears the value of the 'availableOutgoingBitrate' field.
      * The sum of the underlying cc algorithm provided outgoing bitrate for the RTP streams over the corresponded transport
      * @return This builder.
      */
    public Builder clearAvailableOutgoingBitrate() {
      availableOutgoingBitrate = null;
      fieldSetFlags()[56] = false;
      return this;
    }

    /**
      * Gets the value of the 'availableIncomingBitrate' field.
      * The sum of the underlying cc algorithm provided incoming bitrate for the RTP streams over the corresponded transport
      * @return The value.
      */
    public Double getAvailableIncomingBitrate() {
      return availableIncomingBitrate;
    }

    /**
      * Sets the value of the 'availableIncomingBitrate' field.
      * The sum of the underlying cc algorithm provided incoming bitrate for the RTP streams over the corresponded transport
      * @param value The value of 'availableIncomingBitrate'.
      * @return This builder.
      */
    public Builder setAvailableIncomingBitrate(Double value) {
      validate(fields()[57], value);
      this.availableIncomingBitrate = value;
      fieldSetFlags()[57] = true;
      return this;
    }

    /**
      * Checks whether the 'availableIncomingBitrate' field has been set.
      * The sum of the underlying cc algorithm provided incoming bitrate for the RTP streams over the corresponded transport
      * @return True if the 'availableIncomingBitrate' field has been set, false otherwise.
      */
    public boolean hasAvailableIncomingBitrate() {
      return fieldSetFlags()[57];
    }


    /**
      * Clears the value of the 'availableIncomingBitrate' field.
      * The sum of the underlying cc algorithm provided incoming bitrate for the RTP streams over the corresponded transport
      * @return This builder.
      */
    public Builder clearAvailableIncomingBitrate() {
      availableIncomingBitrate = null;
      fieldSetFlags()[57] = false;
      return this;
    }

    /**
      * Gets the value of the 'circuitBreakerTriggerCount' field.
      * The total number of circuit breaker triggered over the corresponded transport using the selected candidate pair
      * @return The value.
      */
    public Integer getCircuitBreakerTriggerCount() {
      return circuitBreakerTriggerCount;
    }

    /**
      * Sets the value of the 'circuitBreakerTriggerCount' field.
      * The total number of circuit breaker triggered over the corresponded transport using the selected candidate pair
      * @param value The value of 'circuitBreakerTriggerCount'.
      * @return This builder.
      */
    public Builder setCircuitBreakerTriggerCount(Integer value) {
      validate(fields()[58], value);
      this.circuitBreakerTriggerCount = value;
      fieldSetFlags()[58] = true;
      return this;
    }

    /**
      * Checks whether the 'circuitBreakerTriggerCount' field has been set.
      * The total number of circuit breaker triggered over the corresponded transport using the selected candidate pair
      * @return True if the 'circuitBreakerTriggerCount' field has been set, false otherwise.
      */
    public boolean hasCircuitBreakerTriggerCount() {
      return fieldSetFlags()[58];
    }


    /**
      * Clears the value of the 'circuitBreakerTriggerCount' field.
      * The total number of circuit breaker triggered over the corresponded transport using the selected candidate pair
      * @return This builder.
      */
    public Builder clearCircuitBreakerTriggerCount() {
      circuitBreakerTriggerCount = null;
      fieldSetFlags()[58] = false;
      return this;
    }

    /**
      * Gets the value of the 'candidatePairRequestsReceived' field.
      * Represents the total number of connectivity check requests received on the selected candidate pair using the corresponded transport
      * @return The value.
      */
    public Integer getCandidatePairRequestsReceived() {
      return candidatePairRequestsReceived;
    }

    /**
      * Sets the value of the 'candidatePairRequestsReceived' field.
      * Represents the total number of connectivity check requests received on the selected candidate pair using the corresponded transport
      * @param value The value of 'candidatePairRequestsReceived'.
      * @return This builder.
      */
    public Builder setCandidatePairRequestsReceived(Integer value) {
      validate(fields()[59], value);
      this.candidatePairRequestsReceived = value;
      fieldSetFlags()[59] = true;
      return this;
    }

    /**
      * Checks whether the 'candidatePairRequestsReceived' field has been set.
      * Represents the total number of connectivity check requests received on the selected candidate pair using the corresponded transport
      * @return True if the 'candidatePairRequestsReceived' field has been set, false otherwise.
      */
    public boolean hasCandidatePairRequestsReceived() {
      return fieldSetFlags()[59];
    }


    /**
      * Clears the value of the 'candidatePairRequestsReceived' field.
      * Represents the total number of connectivity check requests received on the selected candidate pair using the corresponded transport
      * @return This builder.
      */
    public Builder clearCandidatePairRequestsReceived() {
      candidatePairRequestsReceived = null;
      fieldSetFlags()[59] = false;
      return this;
    }

    /**
      * Gets the value of the 'candidatePairRequestsSent' field.
      * Represents the total number of connectivity check requests sent on the selected candidate pair using the corresponded transport
      * @return The value.
      */
    public Integer getCandidatePairRequestsSent() {
      return candidatePairRequestsSent;
    }

    /**
      * Sets the value of the 'candidatePairRequestsSent' field.
      * Represents the total number of connectivity check requests sent on the selected candidate pair using the corresponded transport
      * @param value The value of 'candidatePairRequestsSent'.
      * @return This builder.
      */
    public Builder setCandidatePairRequestsSent(Integer value) {
      validate(fields()[60], value);
      this.candidatePairRequestsSent = value;
      fieldSetFlags()[60] = true;
      return this;
    }

    /**
      * Checks whether the 'candidatePairRequestsSent' field has been set.
      * Represents the total number of connectivity check requests sent on the selected candidate pair using the corresponded transport
      * @return True if the 'candidatePairRequestsSent' field has been set, false otherwise.
      */
    public boolean hasCandidatePairRequestsSent() {
      return fieldSetFlags()[60];
    }


    /**
      * Clears the value of the 'candidatePairRequestsSent' field.
      * Represents the total number of connectivity check requests sent on the selected candidate pair using the corresponded transport
      * @return This builder.
      */
    public Builder clearCandidatePairRequestsSent() {
      candidatePairRequestsSent = null;
      fieldSetFlags()[60] = false;
      return this;
    }

    /**
      * Gets the value of the 'candidatePairResponsesReceived' field.
      * Represents the total number of connectivity check responses received on the selected candidate pair using the corresponded transport
      * @return The value.
      */
    public Integer getCandidatePairResponsesReceived() {
      return candidatePairResponsesReceived;
    }

    /**
      * Sets the value of the 'candidatePairResponsesReceived' field.
      * Represents the total number of connectivity check responses received on the selected candidate pair using the corresponded transport
      * @param value The value of 'candidatePairResponsesReceived'.
      * @return This builder.
      */
    public Builder setCandidatePairResponsesReceived(Integer value) {
      validate(fields()[61], value);
      this.candidatePairResponsesReceived = value;
      fieldSetFlags()[61] = true;
      return this;
    }

    /**
      * Checks whether the 'candidatePairResponsesReceived' field has been set.
      * Represents the total number of connectivity check responses received on the selected candidate pair using the corresponded transport
      * @return True if the 'candidatePairResponsesReceived' field has been set, false otherwise.
      */
    public boolean hasCandidatePairResponsesReceived() {
      return fieldSetFlags()[61];
    }


    /**
      * Clears the value of the 'candidatePairResponsesReceived' field.
      * Represents the total number of connectivity check responses received on the selected candidate pair using the corresponded transport
      * @return This builder.
      */
    public Builder clearCandidatePairResponsesReceived() {
      candidatePairResponsesReceived = null;
      fieldSetFlags()[61] = false;
      return this;
    }

    /**
      * Gets the value of the 'candidatePairResponsesSent' field.
      * Represents the total number of connectivity check responses sent on the selected candidate pair using the corresponded transport
      * @return The value.
      */
    public Integer getCandidatePairResponsesSent() {
      return candidatePairResponsesSent;
    }

    /**
      * Sets the value of the 'candidatePairResponsesSent' field.
      * Represents the total number of connectivity check responses sent on the selected candidate pair using the corresponded transport
      * @param value The value of 'candidatePairResponsesSent'.
      * @return This builder.
      */
    public Builder setCandidatePairResponsesSent(Integer value) {
      validate(fields()[62], value);
      this.candidatePairResponsesSent = value;
      fieldSetFlags()[62] = true;
      return this;
    }

    /**
      * Checks whether the 'candidatePairResponsesSent' field has been set.
      * Represents the total number of connectivity check responses sent on the selected candidate pair using the corresponded transport
      * @return True if the 'candidatePairResponsesSent' field has been set, false otherwise.
      */
    public boolean hasCandidatePairResponsesSent() {
      return fieldSetFlags()[62];
    }


    /**
      * Clears the value of the 'candidatePairResponsesSent' field.
      * Represents the total number of connectivity check responses sent on the selected candidate pair using the corresponded transport
      * @return This builder.
      */
    public Builder clearCandidatePairResponsesSent() {
      candidatePairResponsesSent = null;
      fieldSetFlags()[62] = false;
      return this;
    }

    /**
      * Gets the value of the 'candidatePairRetransmissionReceived' field.
      * Represents the total number of connectivity check retransmission received on the selected candidate pair using the corresponded transport
      * @return The value.
      */
    public Integer getCandidatePairRetransmissionReceived() {
      return candidatePairRetransmissionReceived;
    }

    /**
      * Sets the value of the 'candidatePairRetransmissionReceived' field.
      * Represents the total number of connectivity check retransmission received on the selected candidate pair using the corresponded transport
      * @param value The value of 'candidatePairRetransmissionReceived'.
      * @return This builder.
      */
    public Builder setCandidatePairRetransmissionReceived(Integer value) {
      validate(fields()[63], value);
      this.candidatePairRetransmissionReceived = value;
      fieldSetFlags()[63] = true;
      return this;
    }

    /**
      * Checks whether the 'candidatePairRetransmissionReceived' field has been set.
      * Represents the total number of connectivity check retransmission received on the selected candidate pair using the corresponded transport
      * @return True if the 'candidatePairRetransmissionReceived' field has been set, false otherwise.
      */
    public boolean hasCandidatePairRetransmissionReceived() {
      return fieldSetFlags()[63];
    }


    /**
      * Clears the value of the 'candidatePairRetransmissionReceived' field.
      * Represents the total number of connectivity check retransmission received on the selected candidate pair using the corresponded transport
      * @return This builder.
      */
    public Builder clearCandidatePairRetransmissionReceived() {
      candidatePairRetransmissionReceived = null;
      fieldSetFlags()[63] = false;
      return this;
    }

    /**
      * Gets the value of the 'candidatePairRetransmissionSent' field.
      * Represents the total number of connectivity check retransmission sent on the selected candidate pair using the corresponded transport
      * @return The value.
      */
    public Integer getCandidatePairRetransmissionSent() {
      return candidatePairRetransmissionSent;
    }

    /**
      * Sets the value of the 'candidatePairRetransmissionSent' field.
      * Represents the total number of connectivity check retransmission sent on the selected candidate pair using the corresponded transport
      * @param value The value of 'candidatePairRetransmissionSent'.
      * @return This builder.
      */
    public Builder setCandidatePairRetransmissionSent(Integer value) {
      validate(fields()[64], value);
      this.candidatePairRetransmissionSent = value;
      fieldSetFlags()[64] = true;
      return this;
    }

    /**
      * Checks whether the 'candidatePairRetransmissionSent' field has been set.
      * Represents the total number of connectivity check retransmission sent on the selected candidate pair using the corresponded transport
      * @return True if the 'candidatePairRetransmissionSent' field has been set, false otherwise.
      */
    public boolean hasCandidatePairRetransmissionSent() {
      return fieldSetFlags()[64];
    }


    /**
      * Clears the value of the 'candidatePairRetransmissionSent' field.
      * Represents the total number of connectivity check retransmission sent on the selected candidate pair using the corresponded transport
      * @return This builder.
      */
    public Builder clearCandidatePairRetransmissionSent() {
      candidatePairRetransmissionSent = null;
      fieldSetFlags()[64] = false;
      return this;
    }

    /**
      * Gets the value of the 'candidatePairConsentRequestsSent' field.
      * Represents the total number of consent requests sent on the selected candidate pair using the corresponded transport
      * @return The value.
      */
    public Integer getCandidatePairConsentRequestsSent() {
      return candidatePairConsentRequestsSent;
    }

    /**
      * Sets the value of the 'candidatePairConsentRequestsSent' field.
      * Represents the total number of consent requests sent on the selected candidate pair using the corresponded transport
      * @param value The value of 'candidatePairConsentRequestsSent'.
      * @return This builder.
      */
    public Builder setCandidatePairConsentRequestsSent(Integer value) {
      validate(fields()[65], value);
      this.candidatePairConsentRequestsSent = value;
      fieldSetFlags()[65] = true;
      return this;
    }

    /**
      * Checks whether the 'candidatePairConsentRequestsSent' field has been set.
      * Represents the total number of consent requests sent on the selected candidate pair using the corresponded transport
      * @return True if the 'candidatePairConsentRequestsSent' field has been set, false otherwise.
      */
    public boolean hasCandidatePairConsentRequestsSent() {
      return fieldSetFlags()[65];
    }


    /**
      * Clears the value of the 'candidatePairConsentRequestsSent' field.
      * Represents the total number of consent requests sent on the selected candidate pair using the corresponded transport
      * @return This builder.
      */
    public Builder clearCandidatePairConsentRequestsSent() {
      candidatePairConsentRequestsSent = null;
      fieldSetFlags()[65] = false;
      return this;
    }

    /**
      * Gets the value of the 'candidatePairConsentExpiredTimestamp' field.
      * Represents the timestamp at which the latest valid STUN binding response expired on the selected candidate pair using the corresponded transport
      * @return The value.
      */
    public Long getCandidatePairConsentExpiredTimestamp() {
      return candidatePairConsentExpiredTimestamp;
    }

    /**
      * Sets the value of the 'candidatePairConsentExpiredTimestamp' field.
      * Represents the timestamp at which the latest valid STUN binding response expired on the selected candidate pair using the corresponded transport
      * @param value The value of 'candidatePairConsentExpiredTimestamp'.
      * @return This builder.
      */
    public Builder setCandidatePairConsentExpiredTimestamp(Long value) {
      validate(fields()[66], value);
      this.candidatePairConsentExpiredTimestamp = value;
      fieldSetFlags()[66] = true;
      return this;
    }

    /**
      * Checks whether the 'candidatePairConsentExpiredTimestamp' field has been set.
      * Represents the timestamp at which the latest valid STUN binding response expired on the selected candidate pair using the corresponded transport
      * @return True if the 'candidatePairConsentExpiredTimestamp' field has been set, false otherwise.
      */
    public boolean hasCandidatePairConsentExpiredTimestamp() {
      return fieldSetFlags()[66];
    }


    /**
      * Clears the value of the 'candidatePairConsentExpiredTimestamp' field.
      * Represents the timestamp at which the latest valid STUN binding response expired on the selected candidate pair using the corresponded transport
      * @return This builder.
      */
    public Builder clearCandidatePairConsentExpiredTimestamp() {
      candidatePairConsentExpiredTimestamp = null;
      fieldSetFlags()[66] = false;
      return this;
    }

    /**
      * Gets the value of the 'candidatePairBytesDiscardedOnSend' field.
      * Total amount of bytes for this candidate pair that have been discarded due to socket errors on the selected candidate pair using the corresponded transport
      * @return The value.
      */
    public Long getCandidatePairBytesDiscardedOnSend() {
      return candidatePairBytesDiscardedOnSend;
    }

    /**
      * Sets the value of the 'candidatePairBytesDiscardedOnSend' field.
      * Total amount of bytes for this candidate pair that have been discarded due to socket errors on the selected candidate pair using the corresponded transport
      * @param value The value of 'candidatePairBytesDiscardedOnSend'.
      * @return This builder.
      */
    public Builder setCandidatePairBytesDiscardedOnSend(Long value) {
      validate(fields()[67], value);
      this.candidatePairBytesDiscardedOnSend = value;
      fieldSetFlags()[67] = true;
      return this;
    }

    /**
      * Checks whether the 'candidatePairBytesDiscardedOnSend' field has been set.
      * Total amount of bytes for this candidate pair that have been discarded due to socket errors on the selected candidate pair using the corresponded transport
      * @return True if the 'candidatePairBytesDiscardedOnSend' field has been set, false otherwise.
      */
    public boolean hasCandidatePairBytesDiscardedOnSend() {
      return fieldSetFlags()[67];
    }


    /**
      * Clears the value of the 'candidatePairBytesDiscardedOnSend' field.
      * Total amount of bytes for this candidate pair that have been discarded due to socket errors on the selected candidate pair using the corresponded transport
      * @return This builder.
      */
    public Builder clearCandidatePairBytesDiscardedOnSend() {
      candidatePairBytesDiscardedOnSend = null;
      fieldSetFlags()[67] = false;
      return this;
    }

    /**
      * Gets the value of the 'candidatePairRequestBytesSent' field.
      * Total number of bytes sent for connectivity checks on the selected candidate pair using the corresponded transport
      * @return The value.
      */
    public Long getCandidatePairRequestBytesSent() {
      return candidatePairRequestBytesSent;
    }

    /**
      * Sets the value of the 'candidatePairRequestBytesSent' field.
      * Total number of bytes sent for connectivity checks on the selected candidate pair using the corresponded transport
      * @param value The value of 'candidatePairRequestBytesSent'.
      * @return This builder.
      */
    public Builder setCandidatePairRequestBytesSent(Long value) {
      validate(fields()[68], value);
      this.candidatePairRequestBytesSent = value;
      fieldSetFlags()[68] = true;
      return this;
    }

    /**
      * Checks whether the 'candidatePairRequestBytesSent' field has been set.
      * Total number of bytes sent for connectivity checks on the selected candidate pair using the corresponded transport
      * @return True if the 'candidatePairRequestBytesSent' field has been set, false otherwise.
      */
    public boolean hasCandidatePairRequestBytesSent() {
      return fieldSetFlags()[68];
    }


    /**
      * Clears the value of the 'candidatePairRequestBytesSent' field.
      * Total number of bytes sent for connectivity checks on the selected candidate pair using the corresponded transport
      * @return This builder.
      */
    public Builder clearCandidatePairRequestBytesSent() {
      candidatePairRequestBytesSent = null;
      fieldSetFlags()[68] = false;
      return this;
    }

    /**
      * Gets the value of the 'candidatePairConsentRequestBytesSent' field.
      * Total number of bytes sent for consent requests on the selected candidate pair using the corresponded transport
      * @return The value.
      */
    public Long getCandidatePairConsentRequestBytesSent() {
      return candidatePairConsentRequestBytesSent;
    }

    /**
      * Sets the value of the 'candidatePairConsentRequestBytesSent' field.
      * Total number of bytes sent for consent requests on the selected candidate pair using the corresponded transport
      * @param value The value of 'candidatePairConsentRequestBytesSent'.
      * @return This builder.
      */
    public Builder setCandidatePairConsentRequestBytesSent(Long value) {
      validate(fields()[69], value);
      this.candidatePairConsentRequestBytesSent = value;
      fieldSetFlags()[69] = true;
      return this;
    }

    /**
      * Checks whether the 'candidatePairConsentRequestBytesSent' field has been set.
      * Total number of bytes sent for consent requests on the selected candidate pair using the corresponded transport
      * @return True if the 'candidatePairConsentRequestBytesSent' field has been set, false otherwise.
      */
    public boolean hasCandidatePairConsentRequestBytesSent() {
      return fieldSetFlags()[69];
    }


    /**
      * Clears the value of the 'candidatePairConsentRequestBytesSent' field.
      * Total number of bytes sent for consent requests on the selected candidate pair using the corresponded transport
      * @return This builder.
      */
    public Builder clearCandidatePairConsentRequestBytesSent() {
      candidatePairConsentRequestBytesSent = null;
      fieldSetFlags()[69] = false;
      return this;
    }

    /**
      * Gets the value of the 'candidatePairResponseBytesSent' field.
      * Total number of bytes sent for connectivity check responses on the selected candidate pair using the corresponded transport
      * @return The value.
      */
    public Integer getCandidatePairResponseBytesSent() {
      return candidatePairResponseBytesSent;
    }

    /**
      * Sets the value of the 'candidatePairResponseBytesSent' field.
      * Total number of bytes sent for connectivity check responses on the selected candidate pair using the corresponded transport
      * @param value The value of 'candidatePairResponseBytesSent'.
      * @return This builder.
      */
    public Builder setCandidatePairResponseBytesSent(Integer value) {
      validate(fields()[70], value);
      this.candidatePairResponseBytesSent = value;
      fieldSetFlags()[70] = true;
      return this;
    }

    /**
      * Checks whether the 'candidatePairResponseBytesSent' field has been set.
      * Total number of bytes sent for connectivity check responses on the selected candidate pair using the corresponded transport
      * @return True if the 'candidatePairResponseBytesSent' field has been set, false otherwise.
      */
    public boolean hasCandidatePairResponseBytesSent() {
      return fieldSetFlags()[70];
    }


    /**
      * Clears the value of the 'candidatePairResponseBytesSent' field.
      * Total number of bytes sent for connectivity check responses on the selected candidate pair using the corresponded transport
      * @return This builder.
      */
    public Builder clearCandidatePairResponseBytesSent() {
      candidatePairResponseBytesSent = null;
      fieldSetFlags()[70] = false;
      return this;
    }

    /**
      * Gets the value of the 'sctpSmoothedRoundTripTime' field.
      * The latest smoothed round-trip time value, corresponding to spinfo_srtt defined in [RFC6458] but converted to seconds. 
      * @return The value.
      */
    public Double getSctpSmoothedRoundTripTime() {
      return sctpSmoothedRoundTripTime;
    }

    /**
      * Sets the value of the 'sctpSmoothedRoundTripTime' field.
      * The latest smoothed round-trip time value, corresponding to spinfo_srtt defined in [RFC6458] but converted to seconds. 
      * @param value The value of 'sctpSmoothedRoundTripTime'.
      * @return This builder.
      */
    public Builder setSctpSmoothedRoundTripTime(Double value) {
      validate(fields()[71], value);
      this.sctpSmoothedRoundTripTime = value;
      fieldSetFlags()[71] = true;
      return this;
    }

    /**
      * Checks whether the 'sctpSmoothedRoundTripTime' field has been set.
      * The latest smoothed round-trip time value, corresponding to spinfo_srtt defined in [RFC6458] but converted to seconds. 
      * @return True if the 'sctpSmoothedRoundTripTime' field has been set, false otherwise.
      */
    public boolean hasSctpSmoothedRoundTripTime() {
      return fieldSetFlags()[71];
    }


    /**
      * Clears the value of the 'sctpSmoothedRoundTripTime' field.
      * The latest smoothed round-trip time value, corresponding to spinfo_srtt defined in [RFC6458] but converted to seconds. 
      * @return This builder.
      */
    public Builder clearSctpSmoothedRoundTripTime() {
      sctpSmoothedRoundTripTime = null;
      fieldSetFlags()[71] = false;
      return this;
    }

    /**
      * Gets the value of the 'sctpCongestionWindow' field.
      * The latest congestion window, corresponding to spinfo_cwnd.
      * @return The value.
      */
    public Double getSctpCongestionWindow() {
      return sctpCongestionWindow;
    }

    /**
      * Sets the value of the 'sctpCongestionWindow' field.
      * The latest congestion window, corresponding to spinfo_cwnd.
      * @param value The value of 'sctpCongestionWindow'.
      * @return This builder.
      */
    public Builder setSctpCongestionWindow(Double value) {
      validate(fields()[72], value);
      this.sctpCongestionWindow = value;
      fieldSetFlags()[72] = true;
      return this;
    }

    /**
      * Checks whether the 'sctpCongestionWindow' field has been set.
      * The latest congestion window, corresponding to spinfo_cwnd.
      * @return True if the 'sctpCongestionWindow' field has been set, false otherwise.
      */
    public boolean hasSctpCongestionWindow() {
      return fieldSetFlags()[72];
    }


    /**
      * Clears the value of the 'sctpCongestionWindow' field.
      * The latest congestion window, corresponding to spinfo_cwnd.
      * @return This builder.
      */
    public Builder clearSctpCongestionWindow() {
      sctpCongestionWindow = null;
      fieldSetFlags()[72] = false;
      return this;
    }

    /**
      * Gets the value of the 'sctpReceiverWindow' field.
      * The latest receiver window, corresponding to sstat_rwnd.
      * @return The value.
      */
    public Double getSctpReceiverWindow() {
      return sctpReceiverWindow;
    }

    /**
      * Sets the value of the 'sctpReceiverWindow' field.
      * The latest receiver window, corresponding to sstat_rwnd.
      * @param value The value of 'sctpReceiverWindow'.
      * @return This builder.
      */
    public Builder setSctpReceiverWindow(Double value) {
      validate(fields()[73], value);
      this.sctpReceiverWindow = value;
      fieldSetFlags()[73] = true;
      return this;
    }

    /**
      * Checks whether the 'sctpReceiverWindow' field has been set.
      * The latest receiver window, corresponding to sstat_rwnd.
      * @return True if the 'sctpReceiverWindow' field has been set, false otherwise.
      */
    public boolean hasSctpReceiverWindow() {
      return fieldSetFlags()[73];
    }


    /**
      * Clears the value of the 'sctpReceiverWindow' field.
      * The latest receiver window, corresponding to sstat_rwnd.
      * @return This builder.
      */
    public Builder clearSctpReceiverWindow() {
      sctpReceiverWindow = null;
      fieldSetFlags()[73] = false;
      return this;
    }

    /**
      * Gets the value of the 'sctpMtu' field.
      * The latest maximum transmission unit, corresponding to spinfo_mtu.
      * @return The value.
      */
    public Integer getSctpMtu() {
      return sctpMtu;
    }

    /**
      * Sets the value of the 'sctpMtu' field.
      * The latest maximum transmission unit, corresponding to spinfo_mtu.
      * @param value The value of 'sctpMtu'.
      * @return This builder.
      */
    public Builder setSctpMtu(Integer value) {
      validate(fields()[74], value);
      this.sctpMtu = value;
      fieldSetFlags()[74] = true;
      return this;
    }

    /**
      * Checks whether the 'sctpMtu' field has been set.
      * The latest maximum transmission unit, corresponding to spinfo_mtu.
      * @return True if the 'sctpMtu' field has been set, false otherwise.
      */
    public boolean hasSctpMtu() {
      return fieldSetFlags()[74];
    }


    /**
      * Clears the value of the 'sctpMtu' field.
      * The latest maximum transmission unit, corresponding to spinfo_mtu.
      * @return This builder.
      */
    public Builder clearSctpMtu() {
      sctpMtu = null;
      fieldSetFlags()[74] = false;
      return this;
    }

    /**
      * Gets the value of the 'sctpUnackData' field.
      * The number of unacknowledged DATA chunks, corresponding to sstat_unackdata.
      * @return The value.
      */
    public Integer getSctpUnackData() {
      return sctpUnackData;
    }

    /**
      * Sets the value of the 'sctpUnackData' field.
      * The number of unacknowledged DATA chunks, corresponding to sstat_unackdata.
      * @param value The value of 'sctpUnackData'.
      * @return This builder.
      */
    public Builder setSctpUnackData(Integer value) {
      validate(fields()[75], value);
      this.sctpUnackData = value;
      fieldSetFlags()[75] = true;
      return this;
    }

    /**
      * Checks whether the 'sctpUnackData' field has been set.
      * The number of unacknowledged DATA chunks, corresponding to sstat_unackdata.
      * @return True if the 'sctpUnackData' field has been set, false otherwise.
      */
    public boolean hasSctpUnackData() {
      return fieldSetFlags()[75];
    }


    /**
      * Clears the value of the 'sctpUnackData' field.
      * The number of unacknowledged DATA chunks, corresponding to sstat_unackdata.
      * @return This builder.
      */
    public Builder clearSctpUnackData() {
      sctpUnackData = null;
      fieldSetFlags()[75] = false;
      return this;
    }

    @Override
    public PcTransportReport build() {
      try {
        PcTransportReport record = new PcTransportReport();
        record.serviceId = fieldSetFlags()[0] ? this.serviceId : (String) defaultValue(fields()[0]);
        record.serviceName = fieldSetFlags()[1] ? this.serviceName : (String) defaultValue(fields()[1]);
        record.mediaUnitId = fieldSetFlags()[2] ? this.mediaUnitId : (String) defaultValue(fields()[2]);
        record.marker = fieldSetFlags()[3] ? this.marker : (String) defaultValue(fields()[3]);
        record.timestamp = fieldSetFlags()[4] ? this.timestamp : (Long) defaultValue(fields()[4]);
        record.callId = fieldSetFlags()[5] ? this.callId : (String) defaultValue(fields()[5]);
        record.roomId = fieldSetFlags()[6] ? this.roomId : (String) defaultValue(fields()[6]);
        record.clientId = fieldSetFlags()[7] ? this.clientId : (String) defaultValue(fields()[7]);
        record.userId = fieldSetFlags()[8] ? this.userId : (String) defaultValue(fields()[8]);
        record.peerConnectionId = fieldSetFlags()[9] ? this.peerConnectionId : (String) defaultValue(fields()[9]);
        record.label = fieldSetFlags()[10] ? this.label : (String) defaultValue(fields()[10]);
        record.packetsSent = fieldSetFlags()[11] ? this.packetsSent : (Integer) defaultValue(fields()[11]);
        record.packetsReceived = fieldSetFlags()[12] ? this.packetsReceived : (Integer) defaultValue(fields()[12]);
        record.bytesSent = fieldSetFlags()[13] ? this.bytesSent : (Integer) defaultValue(fields()[13]);
        record.bytesReceived = fieldSetFlags()[14] ? this.bytesReceived : (Integer) defaultValue(fields()[14]);
        record.iceRole = fieldSetFlags()[15] ? this.iceRole : (String) defaultValue(fields()[15]);
        record.iceLocalUsernameFragment = fieldSetFlags()[16] ? this.iceLocalUsernameFragment : (String) defaultValue(fields()[16]);
        record.dtlsState = fieldSetFlags()[17] ? this.dtlsState : (String) defaultValue(fields()[17]);
        record.iceTransportState = fieldSetFlags()[18] ? this.iceTransportState : (String) defaultValue(fields()[18]);
        record.tlsVersion = fieldSetFlags()[19] ? this.tlsVersion : (String) defaultValue(fields()[19]);
        record.dtlsCipher = fieldSetFlags()[20] ? this.dtlsCipher : (String) defaultValue(fields()[20]);
        record.srtpCipher = fieldSetFlags()[21] ? this.srtpCipher : (String) defaultValue(fields()[21]);
        record.tlsGroup = fieldSetFlags()[22] ? this.tlsGroup : (String) defaultValue(fields()[22]);
        record.selectedCandidatePairChanges = fieldSetFlags()[23] ? this.selectedCandidatePairChanges : (Integer) defaultValue(fields()[23]);
        record.localFingerprint = fieldSetFlags()[24] ? this.localFingerprint : (String) defaultValue(fields()[24]);
        record.localFingerprintAlgorithm = fieldSetFlags()[25] ? this.localFingerprintAlgorithm : (String) defaultValue(fields()[25]);
        record.localBase64Certificate = fieldSetFlags()[26] ? this.localBase64Certificate : (String) defaultValue(fields()[26]);
        record.remoteFingerprint = fieldSetFlags()[27] ? this.remoteFingerprint : (String) defaultValue(fields()[27]);
        record.remoteFingerprintAlgorithm = fieldSetFlags()[28] ? this.remoteFingerprintAlgorithm : (String) defaultValue(fields()[28]);
        record.remoteBase64Certificate = fieldSetFlags()[29] ? this.remoteBase64Certificate : (String) defaultValue(fields()[29]);
        record.localAddress = fieldSetFlags()[30] ? this.localAddress : (String) defaultValue(fields()[30]);
        record.localPort = fieldSetFlags()[31] ? this.localPort : (Integer) defaultValue(fields()[31]);
        record.localProtocol = fieldSetFlags()[32] ? this.localProtocol : (String) defaultValue(fields()[32]);
        record.localCandidateType = fieldSetFlags()[33] ? this.localCandidateType : (String) defaultValue(fields()[33]);
        record.localCandidatePriority = fieldSetFlags()[34] ? this.localCandidatePriority : (Integer) defaultValue(fields()[34]);
        record.localCandidateICEServerUrl = fieldSetFlags()[35] ? this.localCandidateICEServerUrl : (String) defaultValue(fields()[35]);
        record.localCandidateRelayProtocol = fieldSetFlags()[36] ? this.localCandidateRelayProtocol : (String) defaultValue(fields()[36]);
        record.remoteAddress = fieldSetFlags()[37] ? this.remoteAddress : (String) defaultValue(fields()[37]);
        record.remotePort = fieldSetFlags()[38] ? this.remotePort : (Integer) defaultValue(fields()[38]);
        record.remoteProtocol = fieldSetFlags()[39] ? this.remoteProtocol : (String) defaultValue(fields()[39]);
        record.remoteCandidateType = fieldSetFlags()[40] ? this.remoteCandidateType : (String) defaultValue(fields()[40]);
        record.remoteCandidatePriority = fieldSetFlags()[41] ? this.remoteCandidatePriority : (Integer) defaultValue(fields()[41]);
        record.remoteCandidateICEServerUrl = fieldSetFlags()[42] ? this.remoteCandidateICEServerUrl : (String) defaultValue(fields()[42]);
        record.remoteCandidateRelayProtocol = fieldSetFlags()[43] ? this.remoteCandidateRelayProtocol : (String) defaultValue(fields()[43]);
        record.iceCandidatePairState = fieldSetFlags()[44] ? this.iceCandidatePairState : (String) defaultValue(fields()[44]);
        record.iceCandidatePairPacketsSent = fieldSetFlags()[45] ? this.iceCandidatePairPacketsSent : (Integer) defaultValue(fields()[45]);
        record.iceCandidatePairPacketsReceived = fieldSetFlags()[46] ? this.iceCandidatePairPacketsReceived : (Integer) defaultValue(fields()[46]);
        record.iceCandidatePairBytesSent = fieldSetFlags()[47] ? this.iceCandidatePairBytesSent : (Long) defaultValue(fields()[47]);
        record.iceCandidatePairBytesReceived = fieldSetFlags()[48] ? this.iceCandidatePairBytesReceived : (Long) defaultValue(fields()[48]);
        record.iceCandidatePairLastPacketSentTimestamp = fieldSetFlags()[49] ? this.iceCandidatePairLastPacketSentTimestamp : (Long) defaultValue(fields()[49]);
        record.iceCandidatePairLastPacketReceivedTimestamp = fieldSetFlags()[50] ? this.iceCandidatePairLastPacketReceivedTimestamp : (Long) defaultValue(fields()[50]);
        record.iceCandidatePairFirstRequestTimestamp = fieldSetFlags()[51] ? this.iceCandidatePairFirstRequestTimestamp : (Long) defaultValue(fields()[51]);
        record.iceCandidatePairLastRequestTimestamp = fieldSetFlags()[52] ? this.iceCandidatePairLastRequestTimestamp : (Long) defaultValue(fields()[52]);
        record.iceCandidatePairLastResponseTimestamp = fieldSetFlags()[53] ? this.iceCandidatePairLastResponseTimestamp : (Long) defaultValue(fields()[53]);
        record.stunProvidedTotalRoundTripTime = fieldSetFlags()[54] ? this.stunProvidedTotalRoundTripTime : (Double) defaultValue(fields()[54]);
        record.stunProvidedCurrentRoundTripTime = fieldSetFlags()[55] ? this.stunProvidedCurrentRoundTripTime : (Double) defaultValue(fields()[55]);
        record.availableOutgoingBitrate = fieldSetFlags()[56] ? this.availableOutgoingBitrate : (Double) defaultValue(fields()[56]);
        record.availableIncomingBitrate = fieldSetFlags()[57] ? this.availableIncomingBitrate : (Double) defaultValue(fields()[57]);
        record.circuitBreakerTriggerCount = fieldSetFlags()[58] ? this.circuitBreakerTriggerCount : (Integer) defaultValue(fields()[58]);
        record.candidatePairRequestsReceived = fieldSetFlags()[59] ? this.candidatePairRequestsReceived : (Integer) defaultValue(fields()[59]);
        record.candidatePairRequestsSent = fieldSetFlags()[60] ? this.candidatePairRequestsSent : (Integer) defaultValue(fields()[60]);
        record.candidatePairResponsesReceived = fieldSetFlags()[61] ? this.candidatePairResponsesReceived : (Integer) defaultValue(fields()[61]);
        record.candidatePairResponsesSent = fieldSetFlags()[62] ? this.candidatePairResponsesSent : (Integer) defaultValue(fields()[62]);
        record.candidatePairRetransmissionReceived = fieldSetFlags()[63] ? this.candidatePairRetransmissionReceived : (Integer) defaultValue(fields()[63]);
        record.candidatePairRetransmissionSent = fieldSetFlags()[64] ? this.candidatePairRetransmissionSent : (Integer) defaultValue(fields()[64]);
        record.candidatePairConsentRequestsSent = fieldSetFlags()[65] ? this.candidatePairConsentRequestsSent : (Integer) defaultValue(fields()[65]);
        record.candidatePairConsentExpiredTimestamp = fieldSetFlags()[66] ? this.candidatePairConsentExpiredTimestamp : (Long) defaultValue(fields()[66]);
        record.candidatePairBytesDiscardedOnSend = fieldSetFlags()[67] ? this.candidatePairBytesDiscardedOnSend : (Long) defaultValue(fields()[67]);
        record.candidatePairRequestBytesSent = fieldSetFlags()[68] ? this.candidatePairRequestBytesSent : (Long) defaultValue(fields()[68]);
        record.candidatePairConsentRequestBytesSent = fieldSetFlags()[69] ? this.candidatePairConsentRequestBytesSent : (Long) defaultValue(fields()[69]);
        record.candidatePairResponseBytesSent = fieldSetFlags()[70] ? this.candidatePairResponseBytesSent : (Integer) defaultValue(fields()[70]);
        record.sctpSmoothedRoundTripTime = fieldSetFlags()[71] ? this.sctpSmoothedRoundTripTime : (Double) defaultValue(fields()[71]);
        record.sctpCongestionWindow = fieldSetFlags()[72] ? this.sctpCongestionWindow : (Double) defaultValue(fields()[72]);
        record.sctpReceiverWindow = fieldSetFlags()[73] ? this.sctpReceiverWindow : (Double) defaultValue(fields()[73]);
        record.sctpMtu = fieldSetFlags()[74] ? this.sctpMtu : (Integer) defaultValue(fields()[74]);
        record.sctpUnackData = fieldSetFlags()[75] ? this.sctpUnackData : (Integer) defaultValue(fields()[75]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
