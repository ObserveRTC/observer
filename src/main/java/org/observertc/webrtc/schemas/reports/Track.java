/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.observertc.webrtc.schemas.reports;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

/** Track payloadContains information about the Track the Peer Connection uses */
@org.apache.avro.specific.AvroGenerated
public class Track extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3702266432314906121L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Track\",\"namespace\":\"org.observertc.webrtc.schemas.reports\",\"doc\":\"Track payloadContains information about the Track the Peer Connection uses\",\"fields\":[{\"name\":\"mediaUnitId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"callName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"userId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"browserId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"peerConnectionUUID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"trackId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"concealedSamples\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"concealmentEvents\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"detached\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"ended\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"framesDecoded\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"framesDropped\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"framesSent\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"framesReceived\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"hugeFramesSent\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"frameWidth\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"frameHeight\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"insertedSamplesForDeceleration\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"jitterBufferDelay\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"jitterBufferEmittedCount\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"mediaSourceID\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"mediaType\",\"type\":{\"type\":\"enum\",\"name\":\"MediaType\",\"doc\":\"State of the Media\",\"symbols\":[\"AUDIO\",\"VIDEO\",\"UNKNOWN\",\"NULL\"]},\"default\":\"UNKNOWN\"},{\"name\":\"remoteSource\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"removedSamplesForAcceleration\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"samplesDuration\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"silentConcealedSamples\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"totalSamplesReceived\",\"type\":[\"null\",\"int\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Track> ENCODER =
      new BinaryMessageEncoder<Track>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Track> DECODER =
      new BinaryMessageDecoder<Track>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Track> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Track> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Track> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Track>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Track to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Track from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Track instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Track fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private String mediaUnitId;
   private String callName;
   private String userId;
   private String browserId;
   private String peerConnectionUUID;
   private String trackId;
   private Integer concealedSamples;
   private Integer concealmentEvents;
   private Boolean detached;
   private Boolean ended;
   private Integer framesDecoded;
   private Integer framesDropped;
   private Integer framesSent;
   private Integer framesReceived;
   private Integer hugeFramesSent;
   private Integer frameWidth;
   private Integer frameHeight;
   private Integer insertedSamplesForDeceleration;
   private Double jitterBufferDelay;
   private Integer jitterBufferEmittedCount;
   private String mediaSourceID;
   private MediaType mediaType;
   private Boolean remoteSource;
   private Integer removedSamplesForAcceleration;
   private Double samplesDuration;
   private Integer silentConcealedSamples;
   private Integer totalSamplesReceived;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Track() {}

  /**
   * All-args constructor.
   * @param mediaUnitId The new value for mediaUnitId
   * @param callName The new value for callName
   * @param userId The new value for userId
   * @param browserId The new value for browserId
   * @param peerConnectionUUID The new value for peerConnectionUUID
   * @param trackId The new value for trackId
   * @param concealedSamples The new value for concealedSamples
   * @param concealmentEvents The new value for concealmentEvents
   * @param detached The new value for detached
   * @param ended The new value for ended
   * @param framesDecoded The new value for framesDecoded
   * @param framesDropped The new value for framesDropped
   * @param framesSent The new value for framesSent
   * @param framesReceived The new value for framesReceived
   * @param hugeFramesSent The new value for hugeFramesSent
   * @param frameWidth The new value for frameWidth
   * @param frameHeight The new value for frameHeight
   * @param insertedSamplesForDeceleration The new value for insertedSamplesForDeceleration
   * @param jitterBufferDelay The new value for jitterBufferDelay
   * @param jitterBufferEmittedCount The new value for jitterBufferEmittedCount
   * @param mediaSourceID The new value for mediaSourceID
   * @param mediaType The new value for mediaType
   * @param remoteSource The new value for remoteSource
   * @param removedSamplesForAcceleration The new value for removedSamplesForAcceleration
   * @param samplesDuration The new value for samplesDuration
   * @param silentConcealedSamples The new value for silentConcealedSamples
   * @param totalSamplesReceived The new value for totalSamplesReceived
   */
  public Track(String mediaUnitId, String callName, String userId, String browserId, String peerConnectionUUID, String trackId, Integer concealedSamples, Integer concealmentEvents, Boolean detached, Boolean ended, Integer framesDecoded, Integer framesDropped, Integer framesSent, Integer framesReceived, Integer hugeFramesSent, Integer frameWidth, Integer frameHeight, Integer insertedSamplesForDeceleration, Double jitterBufferDelay, Integer jitterBufferEmittedCount, String mediaSourceID, MediaType mediaType, Boolean remoteSource, Integer removedSamplesForAcceleration, Double samplesDuration, Integer silentConcealedSamples, Integer totalSamplesReceived) {
    this.mediaUnitId = mediaUnitId;
    this.callName = callName;
    this.userId = userId;
    this.browserId = browserId;
    this.peerConnectionUUID = peerConnectionUUID;
    this.trackId = trackId;
    this.concealedSamples = concealedSamples;
    this.concealmentEvents = concealmentEvents;
    this.detached = detached;
    this.ended = ended;
    this.framesDecoded = framesDecoded;
    this.framesDropped = framesDropped;
    this.framesSent = framesSent;
    this.framesReceived = framesReceived;
    this.hugeFramesSent = hugeFramesSent;
    this.frameWidth = frameWidth;
    this.frameHeight = frameHeight;
    this.insertedSamplesForDeceleration = insertedSamplesForDeceleration;
    this.jitterBufferDelay = jitterBufferDelay;
    this.jitterBufferEmittedCount = jitterBufferEmittedCount;
    this.mediaSourceID = mediaSourceID;
    this.mediaType = mediaType;
    this.remoteSource = remoteSource;
    this.removedSamplesForAcceleration = removedSamplesForAcceleration;
    this.samplesDuration = samplesDuration;
    this.silentConcealedSamples = silentConcealedSamples;
    this.totalSamplesReceived = totalSamplesReceived;
  }

  public SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return mediaUnitId;
    case 1: return callName;
    case 2: return userId;
    case 3: return browserId;
    case 4: return peerConnectionUUID;
    case 5: return trackId;
    case 6: return concealedSamples;
    case 7: return concealmentEvents;
    case 8: return detached;
    case 9: return ended;
    case 10: return framesDecoded;
    case 11: return framesDropped;
    case 12: return framesSent;
    case 13: return framesReceived;
    case 14: return hugeFramesSent;
    case 15: return frameWidth;
    case 16: return frameHeight;
    case 17: return insertedSamplesForDeceleration;
    case 18: return jitterBufferDelay;
    case 19: return jitterBufferEmittedCount;
    case 20: return mediaSourceID;
    case 21: return mediaType;
    case 22: return remoteSource;
    case 23: return removedSamplesForAcceleration;
    case 24: return samplesDuration;
    case 25: return silentConcealedSamples;
    case 26: return totalSamplesReceived;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: mediaUnitId = value$ != null ? value$.toString() : null; break;
    case 1: callName = value$ != null ? value$.toString() : null; break;
    case 2: userId = value$ != null ? value$.toString() : null; break;
    case 3: browserId = value$ != null ? value$.toString() : null; break;
    case 4: peerConnectionUUID = value$ != null ? value$.toString() : null; break;
    case 5: trackId = value$ != null ? value$.toString() : null; break;
    case 6: concealedSamples = (Integer)value$; break;
    case 7: concealmentEvents = (Integer)value$; break;
    case 8: detached = (Boolean)value$; break;
    case 9: ended = (Boolean)value$; break;
    case 10: framesDecoded = (Integer)value$; break;
    case 11: framesDropped = (Integer)value$; break;
    case 12: framesSent = (Integer)value$; break;
    case 13: framesReceived = (Integer)value$; break;
    case 14: hugeFramesSent = (Integer)value$; break;
    case 15: frameWidth = (Integer)value$; break;
    case 16: frameHeight = (Integer)value$; break;
    case 17: insertedSamplesForDeceleration = (Integer)value$; break;
    case 18: jitterBufferDelay = (Double)value$; break;
    case 19: jitterBufferEmittedCount = (Integer)value$; break;
    case 20: mediaSourceID = value$ != null ? value$.toString() : null; break;
    case 21: mediaType = (MediaType)value$; break;
    case 22: remoteSource = (Boolean)value$; break;
    case 23: removedSamplesForAcceleration = (Integer)value$; break;
    case 24: samplesDuration = (Double)value$; break;
    case 25: silentConcealedSamples = (Integer)value$; break;
    case 26: totalSamplesReceived = (Integer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'mediaUnitId' field.
   * @return The value of the 'mediaUnitId' field.
   */
  public String getMediaUnitId() {
    return mediaUnitId;
  }



  /**
   * Gets the value of the 'callName' field.
   * @return The value of the 'callName' field.
   */
  public String getCallName() {
    return callName;
  }



  /**
   * Gets the value of the 'userId' field.
   * @return The value of the 'userId' field.
   */
  public String getUserId() {
    return userId;
  }



  /**
   * Gets the value of the 'browserId' field.
   * @return The value of the 'browserId' field.
   */
  public String getBrowserId() {
    return browserId;
  }



  /**
   * Gets the value of the 'peerConnectionUUID' field.
   * @return The value of the 'peerConnectionUUID' field.
   */
  public String getPeerConnectionUUID() {
    return peerConnectionUUID;
  }



  /**
   * Gets the value of the 'trackId' field.
   * @return The value of the 'trackId' field.
   */
  public String getTrackId() {
    return trackId;
  }



  /**
   * Gets the value of the 'concealedSamples' field.
   * @return The value of the 'concealedSamples' field.
   */
  public Integer getConcealedSamples() {
    return concealedSamples;
  }



  /**
   * Gets the value of the 'concealmentEvents' field.
   * @return The value of the 'concealmentEvents' field.
   */
  public Integer getConcealmentEvents() {
    return concealmentEvents;
  }



  /**
   * Gets the value of the 'detached' field.
   * @return The value of the 'detached' field.
   */
  public Boolean getDetached() {
    return detached;
  }



  /**
   * Gets the value of the 'ended' field.
   * @return The value of the 'ended' field.
   */
  public Boolean getEnded() {
    return ended;
  }



  /**
   * Gets the value of the 'framesDecoded' field.
   * @return The value of the 'framesDecoded' field.
   */
  public Integer getFramesDecoded() {
    return framesDecoded;
  }



  /**
   * Gets the value of the 'framesDropped' field.
   * @return The value of the 'framesDropped' field.
   */
  public Integer getFramesDropped() {
    return framesDropped;
  }



  /**
   * Gets the value of the 'framesSent' field.
   * @return The value of the 'framesSent' field.
   */
  public Integer getFramesSent() {
    return framesSent;
  }



  /**
   * Gets the value of the 'framesReceived' field.
   * @return The value of the 'framesReceived' field.
   */
  public Integer getFramesReceived() {
    return framesReceived;
  }



  /**
   * Gets the value of the 'hugeFramesSent' field.
   * @return The value of the 'hugeFramesSent' field.
   */
  public Integer getHugeFramesSent() {
    return hugeFramesSent;
  }



  /**
   * Gets the value of the 'frameWidth' field.
   * @return The value of the 'frameWidth' field.
   */
  public Integer getFrameWidth() {
    return frameWidth;
  }



  /**
   * Gets the value of the 'frameHeight' field.
   * @return The value of the 'frameHeight' field.
   */
  public Integer getFrameHeight() {
    return frameHeight;
  }



  /**
   * Gets the value of the 'insertedSamplesForDeceleration' field.
   * @return The value of the 'insertedSamplesForDeceleration' field.
   */
  public Integer getInsertedSamplesForDeceleration() {
    return insertedSamplesForDeceleration;
  }



  /**
   * Gets the value of the 'jitterBufferDelay' field.
   * @return The value of the 'jitterBufferDelay' field.
   */
  public Double getJitterBufferDelay() {
    return jitterBufferDelay;
  }



  /**
   * Gets the value of the 'jitterBufferEmittedCount' field.
   * @return The value of the 'jitterBufferEmittedCount' field.
   */
  public Integer getJitterBufferEmittedCount() {
    return jitterBufferEmittedCount;
  }



  /**
   * Gets the value of the 'mediaSourceID' field.
   * @return The value of the 'mediaSourceID' field.
   */
  public String getMediaSourceID() {
    return mediaSourceID;
  }



  /**
   * Gets the value of the 'mediaType' field.
   * @return The value of the 'mediaType' field.
   */
  public MediaType getMediaType() {
    return mediaType;
  }



  /**
   * Gets the value of the 'remoteSource' field.
   * @return The value of the 'remoteSource' field.
   */
  public Boolean getRemoteSource() {
    return remoteSource;
  }



  /**
   * Gets the value of the 'removedSamplesForAcceleration' field.
   * @return The value of the 'removedSamplesForAcceleration' field.
   */
  public Integer getRemovedSamplesForAcceleration() {
    return removedSamplesForAcceleration;
  }



  /**
   * Gets the value of the 'samplesDuration' field.
   * @return The value of the 'samplesDuration' field.
   */
  public Double getSamplesDuration() {
    return samplesDuration;
  }



  /**
   * Gets the value of the 'silentConcealedSamples' field.
   * @return The value of the 'silentConcealedSamples' field.
   */
  public Integer getSilentConcealedSamples() {
    return silentConcealedSamples;
  }



  /**
   * Gets the value of the 'totalSamplesReceived' field.
   * @return The value of the 'totalSamplesReceived' field.
   */
  public Integer getTotalSamplesReceived() {
    return totalSamplesReceived;
  }



  /**
   * Creates a new Track RecordBuilder.
   * @return A new Track RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new Track RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Track RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * Creates a new Track RecordBuilder by copying an existing Track instance.
   * @param other The existing instance to copy.
   * @return A new Track RecordBuilder
   */
  public static Builder newBuilder(Track other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * RecordBuilder for Track instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Track>
    implements org.apache.avro.data.RecordBuilder<Track> {

    private String mediaUnitId;
    private String callName;
    private String userId;
    private String browserId;
    private String peerConnectionUUID;
    private String trackId;
    private Integer concealedSamples;
    private Integer concealmentEvents;
    private Boolean detached;
    private Boolean ended;
    private Integer framesDecoded;
    private Integer framesDropped;
    private Integer framesSent;
    private Integer framesReceived;
    private Integer hugeFramesSent;
    private Integer frameWidth;
    private Integer frameHeight;
    private Integer insertedSamplesForDeceleration;
    private Double jitterBufferDelay;
    private Integer jitterBufferEmittedCount;
    private String mediaSourceID;
    private MediaType mediaType;
    private Boolean remoteSource;
    private Integer removedSamplesForAcceleration;
    private Double samplesDuration;
    private Integer silentConcealedSamples;
    private Integer totalSamplesReceived;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.mediaUnitId)) {
        this.mediaUnitId = data().deepCopy(fields()[0].schema(), other.mediaUnitId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.callName)) {
        this.callName = data().deepCopy(fields()[1].schema(), other.callName);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.userId)) {
        this.userId = data().deepCopy(fields()[2].schema(), other.userId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.browserId)) {
        this.browserId = data().deepCopy(fields()[3].schema(), other.browserId);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.peerConnectionUUID)) {
        this.peerConnectionUUID = data().deepCopy(fields()[4].schema(), other.peerConnectionUUID);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.trackId)) {
        this.trackId = data().deepCopy(fields()[5].schema(), other.trackId);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.concealedSamples)) {
        this.concealedSamples = data().deepCopy(fields()[6].schema(), other.concealedSamples);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.concealmentEvents)) {
        this.concealmentEvents = data().deepCopy(fields()[7].schema(), other.concealmentEvents);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.detached)) {
        this.detached = data().deepCopy(fields()[8].schema(), other.detached);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.ended)) {
        this.ended = data().deepCopy(fields()[9].schema(), other.ended);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.framesDecoded)) {
        this.framesDecoded = data().deepCopy(fields()[10].schema(), other.framesDecoded);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.framesDropped)) {
        this.framesDropped = data().deepCopy(fields()[11].schema(), other.framesDropped);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.framesSent)) {
        this.framesSent = data().deepCopy(fields()[12].schema(), other.framesSent);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.framesReceived)) {
        this.framesReceived = data().deepCopy(fields()[13].schema(), other.framesReceived);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.hugeFramesSent)) {
        this.hugeFramesSent = data().deepCopy(fields()[14].schema(), other.hugeFramesSent);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
      if (isValidValue(fields()[15], other.frameWidth)) {
        this.frameWidth = data().deepCopy(fields()[15].schema(), other.frameWidth);
        fieldSetFlags()[15] = other.fieldSetFlags()[15];
      }
      if (isValidValue(fields()[16], other.frameHeight)) {
        this.frameHeight = data().deepCopy(fields()[16].schema(), other.frameHeight);
        fieldSetFlags()[16] = other.fieldSetFlags()[16];
      }
      if (isValidValue(fields()[17], other.insertedSamplesForDeceleration)) {
        this.insertedSamplesForDeceleration = data().deepCopy(fields()[17].schema(), other.insertedSamplesForDeceleration);
        fieldSetFlags()[17] = other.fieldSetFlags()[17];
      }
      if (isValidValue(fields()[18], other.jitterBufferDelay)) {
        this.jitterBufferDelay = data().deepCopy(fields()[18].schema(), other.jitterBufferDelay);
        fieldSetFlags()[18] = other.fieldSetFlags()[18];
      }
      if (isValidValue(fields()[19], other.jitterBufferEmittedCount)) {
        this.jitterBufferEmittedCount = data().deepCopy(fields()[19].schema(), other.jitterBufferEmittedCount);
        fieldSetFlags()[19] = other.fieldSetFlags()[19];
      }
      if (isValidValue(fields()[20], other.mediaSourceID)) {
        this.mediaSourceID = data().deepCopy(fields()[20].schema(), other.mediaSourceID);
        fieldSetFlags()[20] = other.fieldSetFlags()[20];
      }
      if (isValidValue(fields()[21], other.mediaType)) {
        this.mediaType = data().deepCopy(fields()[21].schema(), other.mediaType);
        fieldSetFlags()[21] = other.fieldSetFlags()[21];
      }
      if (isValidValue(fields()[22], other.remoteSource)) {
        this.remoteSource = data().deepCopy(fields()[22].schema(), other.remoteSource);
        fieldSetFlags()[22] = other.fieldSetFlags()[22];
      }
      if (isValidValue(fields()[23], other.removedSamplesForAcceleration)) {
        this.removedSamplesForAcceleration = data().deepCopy(fields()[23].schema(), other.removedSamplesForAcceleration);
        fieldSetFlags()[23] = other.fieldSetFlags()[23];
      }
      if (isValidValue(fields()[24], other.samplesDuration)) {
        this.samplesDuration = data().deepCopy(fields()[24].schema(), other.samplesDuration);
        fieldSetFlags()[24] = other.fieldSetFlags()[24];
      }
      if (isValidValue(fields()[25], other.silentConcealedSamples)) {
        this.silentConcealedSamples = data().deepCopy(fields()[25].schema(), other.silentConcealedSamples);
        fieldSetFlags()[25] = other.fieldSetFlags()[25];
      }
      if (isValidValue(fields()[26], other.totalSamplesReceived)) {
        this.totalSamplesReceived = data().deepCopy(fields()[26].schema(), other.totalSamplesReceived);
        fieldSetFlags()[26] = other.fieldSetFlags()[26];
      }
    }

    /**
     * Creates a Builder by copying an existing Track instance
     * @param other The existing instance to copy.
     */
    private Builder(Track other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.mediaUnitId)) {
        this.mediaUnitId = data().deepCopy(fields()[0].schema(), other.mediaUnitId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.callName)) {
        this.callName = data().deepCopy(fields()[1].schema(), other.callName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.userId)) {
        this.userId = data().deepCopy(fields()[2].schema(), other.userId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.browserId)) {
        this.browserId = data().deepCopy(fields()[3].schema(), other.browserId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.peerConnectionUUID)) {
        this.peerConnectionUUID = data().deepCopy(fields()[4].schema(), other.peerConnectionUUID);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.trackId)) {
        this.trackId = data().deepCopy(fields()[5].schema(), other.trackId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.concealedSamples)) {
        this.concealedSamples = data().deepCopy(fields()[6].schema(), other.concealedSamples);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.concealmentEvents)) {
        this.concealmentEvents = data().deepCopy(fields()[7].schema(), other.concealmentEvents);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.detached)) {
        this.detached = data().deepCopy(fields()[8].schema(), other.detached);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.ended)) {
        this.ended = data().deepCopy(fields()[9].schema(), other.ended);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.framesDecoded)) {
        this.framesDecoded = data().deepCopy(fields()[10].schema(), other.framesDecoded);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.framesDropped)) {
        this.framesDropped = data().deepCopy(fields()[11].schema(), other.framesDropped);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.framesSent)) {
        this.framesSent = data().deepCopy(fields()[12].schema(), other.framesSent);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.framesReceived)) {
        this.framesReceived = data().deepCopy(fields()[13].schema(), other.framesReceived);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.hugeFramesSent)) {
        this.hugeFramesSent = data().deepCopy(fields()[14].schema(), other.hugeFramesSent);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.frameWidth)) {
        this.frameWidth = data().deepCopy(fields()[15].schema(), other.frameWidth);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.frameHeight)) {
        this.frameHeight = data().deepCopy(fields()[16].schema(), other.frameHeight);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.insertedSamplesForDeceleration)) {
        this.insertedSamplesForDeceleration = data().deepCopy(fields()[17].schema(), other.insertedSamplesForDeceleration);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.jitterBufferDelay)) {
        this.jitterBufferDelay = data().deepCopy(fields()[18].schema(), other.jitterBufferDelay);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.jitterBufferEmittedCount)) {
        this.jitterBufferEmittedCount = data().deepCopy(fields()[19].schema(), other.jitterBufferEmittedCount);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.mediaSourceID)) {
        this.mediaSourceID = data().deepCopy(fields()[20].schema(), other.mediaSourceID);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.mediaType)) {
        this.mediaType = data().deepCopy(fields()[21].schema(), other.mediaType);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.remoteSource)) {
        this.remoteSource = data().deepCopy(fields()[22].schema(), other.remoteSource);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.removedSamplesForAcceleration)) {
        this.removedSamplesForAcceleration = data().deepCopy(fields()[23].schema(), other.removedSamplesForAcceleration);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.samplesDuration)) {
        this.samplesDuration = data().deepCopy(fields()[24].schema(), other.samplesDuration);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.silentConcealedSamples)) {
        this.silentConcealedSamples = data().deepCopy(fields()[25].schema(), other.silentConcealedSamples);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.totalSamplesReceived)) {
        this.totalSamplesReceived = data().deepCopy(fields()[26].schema(), other.totalSamplesReceived);
        fieldSetFlags()[26] = true;
      }
    }

    /**
      * Gets the value of the 'mediaUnitId' field.
      * @return The value.
      */
    public String getMediaUnitId() {
      return mediaUnitId;
    }


    /**
      * Sets the value of the 'mediaUnitId' field.
      * @param value The value of 'mediaUnitId'.
      * @return This builder.
      */
    public Builder setMediaUnitId(String value) {
      validate(fields()[0], value);
      this.mediaUnitId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'mediaUnitId' field has been set.
      * @return True if the 'mediaUnitId' field has been set, false otherwise.
      */
    public boolean hasMediaUnitId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'mediaUnitId' field.
      * @return This builder.
      */
    public Builder clearMediaUnitId() {
      mediaUnitId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'callName' field.
      * @return The value.
      */
    public String getCallName() {
      return callName;
    }


    /**
      * Sets the value of the 'callName' field.
      * @param value The value of 'callName'.
      * @return This builder.
      */
    public Builder setCallName(String value) {
      validate(fields()[1], value);
      this.callName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'callName' field has been set.
      * @return True if the 'callName' field has been set, false otherwise.
      */
    public boolean hasCallName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'callName' field.
      * @return This builder.
      */
    public Builder clearCallName() {
      callName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'userId' field.
      * @return The value.
      */
    public String getUserId() {
      return userId;
    }


    /**
      * Sets the value of the 'userId' field.
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public Builder setUserId(String value) {
      validate(fields()[2], value);
      this.userId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'userId' field.
      * @return This builder.
      */
    public Builder clearUserId() {
      userId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'browserId' field.
      * @return The value.
      */
    public String getBrowserId() {
      return browserId;
    }


    /**
      * Sets the value of the 'browserId' field.
      * @param value The value of 'browserId'.
      * @return This builder.
      */
    public Builder setBrowserId(String value) {
      validate(fields()[3], value);
      this.browserId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'browserId' field has been set.
      * @return True if the 'browserId' field has been set, false otherwise.
      */
    public boolean hasBrowserId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'browserId' field.
      * @return This builder.
      */
    public Builder clearBrowserId() {
      browserId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'peerConnectionUUID' field.
      * @return The value.
      */
    public String getPeerConnectionUUID() {
      return peerConnectionUUID;
    }


    /**
      * Sets the value of the 'peerConnectionUUID' field.
      * @param value The value of 'peerConnectionUUID'.
      * @return This builder.
      */
    public Builder setPeerConnectionUUID(String value) {
      validate(fields()[4], value);
      this.peerConnectionUUID = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'peerConnectionUUID' field has been set.
      * @return True if the 'peerConnectionUUID' field has been set, false otherwise.
      */
    public boolean hasPeerConnectionUUID() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'peerConnectionUUID' field.
      * @return This builder.
      */
    public Builder clearPeerConnectionUUID() {
      peerConnectionUUID = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'trackId' field.
      * @return The value.
      */
    public String getTrackId() {
      return trackId;
    }


    /**
      * Sets the value of the 'trackId' field.
      * @param value The value of 'trackId'.
      * @return This builder.
      */
    public Builder setTrackId(String value) {
      validate(fields()[5], value);
      this.trackId = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'trackId' field has been set.
      * @return True if the 'trackId' field has been set, false otherwise.
      */
    public boolean hasTrackId() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'trackId' field.
      * @return This builder.
      */
    public Builder clearTrackId() {
      trackId = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'concealedSamples' field.
      * @return The value.
      */
    public Integer getConcealedSamples() {
      return concealedSamples;
    }


    /**
      * Sets the value of the 'concealedSamples' field.
      * @param value The value of 'concealedSamples'.
      * @return This builder.
      */
    public Builder setConcealedSamples(Integer value) {
      validate(fields()[6], value);
      this.concealedSamples = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'concealedSamples' field has been set.
      * @return True if the 'concealedSamples' field has been set, false otherwise.
      */
    public boolean hasConcealedSamples() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'concealedSamples' field.
      * @return This builder.
      */
    public Builder clearConcealedSamples() {
      concealedSamples = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'concealmentEvents' field.
      * @return The value.
      */
    public Integer getConcealmentEvents() {
      return concealmentEvents;
    }


    /**
      * Sets the value of the 'concealmentEvents' field.
      * @param value The value of 'concealmentEvents'.
      * @return This builder.
      */
    public Builder setConcealmentEvents(Integer value) {
      validate(fields()[7], value);
      this.concealmentEvents = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'concealmentEvents' field has been set.
      * @return True if the 'concealmentEvents' field has been set, false otherwise.
      */
    public boolean hasConcealmentEvents() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'concealmentEvents' field.
      * @return This builder.
      */
    public Builder clearConcealmentEvents() {
      concealmentEvents = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'detached' field.
      * @return The value.
      */
    public Boolean getDetached() {
      return detached;
    }


    /**
      * Sets the value of the 'detached' field.
      * @param value The value of 'detached'.
      * @return This builder.
      */
    public Builder setDetached(Boolean value) {
      validate(fields()[8], value);
      this.detached = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'detached' field has been set.
      * @return True if the 'detached' field has been set, false otherwise.
      */
    public boolean hasDetached() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'detached' field.
      * @return This builder.
      */
    public Builder clearDetached() {
      detached = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'ended' field.
      * @return The value.
      */
    public Boolean getEnded() {
      return ended;
    }


    /**
      * Sets the value of the 'ended' field.
      * @param value The value of 'ended'.
      * @return This builder.
      */
    public Builder setEnded(Boolean value) {
      validate(fields()[9], value);
      this.ended = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'ended' field has been set.
      * @return True if the 'ended' field has been set, false otherwise.
      */
    public boolean hasEnded() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'ended' field.
      * @return This builder.
      */
    public Builder clearEnded() {
      ended = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'framesDecoded' field.
      * @return The value.
      */
    public Integer getFramesDecoded() {
      return framesDecoded;
    }


    /**
      * Sets the value of the 'framesDecoded' field.
      * @param value The value of 'framesDecoded'.
      * @return This builder.
      */
    public Builder setFramesDecoded(Integer value) {
      validate(fields()[10], value);
      this.framesDecoded = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'framesDecoded' field has been set.
      * @return True if the 'framesDecoded' field has been set, false otherwise.
      */
    public boolean hasFramesDecoded() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'framesDecoded' field.
      * @return This builder.
      */
    public Builder clearFramesDecoded() {
      framesDecoded = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'framesDropped' field.
      * @return The value.
      */
    public Integer getFramesDropped() {
      return framesDropped;
    }


    /**
      * Sets the value of the 'framesDropped' field.
      * @param value The value of 'framesDropped'.
      * @return This builder.
      */
    public Builder setFramesDropped(Integer value) {
      validate(fields()[11], value);
      this.framesDropped = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'framesDropped' field has been set.
      * @return True if the 'framesDropped' field has been set, false otherwise.
      */
    public boolean hasFramesDropped() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'framesDropped' field.
      * @return This builder.
      */
    public Builder clearFramesDropped() {
      framesDropped = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'framesSent' field.
      * @return The value.
      */
    public Integer getFramesSent() {
      return framesSent;
    }


    /**
      * Sets the value of the 'framesSent' field.
      * @param value The value of 'framesSent'.
      * @return This builder.
      */
    public Builder setFramesSent(Integer value) {
      validate(fields()[12], value);
      this.framesSent = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'framesSent' field has been set.
      * @return True if the 'framesSent' field has been set, false otherwise.
      */
    public boolean hasFramesSent() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'framesSent' field.
      * @return This builder.
      */
    public Builder clearFramesSent() {
      framesSent = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'framesReceived' field.
      * @return The value.
      */
    public Integer getFramesReceived() {
      return framesReceived;
    }


    /**
      * Sets the value of the 'framesReceived' field.
      * @param value The value of 'framesReceived'.
      * @return This builder.
      */
    public Builder setFramesReceived(Integer value) {
      validate(fields()[13], value);
      this.framesReceived = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'framesReceived' field has been set.
      * @return True if the 'framesReceived' field has been set, false otherwise.
      */
    public boolean hasFramesReceived() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'framesReceived' field.
      * @return This builder.
      */
    public Builder clearFramesReceived() {
      framesReceived = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'hugeFramesSent' field.
      * @return The value.
      */
    public Integer getHugeFramesSent() {
      return hugeFramesSent;
    }


    /**
      * Sets the value of the 'hugeFramesSent' field.
      * @param value The value of 'hugeFramesSent'.
      * @return This builder.
      */
    public Builder setHugeFramesSent(Integer value) {
      validate(fields()[14], value);
      this.hugeFramesSent = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'hugeFramesSent' field has been set.
      * @return True if the 'hugeFramesSent' field has been set, false otherwise.
      */
    public boolean hasHugeFramesSent() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'hugeFramesSent' field.
      * @return This builder.
      */
    public Builder clearHugeFramesSent() {
      hugeFramesSent = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'frameWidth' field.
      * @return The value.
      */
    public Integer getFrameWidth() {
      return frameWidth;
    }


    /**
      * Sets the value of the 'frameWidth' field.
      * @param value The value of 'frameWidth'.
      * @return This builder.
      */
    public Builder setFrameWidth(Integer value) {
      validate(fields()[15], value);
      this.frameWidth = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'frameWidth' field has been set.
      * @return True if the 'frameWidth' field has been set, false otherwise.
      */
    public boolean hasFrameWidth() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'frameWidth' field.
      * @return This builder.
      */
    public Builder clearFrameWidth() {
      frameWidth = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'frameHeight' field.
      * @return The value.
      */
    public Integer getFrameHeight() {
      return frameHeight;
    }


    /**
      * Sets the value of the 'frameHeight' field.
      * @param value The value of 'frameHeight'.
      * @return This builder.
      */
    public Builder setFrameHeight(Integer value) {
      validate(fields()[16], value);
      this.frameHeight = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'frameHeight' field has been set.
      * @return True if the 'frameHeight' field has been set, false otherwise.
      */
    public boolean hasFrameHeight() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'frameHeight' field.
      * @return This builder.
      */
    public Builder clearFrameHeight() {
      frameHeight = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'insertedSamplesForDeceleration' field.
      * @return The value.
      */
    public Integer getInsertedSamplesForDeceleration() {
      return insertedSamplesForDeceleration;
    }


    /**
      * Sets the value of the 'insertedSamplesForDeceleration' field.
      * @param value The value of 'insertedSamplesForDeceleration'.
      * @return This builder.
      */
    public Builder setInsertedSamplesForDeceleration(Integer value) {
      validate(fields()[17], value);
      this.insertedSamplesForDeceleration = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'insertedSamplesForDeceleration' field has been set.
      * @return True if the 'insertedSamplesForDeceleration' field has been set, false otherwise.
      */
    public boolean hasInsertedSamplesForDeceleration() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'insertedSamplesForDeceleration' field.
      * @return This builder.
      */
    public Builder clearInsertedSamplesForDeceleration() {
      insertedSamplesForDeceleration = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'jitterBufferDelay' field.
      * @return The value.
      */
    public Double getJitterBufferDelay() {
      return jitterBufferDelay;
    }


    /**
      * Sets the value of the 'jitterBufferDelay' field.
      * @param value The value of 'jitterBufferDelay'.
      * @return This builder.
      */
    public Builder setJitterBufferDelay(Double value) {
      validate(fields()[18], value);
      this.jitterBufferDelay = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'jitterBufferDelay' field has been set.
      * @return True if the 'jitterBufferDelay' field has been set, false otherwise.
      */
    public boolean hasJitterBufferDelay() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'jitterBufferDelay' field.
      * @return This builder.
      */
    public Builder clearJitterBufferDelay() {
      jitterBufferDelay = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'jitterBufferEmittedCount' field.
      * @return The value.
      */
    public Integer getJitterBufferEmittedCount() {
      return jitterBufferEmittedCount;
    }


    /**
      * Sets the value of the 'jitterBufferEmittedCount' field.
      * @param value The value of 'jitterBufferEmittedCount'.
      * @return This builder.
      */
    public Builder setJitterBufferEmittedCount(Integer value) {
      validate(fields()[19], value);
      this.jitterBufferEmittedCount = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'jitterBufferEmittedCount' field has been set.
      * @return True if the 'jitterBufferEmittedCount' field has been set, false otherwise.
      */
    public boolean hasJitterBufferEmittedCount() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 'jitterBufferEmittedCount' field.
      * @return This builder.
      */
    public Builder clearJitterBufferEmittedCount() {
      jitterBufferEmittedCount = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    /**
      * Gets the value of the 'mediaSourceID' field.
      * @return The value.
      */
    public String getMediaSourceID() {
      return mediaSourceID;
    }


    /**
      * Sets the value of the 'mediaSourceID' field.
      * @param value The value of 'mediaSourceID'.
      * @return This builder.
      */
    public Builder setMediaSourceID(String value) {
      validate(fields()[20], value);
      this.mediaSourceID = value;
      fieldSetFlags()[20] = true;
      return this;
    }

    /**
      * Checks whether the 'mediaSourceID' field has been set.
      * @return True if the 'mediaSourceID' field has been set, false otherwise.
      */
    public boolean hasMediaSourceID() {
      return fieldSetFlags()[20];
    }


    /**
      * Clears the value of the 'mediaSourceID' field.
      * @return This builder.
      */
    public Builder clearMediaSourceID() {
      mediaSourceID = null;
      fieldSetFlags()[20] = false;
      return this;
    }

    /**
      * Gets the value of the 'mediaType' field.
      * @return The value.
      */
    public MediaType getMediaType() {
      return mediaType;
    }


    /**
      * Sets the value of the 'mediaType' field.
      * @param value The value of 'mediaType'.
      * @return This builder.
      */
    public Builder setMediaType(MediaType value) {
      validate(fields()[21], value);
      this.mediaType = value;
      fieldSetFlags()[21] = true;
      return this;
    }

    /**
      * Checks whether the 'mediaType' field has been set.
      * @return True if the 'mediaType' field has been set, false otherwise.
      */
    public boolean hasMediaType() {
      return fieldSetFlags()[21];
    }


    /**
      * Clears the value of the 'mediaType' field.
      * @return This builder.
      */
    public Builder clearMediaType() {
      mediaType = null;
      fieldSetFlags()[21] = false;
      return this;
    }

    /**
      * Gets the value of the 'remoteSource' field.
      * @return The value.
      */
    public Boolean getRemoteSource() {
      return remoteSource;
    }


    /**
      * Sets the value of the 'remoteSource' field.
      * @param value The value of 'remoteSource'.
      * @return This builder.
      */
    public Builder setRemoteSource(Boolean value) {
      validate(fields()[22], value);
      this.remoteSource = value;
      fieldSetFlags()[22] = true;
      return this;
    }

    /**
      * Checks whether the 'remoteSource' field has been set.
      * @return True if the 'remoteSource' field has been set, false otherwise.
      */
    public boolean hasRemoteSource() {
      return fieldSetFlags()[22];
    }


    /**
      * Clears the value of the 'remoteSource' field.
      * @return This builder.
      */
    public Builder clearRemoteSource() {
      remoteSource = null;
      fieldSetFlags()[22] = false;
      return this;
    }

    /**
      * Gets the value of the 'removedSamplesForAcceleration' field.
      * @return The value.
      */
    public Integer getRemovedSamplesForAcceleration() {
      return removedSamplesForAcceleration;
    }


    /**
      * Sets the value of the 'removedSamplesForAcceleration' field.
      * @param value The value of 'removedSamplesForAcceleration'.
      * @return This builder.
      */
    public Builder setRemovedSamplesForAcceleration(Integer value) {
      validate(fields()[23], value);
      this.removedSamplesForAcceleration = value;
      fieldSetFlags()[23] = true;
      return this;
    }

    /**
      * Checks whether the 'removedSamplesForAcceleration' field has been set.
      * @return True if the 'removedSamplesForAcceleration' field has been set, false otherwise.
      */
    public boolean hasRemovedSamplesForAcceleration() {
      return fieldSetFlags()[23];
    }


    /**
      * Clears the value of the 'removedSamplesForAcceleration' field.
      * @return This builder.
      */
    public Builder clearRemovedSamplesForAcceleration() {
      removedSamplesForAcceleration = null;
      fieldSetFlags()[23] = false;
      return this;
    }

    /**
      * Gets the value of the 'samplesDuration' field.
      * @return The value.
      */
    public Double getSamplesDuration() {
      return samplesDuration;
    }


    /**
      * Sets the value of the 'samplesDuration' field.
      * @param value The value of 'samplesDuration'.
      * @return This builder.
      */
    public Builder setSamplesDuration(Double value) {
      validate(fields()[24], value);
      this.samplesDuration = value;
      fieldSetFlags()[24] = true;
      return this;
    }

    /**
      * Checks whether the 'samplesDuration' field has been set.
      * @return True if the 'samplesDuration' field has been set, false otherwise.
      */
    public boolean hasSamplesDuration() {
      return fieldSetFlags()[24];
    }


    /**
      * Clears the value of the 'samplesDuration' field.
      * @return This builder.
      */
    public Builder clearSamplesDuration() {
      samplesDuration = null;
      fieldSetFlags()[24] = false;
      return this;
    }

    /**
      * Gets the value of the 'silentConcealedSamples' field.
      * @return The value.
      */
    public Integer getSilentConcealedSamples() {
      return silentConcealedSamples;
    }


    /**
      * Sets the value of the 'silentConcealedSamples' field.
      * @param value The value of 'silentConcealedSamples'.
      * @return This builder.
      */
    public Builder setSilentConcealedSamples(Integer value) {
      validate(fields()[25], value);
      this.silentConcealedSamples = value;
      fieldSetFlags()[25] = true;
      return this;
    }

    /**
      * Checks whether the 'silentConcealedSamples' field has been set.
      * @return True if the 'silentConcealedSamples' field has been set, false otherwise.
      */
    public boolean hasSilentConcealedSamples() {
      return fieldSetFlags()[25];
    }


    /**
      * Clears the value of the 'silentConcealedSamples' field.
      * @return This builder.
      */
    public Builder clearSilentConcealedSamples() {
      silentConcealedSamples = null;
      fieldSetFlags()[25] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalSamplesReceived' field.
      * @return The value.
      */
    public Integer getTotalSamplesReceived() {
      return totalSamplesReceived;
    }


    /**
      * Sets the value of the 'totalSamplesReceived' field.
      * @param value The value of 'totalSamplesReceived'.
      * @return This builder.
      */
    public Builder setTotalSamplesReceived(Integer value) {
      validate(fields()[26], value);
      this.totalSamplesReceived = value;
      fieldSetFlags()[26] = true;
      return this;
    }

    /**
      * Checks whether the 'totalSamplesReceived' field has been set.
      * @return True if the 'totalSamplesReceived' field has been set, false otherwise.
      */
    public boolean hasTotalSamplesReceived() {
      return fieldSetFlags()[26];
    }


    /**
      * Clears the value of the 'totalSamplesReceived' field.
      * @return This builder.
      */
    public Builder clearTotalSamplesReceived() {
      totalSamplesReceived = null;
      fieldSetFlags()[26] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Track build() {
      try {
        Track record = new Track();
        record.mediaUnitId = fieldSetFlags()[0] ? this.mediaUnitId : (String) defaultValue(fields()[0]);
        record.callName = fieldSetFlags()[1] ? this.callName : (String) defaultValue(fields()[1]);
        record.userId = fieldSetFlags()[2] ? this.userId : (String) defaultValue(fields()[2]);
        record.browserId = fieldSetFlags()[3] ? this.browserId : (String) defaultValue(fields()[3]);
        record.peerConnectionUUID = fieldSetFlags()[4] ? this.peerConnectionUUID : (String) defaultValue(fields()[4]);
        record.trackId = fieldSetFlags()[5] ? this.trackId : (String) defaultValue(fields()[5]);
        record.concealedSamples = fieldSetFlags()[6] ? this.concealedSamples : (Integer) defaultValue(fields()[6]);
        record.concealmentEvents = fieldSetFlags()[7] ? this.concealmentEvents : (Integer) defaultValue(fields()[7]);
        record.detached = fieldSetFlags()[8] ? this.detached : (Boolean) defaultValue(fields()[8]);
        record.ended = fieldSetFlags()[9] ? this.ended : (Boolean) defaultValue(fields()[9]);
        record.framesDecoded = fieldSetFlags()[10] ? this.framesDecoded : (Integer) defaultValue(fields()[10]);
        record.framesDropped = fieldSetFlags()[11] ? this.framesDropped : (Integer) defaultValue(fields()[11]);
        record.framesSent = fieldSetFlags()[12] ? this.framesSent : (Integer) defaultValue(fields()[12]);
        record.framesReceived = fieldSetFlags()[13] ? this.framesReceived : (Integer) defaultValue(fields()[13]);
        record.hugeFramesSent = fieldSetFlags()[14] ? this.hugeFramesSent : (Integer) defaultValue(fields()[14]);
        record.frameWidth = fieldSetFlags()[15] ? this.frameWidth : (Integer) defaultValue(fields()[15]);
        record.frameHeight = fieldSetFlags()[16] ? this.frameHeight : (Integer) defaultValue(fields()[16]);
        record.insertedSamplesForDeceleration = fieldSetFlags()[17] ? this.insertedSamplesForDeceleration : (Integer) defaultValue(fields()[17]);
        record.jitterBufferDelay = fieldSetFlags()[18] ? this.jitterBufferDelay : (Double) defaultValue(fields()[18]);
        record.jitterBufferEmittedCount = fieldSetFlags()[19] ? this.jitterBufferEmittedCount : (Integer) defaultValue(fields()[19]);
        record.mediaSourceID = fieldSetFlags()[20] ? this.mediaSourceID : (String) defaultValue(fields()[20]);
        record.mediaType = fieldSetFlags()[21] ? this.mediaType : (MediaType) defaultValue(fields()[21]);
        record.remoteSource = fieldSetFlags()[22] ? this.remoteSource : (Boolean) defaultValue(fields()[22]);
        record.removedSamplesForAcceleration = fieldSetFlags()[23] ? this.removedSamplesForAcceleration : (Integer) defaultValue(fields()[23]);
        record.samplesDuration = fieldSetFlags()[24] ? this.samplesDuration : (Double) defaultValue(fields()[24]);
        record.silentConcealedSamples = fieldSetFlags()[25] ? this.silentConcealedSamples : (Integer) defaultValue(fields()[25]);
        record.totalSamplesReceived = fieldSetFlags()[26] ? this.totalSamplesReceived : (Integer) defaultValue(fields()[26]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Track>
    WRITER$ = (org.apache.avro.io.DatumWriter<Track>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Track>
    READER$ = (org.apache.avro.io.DatumReader<Track>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.mediaUnitId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.mediaUnitId);
    }

    if (this.callName == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.callName);
    }

    if (this.userId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.userId);
    }

    if (this.browserId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.browserId);
    }

    out.writeString(this.peerConnectionUUID);

    if (this.trackId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.trackId);
    }

    if (this.concealedSamples == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.concealedSamples);
    }

    if (this.concealmentEvents == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.concealmentEvents);
    }

    if (this.detached == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.detached);
    }

    if (this.ended == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.ended);
    }

    if (this.framesDecoded == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.framesDecoded);
    }

    if (this.framesDropped == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.framesDropped);
    }

    if (this.framesSent == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.framesSent);
    }

    if (this.framesReceived == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.framesReceived);
    }

    if (this.hugeFramesSent == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.hugeFramesSent);
    }

    if (this.frameWidth == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.frameWidth);
    }

    if (this.frameHeight == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.frameHeight);
    }

    if (this.insertedSamplesForDeceleration == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.insertedSamplesForDeceleration);
    }

    if (this.jitterBufferDelay == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.jitterBufferDelay);
    }

    if (this.jitterBufferEmittedCount == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.jitterBufferEmittedCount);
    }

    if (this.mediaSourceID == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.mediaSourceID);
    }

    out.writeEnum(this.mediaType.ordinal());

    if (this.remoteSource == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.remoteSource);
    }

    if (this.removedSamplesForAcceleration == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.removedSamplesForAcceleration);
    }

    if (this.samplesDuration == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.samplesDuration);
    }

    if (this.silentConcealedSamples == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.silentConcealedSamples);
    }

    if (this.totalSamplesReceived == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.totalSamplesReceived);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.mediaUnitId = null;
      } else {
        this.mediaUnitId = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.callName = null;
      } else {
        this.callName = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.userId = null;
      } else {
        this.userId = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.browserId = null;
      } else {
        this.browserId = in.readString();
      }

      this.peerConnectionUUID = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.trackId = null;
      } else {
        this.trackId = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.concealedSamples = null;
      } else {
        this.concealedSamples = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.concealmentEvents = null;
      } else {
        this.concealmentEvents = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.detached = null;
      } else {
        this.detached = in.readBoolean();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.ended = null;
      } else {
        this.ended = in.readBoolean();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.framesDecoded = null;
      } else {
        this.framesDecoded = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.framesDropped = null;
      } else {
        this.framesDropped = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.framesSent = null;
      } else {
        this.framesSent = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.framesReceived = null;
      } else {
        this.framesReceived = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.hugeFramesSent = null;
      } else {
        this.hugeFramesSent = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.frameWidth = null;
      } else {
        this.frameWidth = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.frameHeight = null;
      } else {
        this.frameHeight = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.insertedSamplesForDeceleration = null;
      } else {
        this.insertedSamplesForDeceleration = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.jitterBufferDelay = null;
      } else {
        this.jitterBufferDelay = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.jitterBufferEmittedCount = null;
      } else {
        this.jitterBufferEmittedCount = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.mediaSourceID = null;
      } else {
        this.mediaSourceID = in.readString();
      }

      this.mediaType = MediaType.values()[in.readEnum()];

      if (in.readIndex() != 1) {
        in.readNull();
        this.remoteSource = null;
      } else {
        this.remoteSource = in.readBoolean();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.removedSamplesForAcceleration = null;
      } else {
        this.removedSamplesForAcceleration = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.samplesDuration = null;
      } else {
        this.samplesDuration = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.silentConcealedSamples = null;
      } else {
        this.silentConcealedSamples = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.totalSamplesReceived = null;
      } else {
        this.totalSamplesReceived = in.readInt();
      }

    } else {
      for (int i = 0; i < 27; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.mediaUnitId = null;
          } else {
            this.mediaUnitId = in.readString();
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.callName = null;
          } else {
            this.callName = in.readString();
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.userId = null;
          } else {
            this.userId = in.readString();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.browserId = null;
          } else {
            this.browserId = in.readString();
          }
          break;

        case 4:
          this.peerConnectionUUID = in.readString();
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.trackId = null;
          } else {
            this.trackId = in.readString();
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.concealedSamples = null;
          } else {
            this.concealedSamples = in.readInt();
          }
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.concealmentEvents = null;
          } else {
            this.concealmentEvents = in.readInt();
          }
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.detached = null;
          } else {
            this.detached = in.readBoolean();
          }
          break;

        case 9:
          if (in.readIndex() != 1) {
            in.readNull();
            this.ended = null;
          } else {
            this.ended = in.readBoolean();
          }
          break;

        case 10:
          if (in.readIndex() != 1) {
            in.readNull();
            this.framesDecoded = null;
          } else {
            this.framesDecoded = in.readInt();
          }
          break;

        case 11:
          if (in.readIndex() != 1) {
            in.readNull();
            this.framesDropped = null;
          } else {
            this.framesDropped = in.readInt();
          }
          break;

        case 12:
          if (in.readIndex() != 1) {
            in.readNull();
            this.framesSent = null;
          } else {
            this.framesSent = in.readInt();
          }
          break;

        case 13:
          if (in.readIndex() != 1) {
            in.readNull();
            this.framesReceived = null;
          } else {
            this.framesReceived = in.readInt();
          }
          break;

        case 14:
          if (in.readIndex() != 1) {
            in.readNull();
            this.hugeFramesSent = null;
          } else {
            this.hugeFramesSent = in.readInt();
          }
          break;

        case 15:
          if (in.readIndex() != 1) {
            in.readNull();
            this.frameWidth = null;
          } else {
            this.frameWidth = in.readInt();
          }
          break;

        case 16:
          if (in.readIndex() != 1) {
            in.readNull();
            this.frameHeight = null;
          } else {
            this.frameHeight = in.readInt();
          }
          break;

        case 17:
          if (in.readIndex() != 1) {
            in.readNull();
            this.insertedSamplesForDeceleration = null;
          } else {
            this.insertedSamplesForDeceleration = in.readInt();
          }
          break;

        case 18:
          if (in.readIndex() != 1) {
            in.readNull();
            this.jitterBufferDelay = null;
          } else {
            this.jitterBufferDelay = in.readDouble();
          }
          break;

        case 19:
          if (in.readIndex() != 1) {
            in.readNull();
            this.jitterBufferEmittedCount = null;
          } else {
            this.jitterBufferEmittedCount = in.readInt();
          }
          break;

        case 20:
          if (in.readIndex() != 1) {
            in.readNull();
            this.mediaSourceID = null;
          } else {
            this.mediaSourceID = in.readString();
          }
          break;

        case 21:
          this.mediaType = MediaType.values()[in.readEnum()];
          break;

        case 22:
          if (in.readIndex() != 1) {
            in.readNull();
            this.remoteSource = null;
          } else {
            this.remoteSource = in.readBoolean();
          }
          break;

        case 23:
          if (in.readIndex() != 1) {
            in.readNull();
            this.removedSamplesForAcceleration = null;
          } else {
            this.removedSamplesForAcceleration = in.readInt();
          }
          break;

        case 24:
          if (in.readIndex() != 1) {
            in.readNull();
            this.samplesDuration = null;
          } else {
            this.samplesDuration = in.readDouble();
          }
          break;

        case 25:
          if (in.readIndex() != 1) {
            in.readNull();
            this.silentConcealedSamples = null;
          } else {
            this.silentConcealedSamples = in.readInt();
          }
          break;

        case 26:
          if (in.readIndex() != 1) {
            in.readNull();
            this.totalSamplesReceived = null;
          } else {
            this.totalSamplesReceived = in.readInt();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










