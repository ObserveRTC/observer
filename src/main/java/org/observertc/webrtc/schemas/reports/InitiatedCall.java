/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.observertc.webrtc.schemas.reports;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

/** Initial Call Report payload. Contains information about a call initiated by a client */
@org.apache.avro.specific.AvroGenerated
public class InitiatedCall extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3423803663014697791L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"InitiatedCall\",\"namespace\":\"org.observertc.webrtc.schemas.reports\",\"doc\":\"Initial Call Report payload. Contains information about a call initiated by a client\",\"fields\":[{\"name\":\"callUUID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"callName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"mediaUnitId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<InitiatedCall> ENCODER =
      new BinaryMessageEncoder<InitiatedCall>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<InitiatedCall> DECODER =
      new BinaryMessageDecoder<InitiatedCall>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<InitiatedCall> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<InitiatedCall> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<InitiatedCall> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<InitiatedCall>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this InitiatedCall to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a InitiatedCall from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a InitiatedCall instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static InitiatedCall fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private String callUUID;
   private String callName;
   private String mediaUnitId;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public InitiatedCall() {}

  /**
   * All-args constructor.
   * @param callUUID The new value for callUUID
   * @param callName The new value for callName
   * @param mediaUnitId The new value for mediaUnitId
   */
  public InitiatedCall(String callUUID, String callName, String mediaUnitId) {
    this.callUUID = callUUID;
    this.callName = callName;
    this.mediaUnitId = mediaUnitId;
  }

  public SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return callUUID;
    case 1: return callName;
    case 2: return mediaUnitId;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: callUUID = value$ != null ? value$.toString() : null; break;
    case 1: callName = value$ != null ? value$.toString() : null; break;
    case 2: mediaUnitId = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'callUUID' field.
   * @return The value of the 'callUUID' field.
   */
  public String getCallUUID() {
    return callUUID;
  }



  /**
   * Gets the value of the 'callName' field.
   * @return The value of the 'callName' field.
   */
  public String getCallName() {
    return callName;
  }



  /**
   * Gets the value of the 'mediaUnitId' field.
   * @return The value of the 'mediaUnitId' field.
   */
  public String getMediaUnitId() {
    return mediaUnitId;
  }



  /**
   * Creates a new InitiatedCall RecordBuilder.
   * @return A new InitiatedCall RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new InitiatedCall RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new InitiatedCall RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * Creates a new InitiatedCall RecordBuilder by copying an existing InitiatedCall instance.
   * @param other The existing instance to copy.
   * @return A new InitiatedCall RecordBuilder
   */
  public static Builder newBuilder(InitiatedCall other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * RecordBuilder for InitiatedCall instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<InitiatedCall>
    implements org.apache.avro.data.RecordBuilder<InitiatedCall> {

    private String callUUID;
    private String callName;
    private String mediaUnitId;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.callUUID)) {
        this.callUUID = data().deepCopy(fields()[0].schema(), other.callUUID);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.callName)) {
        this.callName = data().deepCopy(fields()[1].schema(), other.callName);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.mediaUnitId)) {
        this.mediaUnitId = data().deepCopy(fields()[2].schema(), other.mediaUnitId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing InitiatedCall instance
     * @param other The existing instance to copy.
     */
    private Builder(InitiatedCall other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.callUUID)) {
        this.callUUID = data().deepCopy(fields()[0].schema(), other.callUUID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.callName)) {
        this.callName = data().deepCopy(fields()[1].schema(), other.callName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.mediaUnitId)) {
        this.mediaUnitId = data().deepCopy(fields()[2].schema(), other.mediaUnitId);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'callUUID' field.
      * @return The value.
      */
    public String getCallUUID() {
      return callUUID;
    }


    /**
      * Sets the value of the 'callUUID' field.
      * @param value The value of 'callUUID'.
      * @return This builder.
      */
    public Builder setCallUUID(String value) {
      validate(fields()[0], value);
      this.callUUID = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'callUUID' field has been set.
      * @return True if the 'callUUID' field has been set, false otherwise.
      */
    public boolean hasCallUUID() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'callUUID' field.
      * @return This builder.
      */
    public Builder clearCallUUID() {
      callUUID = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'callName' field.
      * @return The value.
      */
    public String getCallName() {
      return callName;
    }


    /**
      * Sets the value of the 'callName' field.
      * @param value The value of 'callName'.
      * @return This builder.
      */
    public Builder setCallName(String value) {
      validate(fields()[1], value);
      this.callName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'callName' field has been set.
      * @return True if the 'callName' field has been set, false otherwise.
      */
    public boolean hasCallName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'callName' field.
      * @return This builder.
      */
    public Builder clearCallName() {
      callName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'mediaUnitId' field.
      * @return The value.
      */
    public String getMediaUnitId() {
      return mediaUnitId;
    }


    /**
      * Sets the value of the 'mediaUnitId' field.
      * @param value The value of 'mediaUnitId'.
      * @return This builder.
      */
    public Builder setMediaUnitId(String value) {
      validate(fields()[2], value);
      this.mediaUnitId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'mediaUnitId' field has been set.
      * @return True if the 'mediaUnitId' field has been set, false otherwise.
      */
    public boolean hasMediaUnitId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'mediaUnitId' field.
      * @return This builder.
      */
    public Builder clearMediaUnitId() {
      mediaUnitId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public InitiatedCall build() {
      try {
        InitiatedCall record = new InitiatedCall();
        record.callUUID = fieldSetFlags()[0] ? this.callUUID : (String) defaultValue(fields()[0]);
        record.callName = fieldSetFlags()[1] ? this.callName : (String) defaultValue(fields()[1]);
        record.mediaUnitId = fieldSetFlags()[2] ? this.mediaUnitId : (String) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<InitiatedCall>
    WRITER$ = (org.apache.avro.io.DatumWriter<InitiatedCall>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<InitiatedCall>
    READER$ = (org.apache.avro.io.DatumReader<InitiatedCall>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.callUUID);

    if (this.callName == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.callName);
    }

    if (this.mediaUnitId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.mediaUnitId);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.callUUID = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.callName = null;
      } else {
        this.callName = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.mediaUnitId = null;
      } else {
        this.mediaUnitId = in.readString();
      }

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.callUUID = in.readString();
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.callName = null;
          } else {
            this.callName = in.readString();
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.mediaUnitId = null;
          } else {
            this.mediaUnitId = in.readString();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










