/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.observertc.webrtc.schemas.reports;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** A Report created for Inbound Video Tracks. A combination of Codec metadata carrying inbound and remote outbound RTP stats measurements */
@org.apache.avro.specific.AvroGenerated
public class InboundVideoTrackReport extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4068234679281834071L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"InboundVideoTrackReport\",\"namespace\":\"org.observertc.webrtc.schemas.reports\",\"doc\":\"A Report created for Inbound Video Tracks. A combination of Codec metadata carrying inbound and remote outbound RTP stats measurements\",\"fields\":[{\"name\":\"serviceId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The unique identifier of the service\"},{\"name\":\"serviceName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The resolved service name configured for the service Id\",\"default\":null},{\"name\":\"mediaUnitId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The media unit id the report belongs to\"},{\"name\":\"marker\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The marker the originated sample is reported with\",\"default\":null},{\"name\":\"timestamp\",\"type\":\"long\",\"doc\":\"The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)\"},{\"name\":\"callId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The generated unique identifier of the call\"},{\"name\":\"roomId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"webrtc app provided room id\",\"default\":null},{\"name\":\"clientId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The generated unique identifier of the client\"},{\"name\":\"userId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"webrtc app provided user identifier\",\"default\":null},{\"name\":\"peerConnectionId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The unique identifier of the peer connection\"},{\"name\":\"label\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The webrtc app provided label the peer connection is labeled with\",\"default\":null},{\"name\":\"remoteUserId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The webrtc app provided user id the track belongs to, or if the webrtc app did not provided the observer tried to match it\",\"default\":null},{\"name\":\"remoteClientId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The observer matched remote client Id\",\"default\":null},{\"name\":\"remotePeerConnectionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The observer matched remote Peer Connection Id\",\"default\":null},{\"name\":\"sampleSeq\",\"type\":\"int\",\"doc\":\"The sequence number of the sample the report is generated from\"},{\"name\":\"ssrc\",\"type\":\"long\",\"doc\":\"The RTP SSRC field\"},{\"name\":\"packetsReceived\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of packets received on the corresponded synchronization source\",\"default\":null},{\"name\":\"packetsLost\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of bytes received on the corresponded synchronization source\",\"default\":null},{\"name\":\"jitter\",\"type\":[\"null\",\"double\"],\"doc\":\"The corresponded synchronization source reported jitter\",\"default\":null},{\"name\":\"packetsDiscarded\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of packets missed the playout point and therefore discarded by the jitterbuffer\",\"default\":null},{\"name\":\"packetsRepaired\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of packets repaired by either FEC or due to retransmission on the corresponded synchronization source\",\"default\":null},{\"name\":\"burstPacketsLost\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of packets lost in burst (RFC6958)\",\"default\":null},{\"name\":\"burstPacketsDiscarded\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of packets discarded in burst (RFC6958)\",\"default\":null},{\"name\":\"burstLossCount\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of burst happened causes burstPacketsLost on the corresponding synchronization source\",\"default\":null},{\"name\":\"burstDiscardCount\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of burst happened causes burstPacketsDiscarded on the corresponding synchronization source\",\"default\":null},{\"name\":\"burstLossRate\",\"type\":[\"null\",\"double\"],\"doc\":\"The fraction of RTP packets lost during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source\",\"default\":null},{\"name\":\"burstDiscardRate\",\"type\":[\"null\",\"int\"],\"doc\":\"The fraction of RTP packets discarded during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source\",\"default\":null},{\"name\":\"gapLossRate\",\"type\":[\"null\",\"double\"],\"doc\":\"The fraction of RTP packets lost during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source\",\"default\":null},{\"name\":\"gapDiscardRate\",\"type\":[\"null\",\"double\"],\"doc\":\"The fraction of RTP packets discarded during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source\",\"default\":null},{\"name\":\"framesDropped\",\"type\":[\"null\",\"double\"],\"doc\":\"The total number of frames dropped at decoding process on the corresponding synchronization source\",\"default\":null},{\"name\":\"partialFramesLost\",\"type\":[\"null\",\"double\"],\"doc\":\"The total number of partial frames lost at decoding process on the corresponding synchronization source\",\"default\":null},{\"name\":\"fullFramesLost\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of full frames lost at decoding process on the corresponding synchronization source\",\"default\":null},{\"name\":\"framesDecoded\",\"type\":[\"null\",\"int\"],\"doc\":\"Indicate the number of frames completly and without error decoded on the corresponded synchronization source (ssrc)\",\"default\":null},{\"name\":\"keyFramesDecoded\",\"type\":[\"null\",\"int\"],\"doc\":\"Indicate the number of keyframes received on the corresponded synchronization source (ssrc)\",\"default\":null},{\"name\":\"frameWidth\",\"type\":[\"null\",\"int\"],\"doc\":\"Indicate the width of the frame received on the corresponded synchronization source (ssrc)\",\"default\":null},{\"name\":\"frameHeight\",\"type\":[\"null\",\"int\"],\"doc\":\"Indicate the height of the frame received on the corresponded synchronization source (ssrc)\",\"default\":null},{\"name\":\"frameBitDepth\",\"type\":[\"null\",\"int\"],\"doc\":\"Indicate the bit depth per pixel of the last decoded frame received on the corresponded synchronization source (ssrc)\",\"default\":null},{\"name\":\"framesPerSecond\",\"type\":[\"null\",\"double\"],\"doc\":\"Indicate the number of decoded frames in the last second received on the corresponded synchronization source (ssrc)\",\"default\":null},{\"name\":\"qpSum\",\"type\":[\"null\",\"long\"],\"doc\":\"sum of QP values of frames decoded on the corresponded synchronization source (ssrc)\",\"default\":null},{\"name\":\"totalDecodeTime\",\"type\":[\"null\",\"long\"],\"doc\":\"The total number of seconds spent on decoding frames on the corresponded synchronization source (ssrc)\",\"default\":null},{\"name\":\"totalInterFrameDelay\",\"type\":[\"null\",\"long\"],\"doc\":\"The total number of inter frame delay on the corresponded synchronization source (ssrc)\",\"default\":null},{\"name\":\"totalSquaredInterFrameDelay\",\"type\":[\"null\",\"long\"],\"doc\":\"The total number of inter frame delay squere on the corresponded synchronization source (ssrc) Useful for variance calculation for interframe delays\",\"default\":null},{\"name\":\"lastPacketReceivedTimestamp\",\"type\":[\"null\",\"boolean\"],\"doc\":\"Represents the timestamp at which the last packet was received on the corresponded synchronization source (ssrc)\",\"default\":null},{\"name\":\"averageRtcpInterval\",\"type\":[\"null\",\"double\"],\"doc\":\"The average RTCP interval between two consecutive compound RTCP packets sent for the corresponding synchronization source (ssrc)\",\"default\":null},{\"name\":\"headerBytesReceived\",\"type\":[\"null\",\"long\"],\"doc\":\"Total number of RTP header and padding bytes received over the corresponding synchronization source (ssrc)\",\"default\":null},{\"name\":\"fecPacketsReceived\",\"type\":[\"null\",\"int\"],\"doc\":\"Total number of FEC packets received over the corresponding synchronization source (ssrc)\",\"default\":null},{\"name\":\"fecPacketsDiscarded\",\"type\":[\"null\",\"int\"],\"doc\":\"Total number of FEC packets discarded over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired.\",\"default\":null},{\"name\":\"bytesReceived\",\"type\":[\"null\",\"long\"],\"doc\":\"Total number of b","ytes received over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired.\",\"default\":null},{\"name\":\"packetsFailedDecryption\",\"type\":[\"null\",\"int\"],\"doc\":\"Total number of packets received and failed to decrypt over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired.\",\"default\":null},{\"name\":\"packetsDuplicated\",\"type\":[\"null\",\"int\"],\"doc\":\"Total number of packets identified as duplicated over the corresponding synchronization source (ssrc).\",\"default\":null},{\"name\":\"perDscpPacketsReceived\",\"type\":[\"null\",\"double\"],\"doc\":\"The total number of DSCP flagged RTP packets received over the corresponding synchronization source (ssrc)\",\"default\":null},{\"name\":\"firCount\",\"type\":[\"null\",\"int\"],\"doc\":\"Count the total number of Full Intra Request sent by this receiver and belongs to the corresponded synchronization source (ssrc)\",\"default\":null},{\"name\":\"pliCount\",\"type\":[\"null\",\"int\"],\"doc\":\"Count the total number of Picture Loss Indication sent by this receiver and belongs to the corresponded synchronization source (ssrc)\",\"default\":null},{\"name\":\"nackCount\",\"type\":[\"null\",\"int\"],\"doc\":\"Count the total number of Negative ACKnowledgement (NACK) packets sent and belongs to the corresponded synchronization source (ssrc)\",\"default\":null},{\"name\":\"sliCount\",\"type\":[\"null\",\"int\"],\"doc\":\"Count the total number of Slice Loss Indication sent by this receiver and belongs to the corresponded synchronization source (ssrc)\",\"default\":null},{\"name\":\"totalProcessingDelay\",\"type\":[\"null\",\"double\"],\"doc\":\"The total processing delay in seconds spend on buffering RTP packets from received up until packets are decoded\",\"default\":null},{\"name\":\"estimatedPlayoutTimestamp\",\"type\":[\"null\",\"double\"],\"doc\":\"The estimated playout time of the corresponded synchronization source\",\"default\":null},{\"name\":\"jitterBufferDelay\",\"type\":[\"null\",\"double\"],\"doc\":\"The total time of RTP packets spent in jitterbuffer waiting for frame completion due to network uncertenity.\",\"default\":null},{\"name\":\"jitterBufferEmittedCount\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of audio samples or video frames that have come out of the jitter buffer on the corresponded synchronization source (ssrc)\",\"default\":null},{\"name\":\"framesReceived\",\"type\":[\"null\",\"int\"],\"doc\":\"Represents the total number of complete frames received on the corresponded synchronization source (ssrc)\",\"default\":null},{\"name\":\"decoderImplementation\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Indicate the name of the decoder implementation library\",\"default\":null},{\"name\":\"packetsSent\",\"type\":[\"null\",\"int\"],\"doc\":\"Total number of RTP packets sent at the remote endpoint to this endpoint on this synchronization source\",\"default\":null},{\"name\":\"bytesSent\",\"type\":[\"null\",\"int\"],\"doc\":\"Total number of payload bytes sent at the remote endpoint to this endpoint on this synchronization source\",\"default\":null},{\"name\":\"remoteTimestamp\",\"type\":[\"null\",\"double\"],\"doc\":\"The timestamp corresnponds to the time in UTC Epoch the remote endpoint reported the statistics belong to the sender side and correspond to the synchronization source (ssrc)\",\"default\":null},{\"name\":\"reportsSent\",\"type\":[\"null\",\"int\"],\"doc\":\"The number of SR reports the remote endpoint sent corresponded to synchronization source (ssrc) this report belongs to\",\"default\":null},{\"name\":\"ended\",\"type\":[\"null\",\"boolean\"],\"doc\":\"Flag represents if the receiver ended the media stream track or not.\",\"default\":null},{\"name\":\"payloadType\",\"type\":[\"null\",\"int\"],\"doc\":\"The type of the payload the RTP packet SSRC belongs to\",\"default\":null},{\"name\":\"mimeType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"the MIME type of the codec (e.g.: video/vp8)\",\"default\":null},{\"name\":\"clockRate\",\"type\":[\"null\",\"long\"],\"doc\":\"The negotiated clock rate the RTP timestamp is generated of\",\"default\":null},{\"name\":\"sdpFmtpLine\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The a=fmtp line in the SDP corresponding to the codec\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The unique identifier of the service */
   private String serviceId;
  /** The resolved service name configured for the service Id */
   private String serviceName;
  /** The media unit id the report belongs to */
   private String mediaUnitId;
  /** The marker the originated sample is reported with */
   private String marker;
  /** The timestamp when the corresponded data is generated for the report (UTC Epoch in ms) */
   private long timestamp;
  /** The generated unique identifier of the call */
   private String callId;
  /** webrtc app provided room id */
   private String roomId;
  /** The generated unique identifier of the client */
   private String clientId;
  /** webrtc app provided user identifier */
   private String userId;
  /** The unique identifier of the peer connection */
   private String peerConnectionId;
  /** The webrtc app provided label the peer connection is labeled with */
   private String label;
  /** The webrtc app provided user id the track belongs to, or if the webrtc app did not provided the observer tried to match it */
   private String remoteUserId;
  /** The observer matched remote client Id */
   private String remoteClientId;
  /** The observer matched remote Peer Connection Id */
   private String remotePeerConnectionId;
  /** The sequence number of the sample the report is generated from */
   private int sampleSeq;
  /** The RTP SSRC field */
   private long ssrc;
  /** The total number of packets received on the corresponded synchronization source */
   private Integer packetsReceived;
  /** The total number of bytes received on the corresponded synchronization source */
   private Integer packetsLost;
  /** The corresponded synchronization source reported jitter */
   private Double jitter;
  /** The total number of packets missed the playout point and therefore discarded by the jitterbuffer */
   private Integer packetsDiscarded;
  /** The total number of packets repaired by either FEC or due to retransmission on the corresponded synchronization source */
   private Integer packetsRepaired;
  /** The total number of packets lost in burst (RFC6958) */
   private Integer burstPacketsLost;
  /** The total number of packets discarded in burst (RFC6958) */
   private Integer burstPacketsDiscarded;
  /** The total number of burst happened causes burstPacketsLost on the corresponding synchronization source */
   private Integer burstLossCount;
  /** The total number of burst happened causes burstPacketsDiscarded on the corresponding synchronization source */
   private Integer burstDiscardCount;
  /** The fraction of RTP packets lost during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source */
   private Double burstLossRate;
  /** The fraction of RTP packets discarded during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source */
   private Integer burstDiscardRate;
  /** The fraction of RTP packets lost during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source */
   private Double gapLossRate;
  /** The fraction of RTP packets discarded during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source */
   private Double gapDiscardRate;
  /** The total number of frames dropped at decoding process on the corresponding synchronization source */
   private Double framesDropped;
  /** The total number of partial frames lost at decoding process on the corresponding synchronization source */
   private Double partialFramesLost;
  /** The total number of full frames lost at decoding process on the corresponding synchronization source */
   private Integer fullFramesLost;
  /** Indicate the number of frames completly and without error decoded on the corresponded synchronization source (ssrc) */
   private Integer framesDecoded;
  /** Indicate the number of keyframes received on the corresponded synchronization source (ssrc) */
   private Integer keyFramesDecoded;
  /** Indicate the width of the frame received on the corresponded synchronization source (ssrc) */
   private Integer frameWidth;
  /** Indicate the height of the frame received on the corresponded synchronization source (ssrc) */
   private Integer frameHeight;
  /** Indicate the bit depth per pixel of the last decoded frame received on the corresponded synchronization source (ssrc) */
   private Integer frameBitDepth;
  /** Indicate the number of decoded frames in the last second received on the corresponded synchronization source (ssrc) */
   private Double framesPerSecond;
  /** sum of QP values of frames decoded on the corresponded synchronization source (ssrc) */
   private Long qpSum;
  /** The total number of seconds spent on decoding frames on the corresponded synchronization source (ssrc) */
   private Long totalDecodeTime;
  /** The total number of inter frame delay on the corresponded synchronization source (ssrc) */
   private Long totalInterFrameDelay;
  /** The total number of inter frame delay squere on the corresponded synchronization source (ssrc) Useful for variance calculation for interframe delays */
   private Long totalSquaredInterFrameDelay;
  /** Represents the timestamp at which the last packet was received on the corresponded synchronization source (ssrc) */
   private Boolean lastPacketReceivedTimestamp;
  /** The average RTCP interval between two consecutive compound RTCP packets sent for the corresponding synchronization source (ssrc) */
   private Double averageRtcpInterval;
  /** Total number of RTP header and padding bytes received over the corresponding synchronization source (ssrc) */
   private Long headerBytesReceived;
  /** Total number of FEC packets received over the corresponding synchronization source (ssrc) */
   private Integer fecPacketsReceived;
  /** Total number of FEC packets discarded over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired. */
   private Integer fecPacketsDiscarded;
  /** Total number of bytes received over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired. */
   private Long bytesReceived;
  /** Total number of packets received and failed to decrypt over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired. */
   private Integer packetsFailedDecryption;
  /** Total number of packets identified as duplicated over the corresponding synchronization source (ssrc). */
   private Integer packetsDuplicated;
  /** The total number of DSCP flagged RTP packets received over the corresponding synchronization source (ssrc) */
   private Double perDscpPacketsReceived;
  /** Count the total number of Full Intra Request sent by this receiver and belongs to the corresponded synchronization source (ssrc) */
   private Integer firCount;
  /** Count the total number of Picture Loss Indication sent by this receiver and belongs to the corresponded synchronization source (ssrc) */
   private Integer pliCount;
  /** Count the total number of Negative ACKnowledgement (NACK) packets sent and belongs to the corresponded synchronization source (ssrc) */
   private Integer nackCount;
  /** Count the total number of Slice Loss Indication sent by this receiver and belongs to the corresponded synchronization source (ssrc) */
   private Integer sliCount;
  /** The total processing delay in seconds spend on buffering RTP packets from received up until packets are decoded */
   private Double totalProcessingDelay;
  /** The estimated playout time of the corresponded synchronization source */
   private Double estimatedPlayoutTimestamp;
  /** The total time of RTP packets spent in jitterbuffer waiting for frame completion due to network uncertenity. */
   private Double jitterBufferDelay;
  /** The total number of audio samples or video frames that have come out of the jitter buffer on the corresponded synchronization source (ssrc) */
   private Integer jitterBufferEmittedCount;
  /** Represents the total number of complete frames received on the corresponded synchronization source (ssrc) */
   private Integer framesReceived;
  /** Indicate the name of the decoder implementation library */
   private String decoderImplementation;
  /** Total number of RTP packets sent at the remote endpoint to this endpoint on this synchronization source */
   private Integer packetsSent;
  /** Total number of payload bytes sent at the remote endpoint to this endpoint on this synchronization source */
   private Integer bytesSent;
  /** The timestamp corresnponds to the time in UTC Epoch the remote endpoint reported the statistics belong to the sender side and correspond to the synchronization source (ssrc) */
   private Double remoteTimestamp;
  /** The number of SR reports the remote endpoint sent corresponded to synchronization source (ssrc) this report belongs to */
   private Integer reportsSent;
  /** Flag represents if the receiver ended the media stream track or not. */
   private Boolean ended;
  /** The type of the payload the RTP packet SSRC belongs to */
   private Integer payloadType;
  /** the MIME type of the codec (e.g.: video/vp8) */
   private String mimeType;
  /** The negotiated clock rate the RTP timestamp is generated of */
   private Long clockRate;
  /** The a=fmtp line in the SDP corresponding to the codec */
   private String sdpFmtpLine;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public InboundVideoTrackReport() {}

  /**
   * All-args constructor.
   * @param serviceId The unique identifier of the service
   * @param serviceName The resolved service name configured for the service Id
   * @param mediaUnitId The media unit id the report belongs to
   * @param marker The marker the originated sample is reported with
   * @param timestamp The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
   * @param callId The generated unique identifier of the call
   * @param roomId webrtc app provided room id
   * @param clientId The generated unique identifier of the client
   * @param userId webrtc app provided user identifier
   * @param peerConnectionId The unique identifier of the peer connection
   * @param label The webrtc app provided label the peer connection is labeled with
   * @param remoteUserId The webrtc app provided user id the track belongs to, or if the webrtc app did not provided the observer tried to match it
   * @param remoteClientId The observer matched remote client Id
   * @param remotePeerConnectionId The observer matched remote Peer Connection Id
   * @param sampleSeq The sequence number of the sample the report is generated from
   * @param ssrc The RTP SSRC field
   * @param packetsReceived The total number of packets received on the corresponded synchronization source
   * @param packetsLost The total number of bytes received on the corresponded synchronization source
   * @param jitter The corresponded synchronization source reported jitter
   * @param packetsDiscarded The total number of packets missed the playout point and therefore discarded by the jitterbuffer
   * @param packetsRepaired The total number of packets repaired by either FEC or due to retransmission on the corresponded synchronization source
   * @param burstPacketsLost The total number of packets lost in burst (RFC6958)
   * @param burstPacketsDiscarded The total number of packets discarded in burst (RFC6958)
   * @param burstLossCount The total number of burst happened causes burstPacketsLost on the corresponding synchronization source
   * @param burstDiscardCount The total number of burst happened causes burstPacketsDiscarded on the corresponding synchronization source
   * @param burstLossRate The fraction of RTP packets lost during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
   * @param burstDiscardRate The fraction of RTP packets discarded during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
   * @param gapLossRate The fraction of RTP packets lost during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
   * @param gapDiscardRate The fraction of RTP packets discarded during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
   * @param framesDropped The total number of frames dropped at decoding process on the corresponding synchronization source
   * @param partialFramesLost The total number of partial frames lost at decoding process on the corresponding synchronization source
   * @param fullFramesLost The total number of full frames lost at decoding process on the corresponding synchronization source
   * @param framesDecoded Indicate the number of frames completly and without error decoded on the corresponded synchronization source (ssrc)
   * @param keyFramesDecoded Indicate the number of keyframes received on the corresponded synchronization source (ssrc)
   * @param frameWidth Indicate the width of the frame received on the corresponded synchronization source (ssrc)
   * @param frameHeight Indicate the height of the frame received on the corresponded synchronization source (ssrc)
   * @param frameBitDepth Indicate the bit depth per pixel of the last decoded frame received on the corresponded synchronization source (ssrc)
   * @param framesPerSecond Indicate the number of decoded frames in the last second received on the corresponded synchronization source (ssrc)
   * @param qpSum sum of QP values of frames decoded on the corresponded synchronization source (ssrc)
   * @param totalDecodeTime The total number of seconds spent on decoding frames on the corresponded synchronization source (ssrc)
   * @param totalInterFrameDelay The total number of inter frame delay on the corresponded synchronization source (ssrc)
   * @param totalSquaredInterFrameDelay The total number of inter frame delay squere on the corresponded synchronization source (ssrc) Useful for variance calculation for interframe delays
   * @param lastPacketReceivedTimestamp Represents the timestamp at which the last packet was received on the corresponded synchronization source (ssrc)
   * @param averageRtcpInterval The average RTCP interval between two consecutive compound RTCP packets sent for the corresponding synchronization source (ssrc)
   * @param headerBytesReceived Total number of RTP header and padding bytes received over the corresponding synchronization source (ssrc)
   * @param fecPacketsReceived Total number of FEC packets received over the corresponding synchronization source (ssrc)
   * @param fecPacketsDiscarded Total number of FEC packets discarded over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired.
   * @param bytesReceived Total number of bytes received over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired.
   * @param packetsFailedDecryption Total number of packets received and failed to decrypt over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired.
   * @param packetsDuplicated Total number of packets identified as duplicated over the corresponding synchronization source (ssrc).
   * @param perDscpPacketsReceived The total number of DSCP flagged RTP packets received over the corresponding synchronization source (ssrc)
   * @param firCount Count the total number of Full Intra Request sent by this receiver and belongs to the corresponded synchronization source (ssrc)
   * @param pliCount Count the total number of Picture Loss Indication sent by this receiver and belongs to the corresponded synchronization source (ssrc)
   * @param nackCount Count the total number of Negative ACKnowledgement (NACK) packets sent and belongs to the corresponded synchronization source (ssrc)
   * @param sliCount Count the total number of Slice Loss Indication sent by this receiver and belongs to the corresponded synchronization source (ssrc)
   * @param totalProcessingDelay The total processing delay in seconds spend on buffering RTP packets from received up until packets are decoded
   * @param estimatedPlayoutTimestamp The estimated playout time of the corresponded synchronization source
   * @param jitterBufferDelay The total time of RTP packets spent in jitterbuffer waiting for frame completion due to network uncertenity.
   * @param jitterBufferEmittedCount The total number of audio samples or video frames that have come out of the jitter buffer on the corresponded synchronization source (ssrc)
   * @param framesReceived Represents the total number of complete frames received on the corresponded synchronization source (ssrc)
   * @param decoderImplementation Indicate the name of the decoder implementation library
   * @param packetsSent Total number of RTP packets sent at the remote endpoint to this endpoint on this synchronization source
   * @param bytesSent Total number of payload bytes sent at the remote endpoint to this endpoint on this synchronization source
   * @param remoteTimestamp The timestamp corresnponds to the time in UTC Epoch the remote endpoint reported the statistics belong to the sender side and correspond to the synchronization source (ssrc)
   * @param reportsSent The number of SR reports the remote endpoint sent corresponded to synchronization source (ssrc) this report belongs to
   * @param ended Flag represents if the receiver ended the media stream track or not.
   * @param payloadType The type of the payload the RTP packet SSRC belongs to
   * @param mimeType the MIME type of the codec (e.g.: video/vp8)
   * @param clockRate The negotiated clock rate the RTP timestamp is generated of
   * @param sdpFmtpLine The a=fmtp line in the SDP corresponding to the codec
   */
  public InboundVideoTrackReport(String serviceId, String serviceName, String mediaUnitId, String marker, Long timestamp, String callId, String roomId, String clientId, String userId, String peerConnectionId, String label, String remoteUserId, String remoteClientId, String remotePeerConnectionId, Integer sampleSeq, Long ssrc, Integer packetsReceived, Integer packetsLost, Double jitter, Integer packetsDiscarded, Integer packetsRepaired, Integer burstPacketsLost, Integer burstPacketsDiscarded, Integer burstLossCount, Integer burstDiscardCount, Double burstLossRate, Integer burstDiscardRate, Double gapLossRate, Double gapDiscardRate, Double framesDropped, Double partialFramesLost, Integer fullFramesLost, Integer framesDecoded, Integer keyFramesDecoded, Integer frameWidth, Integer frameHeight, Integer frameBitDepth, Double framesPerSecond, Long qpSum, Long totalDecodeTime, Long totalInterFrameDelay, Long totalSquaredInterFrameDelay, Boolean lastPacketReceivedTimestamp, Double averageRtcpInterval, Long headerBytesReceived, Integer fecPacketsReceived, Integer fecPacketsDiscarded, Long bytesReceived, Integer packetsFailedDecryption, Integer packetsDuplicated, Double perDscpPacketsReceived, Integer firCount, Integer pliCount, Integer nackCount, Integer sliCount, Double totalProcessingDelay, Double estimatedPlayoutTimestamp, Double jitterBufferDelay, Integer jitterBufferEmittedCount, Integer framesReceived, String decoderImplementation, Integer packetsSent, Integer bytesSent, Double remoteTimestamp, Integer reportsSent, Boolean ended, Integer payloadType, String mimeType, Long clockRate, String sdpFmtpLine) {
    this.serviceId = serviceId;
    this.serviceName = serviceName;
    this.mediaUnitId = mediaUnitId;
    this.marker = marker;
    this.timestamp = timestamp;
    this.callId = callId;
    this.roomId = roomId;
    this.clientId = clientId;
    this.userId = userId;
    this.peerConnectionId = peerConnectionId;
    this.label = label;
    this.remoteUserId = remoteUserId;
    this.remoteClientId = remoteClientId;
    this.remotePeerConnectionId = remotePeerConnectionId;
    this.sampleSeq = sampleSeq;
    this.ssrc = ssrc;
    this.packetsReceived = packetsReceived;
    this.packetsLost = packetsLost;
    this.jitter = jitter;
    this.packetsDiscarded = packetsDiscarded;
    this.packetsRepaired = packetsRepaired;
    this.burstPacketsLost = burstPacketsLost;
    this.burstPacketsDiscarded = burstPacketsDiscarded;
    this.burstLossCount = burstLossCount;
    this.burstDiscardCount = burstDiscardCount;
    this.burstLossRate = burstLossRate;
    this.burstDiscardRate = burstDiscardRate;
    this.gapLossRate = gapLossRate;
    this.gapDiscardRate = gapDiscardRate;
    this.framesDropped = framesDropped;
    this.partialFramesLost = partialFramesLost;
    this.fullFramesLost = fullFramesLost;
    this.framesDecoded = framesDecoded;
    this.keyFramesDecoded = keyFramesDecoded;
    this.frameWidth = frameWidth;
    this.frameHeight = frameHeight;
    this.frameBitDepth = frameBitDepth;
    this.framesPerSecond = framesPerSecond;
    this.qpSum = qpSum;
    this.totalDecodeTime = totalDecodeTime;
    this.totalInterFrameDelay = totalInterFrameDelay;
    this.totalSquaredInterFrameDelay = totalSquaredInterFrameDelay;
    this.lastPacketReceivedTimestamp = lastPacketReceivedTimestamp;
    this.averageRtcpInterval = averageRtcpInterval;
    this.headerBytesReceived = headerBytesReceived;
    this.fecPacketsReceived = fecPacketsReceived;
    this.fecPacketsDiscarded = fecPacketsDiscarded;
    this.bytesReceived = bytesReceived;
    this.packetsFailedDecryption = packetsFailedDecryption;
    this.packetsDuplicated = packetsDuplicated;
    this.perDscpPacketsReceived = perDscpPacketsReceived;
    this.firCount = firCount;
    this.pliCount = pliCount;
    this.nackCount = nackCount;
    this.sliCount = sliCount;
    this.totalProcessingDelay = totalProcessingDelay;
    this.estimatedPlayoutTimestamp = estimatedPlayoutTimestamp;
    this.jitterBufferDelay = jitterBufferDelay;
    this.jitterBufferEmittedCount = jitterBufferEmittedCount;
    this.framesReceived = framesReceived;
    this.decoderImplementation = decoderImplementation;
    this.packetsSent = packetsSent;
    this.bytesSent = bytesSent;
    this.remoteTimestamp = remoteTimestamp;
    this.reportsSent = reportsSent;
    this.ended = ended;
    this.payloadType = payloadType;
    this.mimeType = mimeType;
    this.clockRate = clockRate;
    this.sdpFmtpLine = sdpFmtpLine;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return serviceId;
    case 1: return serviceName;
    case 2: return mediaUnitId;
    case 3: return marker;
    case 4: return timestamp;
    case 5: return callId;
    case 6: return roomId;
    case 7: return clientId;
    case 8: return userId;
    case 9: return peerConnectionId;
    case 10: return label;
    case 11: return remoteUserId;
    case 12: return remoteClientId;
    case 13: return remotePeerConnectionId;
    case 14: return sampleSeq;
    case 15: return ssrc;
    case 16: return packetsReceived;
    case 17: return packetsLost;
    case 18: return jitter;
    case 19: return packetsDiscarded;
    case 20: return packetsRepaired;
    case 21: return burstPacketsLost;
    case 22: return burstPacketsDiscarded;
    case 23: return burstLossCount;
    case 24: return burstDiscardCount;
    case 25: return burstLossRate;
    case 26: return burstDiscardRate;
    case 27: return gapLossRate;
    case 28: return gapDiscardRate;
    case 29: return framesDropped;
    case 30: return partialFramesLost;
    case 31: return fullFramesLost;
    case 32: return framesDecoded;
    case 33: return keyFramesDecoded;
    case 34: return frameWidth;
    case 35: return frameHeight;
    case 36: return frameBitDepth;
    case 37: return framesPerSecond;
    case 38: return qpSum;
    case 39: return totalDecodeTime;
    case 40: return totalInterFrameDelay;
    case 41: return totalSquaredInterFrameDelay;
    case 42: return lastPacketReceivedTimestamp;
    case 43: return averageRtcpInterval;
    case 44: return headerBytesReceived;
    case 45: return fecPacketsReceived;
    case 46: return fecPacketsDiscarded;
    case 47: return bytesReceived;
    case 48: return packetsFailedDecryption;
    case 49: return packetsDuplicated;
    case 50: return perDscpPacketsReceived;
    case 51: return firCount;
    case 52: return pliCount;
    case 53: return nackCount;
    case 54: return sliCount;
    case 55: return totalProcessingDelay;
    case 56: return estimatedPlayoutTimestamp;
    case 57: return jitterBufferDelay;
    case 58: return jitterBufferEmittedCount;
    case 59: return framesReceived;
    case 60: return decoderImplementation;
    case 61: return packetsSent;
    case 62: return bytesSent;
    case 63: return remoteTimestamp;
    case 64: return reportsSent;
    case 65: return ended;
    case 66: return payloadType;
    case 67: return mimeType;
    case 68: return clockRate;
    case 69: return sdpFmtpLine;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: serviceId = (String)value$; break;
    case 1: serviceName = (String)value$; break;
    case 2: mediaUnitId = (String)value$; break;
    case 3: marker = (String)value$; break;
    case 4: timestamp = (Long)value$; break;
    case 5: callId = (String)value$; break;
    case 6: roomId = (String)value$; break;
    case 7: clientId = (String)value$; break;
    case 8: userId = (String)value$; break;
    case 9: peerConnectionId = (String)value$; break;
    case 10: label = (String)value$; break;
    case 11: remoteUserId = (String)value$; break;
    case 12: remoteClientId = (String)value$; break;
    case 13: remotePeerConnectionId = (String)value$; break;
    case 14: sampleSeq = (Integer)value$; break;
    case 15: ssrc = (Long)value$; break;
    case 16: packetsReceived = (Integer)value$; break;
    case 17: packetsLost = (Integer)value$; break;
    case 18: jitter = (Double)value$; break;
    case 19: packetsDiscarded = (Integer)value$; break;
    case 20: packetsRepaired = (Integer)value$; break;
    case 21: burstPacketsLost = (Integer)value$; break;
    case 22: burstPacketsDiscarded = (Integer)value$; break;
    case 23: burstLossCount = (Integer)value$; break;
    case 24: burstDiscardCount = (Integer)value$; break;
    case 25: burstLossRate = (Double)value$; break;
    case 26: burstDiscardRate = (Integer)value$; break;
    case 27: gapLossRate = (Double)value$; break;
    case 28: gapDiscardRate = (Double)value$; break;
    case 29: framesDropped = (Double)value$; break;
    case 30: partialFramesLost = (Double)value$; break;
    case 31: fullFramesLost = (Integer)value$; break;
    case 32: framesDecoded = (Integer)value$; break;
    case 33: keyFramesDecoded = (Integer)value$; break;
    case 34: frameWidth = (Integer)value$; break;
    case 35: frameHeight = (Integer)value$; break;
    case 36: frameBitDepth = (Integer)value$; break;
    case 37: framesPerSecond = (Double)value$; break;
    case 38: qpSum = (Long)value$; break;
    case 39: totalDecodeTime = (Long)value$; break;
    case 40: totalInterFrameDelay = (Long)value$; break;
    case 41: totalSquaredInterFrameDelay = (Long)value$; break;
    case 42: lastPacketReceivedTimestamp = (Boolean)value$; break;
    case 43: averageRtcpInterval = (Double)value$; break;
    case 44: headerBytesReceived = (Long)value$; break;
    case 45: fecPacketsReceived = (Integer)value$; break;
    case 46: fecPacketsDiscarded = (Integer)value$; break;
    case 47: bytesReceived = (Long)value$; break;
    case 48: packetsFailedDecryption = (Integer)value$; break;
    case 49: packetsDuplicated = (Integer)value$; break;
    case 50: perDscpPacketsReceived = (Double)value$; break;
    case 51: firCount = (Integer)value$; break;
    case 52: pliCount = (Integer)value$; break;
    case 53: nackCount = (Integer)value$; break;
    case 54: sliCount = (Integer)value$; break;
    case 55: totalProcessingDelay = (Double)value$; break;
    case 56: estimatedPlayoutTimestamp = (Double)value$; break;
    case 57: jitterBufferDelay = (Double)value$; break;
    case 58: jitterBufferEmittedCount = (Integer)value$; break;
    case 59: framesReceived = (Integer)value$; break;
    case 60: decoderImplementation = (String)value$; break;
    case 61: packetsSent = (Integer)value$; break;
    case 62: bytesSent = (Integer)value$; break;
    case 63: remoteTimestamp = (Double)value$; break;
    case 64: reportsSent = (Integer)value$; break;
    case 65: ended = (Boolean)value$; break;
    case 66: payloadType = (Integer)value$; break;
    case 67: mimeType = (String)value$; break;
    case 68: clockRate = (Long)value$; break;
    case 69: sdpFmtpLine = (String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'serviceId' field.
   * @return The unique identifier of the service
   */
  public String getServiceId() {
    return serviceId;
  }


  /**
   * Gets the value of the 'serviceName' field.
   * @return The resolved service name configured for the service Id
   */
  public String getServiceName() {
    return serviceName;
  }


  /**
   * Gets the value of the 'mediaUnitId' field.
   * @return The media unit id the report belongs to
   */
  public String getMediaUnitId() {
    return mediaUnitId;
  }


  /**
   * Gets the value of the 'marker' field.
   * @return The marker the originated sample is reported with
   */
  public String getMarker() {
    return marker;
  }


  /**
   * Gets the value of the 'timestamp' field.
   * @return The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
   */
  public Long getTimestamp() {
    return timestamp;
  }


  /**
   * Gets the value of the 'callId' field.
   * @return The generated unique identifier of the call
   */
  public String getCallId() {
    return callId;
  }


  /**
   * Gets the value of the 'roomId' field.
   * @return webrtc app provided room id
   */
  public String getRoomId() {
    return roomId;
  }


  /**
   * Gets the value of the 'clientId' field.
   * @return The generated unique identifier of the client
   */
  public String getClientId() {
    return clientId;
  }


  /**
   * Gets the value of the 'userId' field.
   * @return webrtc app provided user identifier
   */
  public String getUserId() {
    return userId;
  }


  /**
   * Gets the value of the 'peerConnectionId' field.
   * @return The unique identifier of the peer connection
   */
  public String getPeerConnectionId() {
    return peerConnectionId;
  }


  /**
   * Gets the value of the 'label' field.
   * @return The webrtc app provided label the peer connection is labeled with
   */
  public String getLabel() {
    return label;
  }


  /**
   * Gets the value of the 'remoteUserId' field.
   * @return The webrtc app provided user id the track belongs to, or if the webrtc app did not provided the observer tried to match it
   */
  public String getRemoteUserId() {
    return remoteUserId;
  }


  /**
   * Gets the value of the 'remoteClientId' field.
   * @return The observer matched remote client Id
   */
  public String getRemoteClientId() {
    return remoteClientId;
  }


  /**
   * Gets the value of the 'remotePeerConnectionId' field.
   * @return The observer matched remote Peer Connection Id
   */
  public String getRemotePeerConnectionId() {
    return remotePeerConnectionId;
  }


  /**
   * Gets the value of the 'sampleSeq' field.
   * @return The sequence number of the sample the report is generated from
   */
  public Integer getSampleSeq() {
    return sampleSeq;
  }


  /**
   * Gets the value of the 'ssrc' field.
   * @return The RTP SSRC field
   */
  public Long getSsrc() {
    return ssrc;
  }


  /**
   * Gets the value of the 'packetsReceived' field.
   * @return The total number of packets received on the corresponded synchronization source
   */
  public Integer getPacketsReceived() {
    return packetsReceived;
  }


  /**
   * Gets the value of the 'packetsLost' field.
   * @return The total number of bytes received on the corresponded synchronization source
   */
  public Integer getPacketsLost() {
    return packetsLost;
  }


  /**
   * Gets the value of the 'jitter' field.
   * @return The corresponded synchronization source reported jitter
   */
  public Double getJitter() {
    return jitter;
  }


  /**
   * Gets the value of the 'packetsDiscarded' field.
   * @return The total number of packets missed the playout point and therefore discarded by the jitterbuffer
   */
  public Integer getPacketsDiscarded() {
    return packetsDiscarded;
  }


  /**
   * Gets the value of the 'packetsRepaired' field.
   * @return The total number of packets repaired by either FEC or due to retransmission on the corresponded synchronization source
   */
  public Integer getPacketsRepaired() {
    return packetsRepaired;
  }


  /**
   * Gets the value of the 'burstPacketsLost' field.
   * @return The total number of packets lost in burst (RFC6958)
   */
  public Integer getBurstPacketsLost() {
    return burstPacketsLost;
  }


  /**
   * Gets the value of the 'burstPacketsDiscarded' field.
   * @return The total number of packets discarded in burst (RFC6958)
   */
  public Integer getBurstPacketsDiscarded() {
    return burstPacketsDiscarded;
  }


  /**
   * Gets the value of the 'burstLossCount' field.
   * @return The total number of burst happened causes burstPacketsLost on the corresponding synchronization source
   */
  public Integer getBurstLossCount() {
    return burstLossCount;
  }


  /**
   * Gets the value of the 'burstDiscardCount' field.
   * @return The total number of burst happened causes burstPacketsDiscarded on the corresponding synchronization source
   */
  public Integer getBurstDiscardCount() {
    return burstDiscardCount;
  }


  /**
   * Gets the value of the 'burstLossRate' field.
   * @return The fraction of RTP packets lost during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
   */
  public Double getBurstLossRate() {
    return burstLossRate;
  }


  /**
   * Gets the value of the 'burstDiscardRate' field.
   * @return The fraction of RTP packets discarded during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
   */
  public Integer getBurstDiscardRate() {
    return burstDiscardRate;
  }


  /**
   * Gets the value of the 'gapLossRate' field.
   * @return The fraction of RTP packets lost during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
   */
  public Double getGapLossRate() {
    return gapLossRate;
  }


  /**
   * Gets the value of the 'gapDiscardRate' field.
   * @return The fraction of RTP packets discarded during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
   */
  public Double getGapDiscardRate() {
    return gapDiscardRate;
  }


  /**
   * Gets the value of the 'framesDropped' field.
   * @return The total number of frames dropped at decoding process on the corresponding synchronization source
   */
  public Double getFramesDropped() {
    return framesDropped;
  }


  /**
   * Gets the value of the 'partialFramesLost' field.
   * @return The total number of partial frames lost at decoding process on the corresponding synchronization source
   */
  public Double getPartialFramesLost() {
    return partialFramesLost;
  }


  /**
   * Gets the value of the 'fullFramesLost' field.
   * @return The total number of full frames lost at decoding process on the corresponding synchronization source
   */
  public Integer getFullFramesLost() {
    return fullFramesLost;
  }


  /**
   * Gets the value of the 'framesDecoded' field.
   * @return Indicate the number of frames completly and without error decoded on the corresponded synchronization source (ssrc)
   */
  public Integer getFramesDecoded() {
    return framesDecoded;
  }


  /**
   * Gets the value of the 'keyFramesDecoded' field.
   * @return Indicate the number of keyframes received on the corresponded synchronization source (ssrc)
   */
  public Integer getKeyFramesDecoded() {
    return keyFramesDecoded;
  }


  /**
   * Gets the value of the 'frameWidth' field.
   * @return Indicate the width of the frame received on the corresponded synchronization source (ssrc)
   */
  public Integer getFrameWidth() {
    return frameWidth;
  }


  /**
   * Gets the value of the 'frameHeight' field.
   * @return Indicate the height of the frame received on the corresponded synchronization source (ssrc)
   */
  public Integer getFrameHeight() {
    return frameHeight;
  }


  /**
   * Gets the value of the 'frameBitDepth' field.
   * @return Indicate the bit depth per pixel of the last decoded frame received on the corresponded synchronization source (ssrc)
   */
  public Integer getFrameBitDepth() {
    return frameBitDepth;
  }


  /**
   * Gets the value of the 'framesPerSecond' field.
   * @return Indicate the number of decoded frames in the last second received on the corresponded synchronization source (ssrc)
   */
  public Double getFramesPerSecond() {
    return framesPerSecond;
  }


  /**
   * Gets the value of the 'qpSum' field.
   * @return sum of QP values of frames decoded on the corresponded synchronization source (ssrc)
   */
  public Long getQpSum() {
    return qpSum;
  }


  /**
   * Gets the value of the 'totalDecodeTime' field.
   * @return The total number of seconds spent on decoding frames on the corresponded synchronization source (ssrc)
   */
  public Long getTotalDecodeTime() {
    return totalDecodeTime;
  }


  /**
   * Gets the value of the 'totalInterFrameDelay' field.
   * @return The total number of inter frame delay on the corresponded synchronization source (ssrc)
   */
  public Long getTotalInterFrameDelay() {
    return totalInterFrameDelay;
  }


  /**
   * Gets the value of the 'totalSquaredInterFrameDelay' field.
   * @return The total number of inter frame delay squere on the corresponded synchronization source (ssrc) Useful for variance calculation for interframe delays
   */
  public Long getTotalSquaredInterFrameDelay() {
    return totalSquaredInterFrameDelay;
  }


  /**
   * Gets the value of the 'lastPacketReceivedTimestamp' field.
   * @return Represents the timestamp at which the last packet was received on the corresponded synchronization source (ssrc)
   */
  public Boolean getLastPacketReceivedTimestamp() {
    return lastPacketReceivedTimestamp;
  }


  /**
   * Gets the value of the 'averageRtcpInterval' field.
   * @return The average RTCP interval between two consecutive compound RTCP packets sent for the corresponding synchronization source (ssrc)
   */
  public Double getAverageRtcpInterval() {
    return averageRtcpInterval;
  }


  /**
   * Gets the value of the 'headerBytesReceived' field.
   * @return Total number of RTP header and padding bytes received over the corresponding synchronization source (ssrc)
   */
  public Long getHeaderBytesReceived() {
    return headerBytesReceived;
  }


  /**
   * Gets the value of the 'fecPacketsReceived' field.
   * @return Total number of FEC packets received over the corresponding synchronization source (ssrc)
   */
  public Integer getFecPacketsReceived() {
    return fecPacketsReceived;
  }


  /**
   * Gets the value of the 'fecPacketsDiscarded' field.
   * @return Total number of FEC packets discarded over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired.
   */
  public Integer getFecPacketsDiscarded() {
    return fecPacketsDiscarded;
  }


  /**
   * Gets the value of the 'bytesReceived' field.
   * @return Total number of bytes received over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired.
   */
  public Long getBytesReceived() {
    return bytesReceived;
  }


  /**
   * Gets the value of the 'packetsFailedDecryption' field.
   * @return Total number of packets received and failed to decrypt over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired.
   */
  public Integer getPacketsFailedDecryption() {
    return packetsFailedDecryption;
  }


  /**
   * Gets the value of the 'packetsDuplicated' field.
   * @return Total number of packets identified as duplicated over the corresponding synchronization source (ssrc).
   */
  public Integer getPacketsDuplicated() {
    return packetsDuplicated;
  }


  /**
   * Gets the value of the 'perDscpPacketsReceived' field.
   * @return The total number of DSCP flagged RTP packets received over the corresponding synchronization source (ssrc)
   */
  public Double getPerDscpPacketsReceived() {
    return perDscpPacketsReceived;
  }


  /**
   * Gets the value of the 'firCount' field.
   * @return Count the total number of Full Intra Request sent by this receiver and belongs to the corresponded synchronization source (ssrc)
   */
  public Integer getFirCount() {
    return firCount;
  }


  /**
   * Gets the value of the 'pliCount' field.
   * @return Count the total number of Picture Loss Indication sent by this receiver and belongs to the corresponded synchronization source (ssrc)
   */
  public Integer getPliCount() {
    return pliCount;
  }


  /**
   * Gets the value of the 'nackCount' field.
   * @return Count the total number of Negative ACKnowledgement (NACK) packets sent and belongs to the corresponded synchronization source (ssrc)
   */
  public Integer getNackCount() {
    return nackCount;
  }


  /**
   * Gets the value of the 'sliCount' field.
   * @return Count the total number of Slice Loss Indication sent by this receiver and belongs to the corresponded synchronization source (ssrc)
   */
  public Integer getSliCount() {
    return sliCount;
  }


  /**
   * Gets the value of the 'totalProcessingDelay' field.
   * @return The total processing delay in seconds spend on buffering RTP packets from received up until packets are decoded
   */
  public Double getTotalProcessingDelay() {
    return totalProcessingDelay;
  }


  /**
   * Gets the value of the 'estimatedPlayoutTimestamp' field.
   * @return The estimated playout time of the corresponded synchronization source
   */
  public Double getEstimatedPlayoutTimestamp() {
    return estimatedPlayoutTimestamp;
  }


  /**
   * Gets the value of the 'jitterBufferDelay' field.
   * @return The total time of RTP packets spent in jitterbuffer waiting for frame completion due to network uncertenity.
   */
  public Double getJitterBufferDelay() {
    return jitterBufferDelay;
  }


  /**
   * Gets the value of the 'jitterBufferEmittedCount' field.
   * @return The total number of audio samples or video frames that have come out of the jitter buffer on the corresponded synchronization source (ssrc)
   */
  public Integer getJitterBufferEmittedCount() {
    return jitterBufferEmittedCount;
  }


  /**
   * Gets the value of the 'framesReceived' field.
   * @return Represents the total number of complete frames received on the corresponded synchronization source (ssrc)
   */
  public Integer getFramesReceived() {
    return framesReceived;
  }


  /**
   * Gets the value of the 'decoderImplementation' field.
   * @return Indicate the name of the decoder implementation library
   */
  public String getDecoderImplementation() {
    return decoderImplementation;
  }


  /**
   * Gets the value of the 'packetsSent' field.
   * @return Total number of RTP packets sent at the remote endpoint to this endpoint on this synchronization source
   */
  public Integer getPacketsSent() {
    return packetsSent;
  }


  /**
   * Gets the value of the 'bytesSent' field.
   * @return Total number of payload bytes sent at the remote endpoint to this endpoint on this synchronization source
   */
  public Integer getBytesSent() {
    return bytesSent;
  }


  /**
   * Gets the value of the 'remoteTimestamp' field.
   * @return The timestamp corresnponds to the time in UTC Epoch the remote endpoint reported the statistics belong to the sender side and correspond to the synchronization source (ssrc)
   */
  public Double getRemoteTimestamp() {
    return remoteTimestamp;
  }


  /**
   * Gets the value of the 'reportsSent' field.
   * @return The number of SR reports the remote endpoint sent corresponded to synchronization source (ssrc) this report belongs to
   */
  public Integer getReportsSent() {
    return reportsSent;
  }


  /**
   * Gets the value of the 'ended' field.
   * @return Flag represents if the receiver ended the media stream track or not.
   */
  public Boolean getEnded() {
    return ended;
  }


  /**
   * Gets the value of the 'payloadType' field.
   * @return The type of the payload the RTP packet SSRC belongs to
   */
  public Integer getPayloadType() {
    return payloadType;
  }


  /**
   * Gets the value of the 'mimeType' field.
   * @return the MIME type of the codec (e.g.: video/vp8)
   */
  public String getMimeType() {
    return mimeType;
  }


  /**
   * Gets the value of the 'clockRate' field.
   * @return The negotiated clock rate the RTP timestamp is generated of
   */
  public Long getClockRate() {
    return clockRate;
  }


  /**
   * Gets the value of the 'sdpFmtpLine' field.
   * @return The a=fmtp line in the SDP corresponding to the codec
   */
  public String getSdpFmtpLine() {
    return sdpFmtpLine;
  }


  /**
   * Creates a new InboundVideoTrackReport RecordBuilder.
   * @return A new InboundVideoTrackReport RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new InboundVideoTrackReport RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new InboundVideoTrackReport RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }

  /**
   * Creates a new InboundVideoTrackReport RecordBuilder by copying an existing InboundVideoTrackReport instance.
   * @param other The existing instance to copy.
   * @return A new InboundVideoTrackReport RecordBuilder
   */
  public static Builder newBuilder(InboundVideoTrackReport other) {
    return new Builder(other);
  }

  /**
   * RecordBuilder for InboundVideoTrackReport instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<InboundVideoTrackReport>
    implements org.apache.avro.data.RecordBuilder<InboundVideoTrackReport> {

    /** The unique identifier of the service */
    private String serviceId;
    /** The resolved service name configured for the service Id */
    private String serviceName;
    /** The media unit id the report belongs to */
    private String mediaUnitId;
    /** The marker the originated sample is reported with */
    private String marker;
    /** The timestamp when the corresponded data is generated for the report (UTC Epoch in ms) */
    private long timestamp;
    /** The generated unique identifier of the call */
    private String callId;
    /** webrtc app provided room id */
    private String roomId;
    /** The generated unique identifier of the client */
    private String clientId;
    /** webrtc app provided user identifier */
    private String userId;
    /** The unique identifier of the peer connection */
    private String peerConnectionId;
    /** The webrtc app provided label the peer connection is labeled with */
    private String label;
    /** The webrtc app provided user id the track belongs to, or if the webrtc app did not provided the observer tried to match it */
    private String remoteUserId;
    /** The observer matched remote client Id */
    private String remoteClientId;
    /** The observer matched remote Peer Connection Id */
    private String remotePeerConnectionId;
    /** The sequence number of the sample the report is generated from */
    private int sampleSeq;
    /** The RTP SSRC field */
    private long ssrc;
    /** The total number of packets received on the corresponded synchronization source */
    private Integer packetsReceived;
    /** The total number of bytes received on the corresponded synchronization source */
    private Integer packetsLost;
    /** The corresponded synchronization source reported jitter */
    private Double jitter;
    /** The total number of packets missed the playout point and therefore discarded by the jitterbuffer */
    private Integer packetsDiscarded;
    /** The total number of packets repaired by either FEC or due to retransmission on the corresponded synchronization source */
    private Integer packetsRepaired;
    /** The total number of packets lost in burst (RFC6958) */
    private Integer burstPacketsLost;
    /** The total number of packets discarded in burst (RFC6958) */
    private Integer burstPacketsDiscarded;
    /** The total number of burst happened causes burstPacketsLost on the corresponding synchronization source */
    private Integer burstLossCount;
    /** The total number of burst happened causes burstPacketsDiscarded on the corresponding synchronization source */
    private Integer burstDiscardCount;
    /** The fraction of RTP packets lost during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source */
    private Double burstLossRate;
    /** The fraction of RTP packets discarded during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source */
    private Integer burstDiscardRate;
    /** The fraction of RTP packets lost during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source */
    private Double gapLossRate;
    /** The fraction of RTP packets discarded during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source */
    private Double gapDiscardRate;
    /** The total number of frames dropped at decoding process on the corresponding synchronization source */
    private Double framesDropped;
    /** The total number of partial frames lost at decoding process on the corresponding synchronization source */
    private Double partialFramesLost;
    /** The total number of full frames lost at decoding process on the corresponding synchronization source */
    private Integer fullFramesLost;
    /** Indicate the number of frames completly and without error decoded on the corresponded synchronization source (ssrc) */
    private Integer framesDecoded;
    /** Indicate the number of keyframes received on the corresponded synchronization source (ssrc) */
    private Integer keyFramesDecoded;
    /** Indicate the width of the frame received on the corresponded synchronization source (ssrc) */
    private Integer frameWidth;
    /** Indicate the height of the frame received on the corresponded synchronization source (ssrc) */
    private Integer frameHeight;
    /** Indicate the bit depth per pixel of the last decoded frame received on the corresponded synchronization source (ssrc) */
    private Integer frameBitDepth;
    /** Indicate the number of decoded frames in the last second received on the corresponded synchronization source (ssrc) */
    private Double framesPerSecond;
    /** sum of QP values of frames decoded on the corresponded synchronization source (ssrc) */
    private Long qpSum;
    /** The total number of seconds spent on decoding frames on the corresponded synchronization source (ssrc) */
    private Long totalDecodeTime;
    /** The total number of inter frame delay on the corresponded synchronization source (ssrc) */
    private Long totalInterFrameDelay;
    /** The total number of inter frame delay squere on the corresponded synchronization source (ssrc) Useful for variance calculation for interframe delays */
    private Long totalSquaredInterFrameDelay;
    /** Represents the timestamp at which the last packet was received on the corresponded synchronization source (ssrc) */
    private Boolean lastPacketReceivedTimestamp;
    /** The average RTCP interval between two consecutive compound RTCP packets sent for the corresponding synchronization source (ssrc) */
    private Double averageRtcpInterval;
    /** Total number of RTP header and padding bytes received over the corresponding synchronization source (ssrc) */
    private Long headerBytesReceived;
    /** Total number of FEC packets received over the corresponding synchronization source (ssrc) */
    private Integer fecPacketsReceived;
    /** Total number of FEC packets discarded over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired. */
    private Integer fecPacketsDiscarded;
    /** Total number of bytes received over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired. */
    private Long bytesReceived;
    /** Total number of packets received and failed to decrypt over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired. */
    private Integer packetsFailedDecryption;
    /** Total number of packets identified as duplicated over the corresponding synchronization source (ssrc). */
    private Integer packetsDuplicated;
    /** The total number of DSCP flagged RTP packets received over the corresponding synchronization source (ssrc) */
    private Double perDscpPacketsReceived;
    /** Count the total number of Full Intra Request sent by this receiver and belongs to the corresponded synchronization source (ssrc) */
    private Integer firCount;
    /** Count the total number of Picture Loss Indication sent by this receiver and belongs to the corresponded synchronization source (ssrc) */
    private Integer pliCount;
    /** Count the total number of Negative ACKnowledgement (NACK) packets sent and belongs to the corresponded synchronization source (ssrc) */
    private Integer nackCount;
    /** Count the total number of Slice Loss Indication sent by this receiver and belongs to the corresponded synchronization source (ssrc) */
    private Integer sliCount;
    /** The total processing delay in seconds spend on buffering RTP packets from received up until packets are decoded */
    private Double totalProcessingDelay;
    /** The estimated playout time of the corresponded synchronization source */
    private Double estimatedPlayoutTimestamp;
    /** The total time of RTP packets spent in jitterbuffer waiting for frame completion due to network uncertenity. */
    private Double jitterBufferDelay;
    /** The total number of audio samples or video frames that have come out of the jitter buffer on the corresponded synchronization source (ssrc) */
    private Integer jitterBufferEmittedCount;
    /** Represents the total number of complete frames received on the corresponded synchronization source (ssrc) */
    private Integer framesReceived;
    /** Indicate the name of the decoder implementation library */
    private String decoderImplementation;
    /** Total number of RTP packets sent at the remote endpoint to this endpoint on this synchronization source */
    private Integer packetsSent;
    /** Total number of payload bytes sent at the remote endpoint to this endpoint on this synchronization source */
    private Integer bytesSent;
    /** The timestamp corresnponds to the time in UTC Epoch the remote endpoint reported the statistics belong to the sender side and correspond to the synchronization source (ssrc) */
    private Double remoteTimestamp;
    /** The number of SR reports the remote endpoint sent corresponded to synchronization source (ssrc) this report belongs to */
    private Integer reportsSent;
    /** Flag represents if the receiver ended the media stream track or not. */
    private Boolean ended;
    /** The type of the payload the RTP packet SSRC belongs to */
    private Integer payloadType;
    /** the MIME type of the codec (e.g.: video/vp8) */
    private String mimeType;
    /** The negotiated clock rate the RTP timestamp is generated of */
    private Long clockRate;
    /** The a=fmtp line in the SDP corresponding to the codec */
    private String sdpFmtpLine;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.serviceId)) {
        this.serviceId = data().deepCopy(fields()[0].schema(), other.serviceId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.serviceName)) {
        this.serviceName = data().deepCopy(fields()[1].schema(), other.serviceName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.mediaUnitId)) {
        this.mediaUnitId = data().deepCopy(fields()[2].schema(), other.mediaUnitId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.marker)) {
        this.marker = data().deepCopy(fields()[3].schema(), other.marker);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[4].schema(), other.timestamp);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.callId)) {
        this.callId = data().deepCopy(fields()[5].schema(), other.callId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.roomId)) {
        this.roomId = data().deepCopy(fields()[6].schema(), other.roomId);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.clientId)) {
        this.clientId = data().deepCopy(fields()[7].schema(), other.clientId);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.userId)) {
        this.userId = data().deepCopy(fields()[8].schema(), other.userId);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.peerConnectionId)) {
        this.peerConnectionId = data().deepCopy(fields()[9].schema(), other.peerConnectionId);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.label)) {
        this.label = data().deepCopy(fields()[10].schema(), other.label);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.remoteUserId)) {
        this.remoteUserId = data().deepCopy(fields()[11].schema(), other.remoteUserId);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.remoteClientId)) {
        this.remoteClientId = data().deepCopy(fields()[12].schema(), other.remoteClientId);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.remotePeerConnectionId)) {
        this.remotePeerConnectionId = data().deepCopy(fields()[13].schema(), other.remotePeerConnectionId);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.sampleSeq)) {
        this.sampleSeq = data().deepCopy(fields()[14].schema(), other.sampleSeq);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.ssrc)) {
        this.ssrc = data().deepCopy(fields()[15].schema(), other.ssrc);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.packetsReceived)) {
        this.packetsReceived = data().deepCopy(fields()[16].schema(), other.packetsReceived);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.packetsLost)) {
        this.packetsLost = data().deepCopy(fields()[17].schema(), other.packetsLost);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.jitter)) {
        this.jitter = data().deepCopy(fields()[18].schema(), other.jitter);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.packetsDiscarded)) {
        this.packetsDiscarded = data().deepCopy(fields()[19].schema(), other.packetsDiscarded);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.packetsRepaired)) {
        this.packetsRepaired = data().deepCopy(fields()[20].schema(), other.packetsRepaired);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.burstPacketsLost)) {
        this.burstPacketsLost = data().deepCopy(fields()[21].schema(), other.burstPacketsLost);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.burstPacketsDiscarded)) {
        this.burstPacketsDiscarded = data().deepCopy(fields()[22].schema(), other.burstPacketsDiscarded);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.burstLossCount)) {
        this.burstLossCount = data().deepCopy(fields()[23].schema(), other.burstLossCount);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.burstDiscardCount)) {
        this.burstDiscardCount = data().deepCopy(fields()[24].schema(), other.burstDiscardCount);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.burstLossRate)) {
        this.burstLossRate = data().deepCopy(fields()[25].schema(), other.burstLossRate);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.burstDiscardRate)) {
        this.burstDiscardRate = data().deepCopy(fields()[26].schema(), other.burstDiscardRate);
        fieldSetFlags()[26] = true;
      }
      if (isValidValue(fields()[27], other.gapLossRate)) {
        this.gapLossRate = data().deepCopy(fields()[27].schema(), other.gapLossRate);
        fieldSetFlags()[27] = true;
      }
      if (isValidValue(fields()[28], other.gapDiscardRate)) {
        this.gapDiscardRate = data().deepCopy(fields()[28].schema(), other.gapDiscardRate);
        fieldSetFlags()[28] = true;
      }
      if (isValidValue(fields()[29], other.framesDropped)) {
        this.framesDropped = data().deepCopy(fields()[29].schema(), other.framesDropped);
        fieldSetFlags()[29] = true;
      }
      if (isValidValue(fields()[30], other.partialFramesLost)) {
        this.partialFramesLost = data().deepCopy(fields()[30].schema(), other.partialFramesLost);
        fieldSetFlags()[30] = true;
      }
      if (isValidValue(fields()[31], other.fullFramesLost)) {
        this.fullFramesLost = data().deepCopy(fields()[31].schema(), other.fullFramesLost);
        fieldSetFlags()[31] = true;
      }
      if (isValidValue(fields()[32], other.framesDecoded)) {
        this.framesDecoded = data().deepCopy(fields()[32].schema(), other.framesDecoded);
        fieldSetFlags()[32] = true;
      }
      if (isValidValue(fields()[33], other.keyFramesDecoded)) {
        this.keyFramesDecoded = data().deepCopy(fields()[33].schema(), other.keyFramesDecoded);
        fieldSetFlags()[33] = true;
      }
      if (isValidValue(fields()[34], other.frameWidth)) {
        this.frameWidth = data().deepCopy(fields()[34].schema(), other.frameWidth);
        fieldSetFlags()[34] = true;
      }
      if (isValidValue(fields()[35], other.frameHeight)) {
        this.frameHeight = data().deepCopy(fields()[35].schema(), other.frameHeight);
        fieldSetFlags()[35] = true;
      }
      if (isValidValue(fields()[36], other.frameBitDepth)) {
        this.frameBitDepth = data().deepCopy(fields()[36].schema(), other.frameBitDepth);
        fieldSetFlags()[36] = true;
      }
      if (isValidValue(fields()[37], other.framesPerSecond)) {
        this.framesPerSecond = data().deepCopy(fields()[37].schema(), other.framesPerSecond);
        fieldSetFlags()[37] = true;
      }
      if (isValidValue(fields()[38], other.qpSum)) {
        this.qpSum = data().deepCopy(fields()[38].schema(), other.qpSum);
        fieldSetFlags()[38] = true;
      }
      if (isValidValue(fields()[39], other.totalDecodeTime)) {
        this.totalDecodeTime = data().deepCopy(fields()[39].schema(), other.totalDecodeTime);
        fieldSetFlags()[39] = true;
      }
      if (isValidValue(fields()[40], other.totalInterFrameDelay)) {
        this.totalInterFrameDelay = data().deepCopy(fields()[40].schema(), other.totalInterFrameDelay);
        fieldSetFlags()[40] = true;
      }
      if (isValidValue(fields()[41], other.totalSquaredInterFrameDelay)) {
        this.totalSquaredInterFrameDelay = data().deepCopy(fields()[41].schema(), other.totalSquaredInterFrameDelay);
        fieldSetFlags()[41] = true;
      }
      if (isValidValue(fields()[42], other.lastPacketReceivedTimestamp)) {
        this.lastPacketReceivedTimestamp = data().deepCopy(fields()[42].schema(), other.lastPacketReceivedTimestamp);
        fieldSetFlags()[42] = true;
      }
      if (isValidValue(fields()[43], other.averageRtcpInterval)) {
        this.averageRtcpInterval = data().deepCopy(fields()[43].schema(), other.averageRtcpInterval);
        fieldSetFlags()[43] = true;
      }
      if (isValidValue(fields()[44], other.headerBytesReceived)) {
        this.headerBytesReceived = data().deepCopy(fields()[44].schema(), other.headerBytesReceived);
        fieldSetFlags()[44] = true;
      }
      if (isValidValue(fields()[45], other.fecPacketsReceived)) {
        this.fecPacketsReceived = data().deepCopy(fields()[45].schema(), other.fecPacketsReceived);
        fieldSetFlags()[45] = true;
      }
      if (isValidValue(fields()[46], other.fecPacketsDiscarded)) {
        this.fecPacketsDiscarded = data().deepCopy(fields()[46].schema(), other.fecPacketsDiscarded);
        fieldSetFlags()[46] = true;
      }
      if (isValidValue(fields()[47], other.bytesReceived)) {
        this.bytesReceived = data().deepCopy(fields()[47].schema(), other.bytesReceived);
        fieldSetFlags()[47] = true;
      }
      if (isValidValue(fields()[48], other.packetsFailedDecryption)) {
        this.packetsFailedDecryption = data().deepCopy(fields()[48].schema(), other.packetsFailedDecryption);
        fieldSetFlags()[48] = true;
      }
      if (isValidValue(fields()[49], other.packetsDuplicated)) {
        this.packetsDuplicated = data().deepCopy(fields()[49].schema(), other.packetsDuplicated);
        fieldSetFlags()[49] = true;
      }
      if (isValidValue(fields()[50], other.perDscpPacketsReceived)) {
        this.perDscpPacketsReceived = data().deepCopy(fields()[50].schema(), other.perDscpPacketsReceived);
        fieldSetFlags()[50] = true;
      }
      if (isValidValue(fields()[51], other.firCount)) {
        this.firCount = data().deepCopy(fields()[51].schema(), other.firCount);
        fieldSetFlags()[51] = true;
      }
      if (isValidValue(fields()[52], other.pliCount)) {
        this.pliCount = data().deepCopy(fields()[52].schema(), other.pliCount);
        fieldSetFlags()[52] = true;
      }
      if (isValidValue(fields()[53], other.nackCount)) {
        this.nackCount = data().deepCopy(fields()[53].schema(), other.nackCount);
        fieldSetFlags()[53] = true;
      }
      if (isValidValue(fields()[54], other.sliCount)) {
        this.sliCount = data().deepCopy(fields()[54].schema(), other.sliCount);
        fieldSetFlags()[54] = true;
      }
      if (isValidValue(fields()[55], other.totalProcessingDelay)) {
        this.totalProcessingDelay = data().deepCopy(fields()[55].schema(), other.totalProcessingDelay);
        fieldSetFlags()[55] = true;
      }
      if (isValidValue(fields()[56], other.estimatedPlayoutTimestamp)) {
        this.estimatedPlayoutTimestamp = data().deepCopy(fields()[56].schema(), other.estimatedPlayoutTimestamp);
        fieldSetFlags()[56] = true;
      }
      if (isValidValue(fields()[57], other.jitterBufferDelay)) {
        this.jitterBufferDelay = data().deepCopy(fields()[57].schema(), other.jitterBufferDelay);
        fieldSetFlags()[57] = true;
      }
      if (isValidValue(fields()[58], other.jitterBufferEmittedCount)) {
        this.jitterBufferEmittedCount = data().deepCopy(fields()[58].schema(), other.jitterBufferEmittedCount);
        fieldSetFlags()[58] = true;
      }
      if (isValidValue(fields()[59], other.framesReceived)) {
        this.framesReceived = data().deepCopy(fields()[59].schema(), other.framesReceived);
        fieldSetFlags()[59] = true;
      }
      if (isValidValue(fields()[60], other.decoderImplementation)) {
        this.decoderImplementation = data().deepCopy(fields()[60].schema(), other.decoderImplementation);
        fieldSetFlags()[60] = true;
      }
      if (isValidValue(fields()[61], other.packetsSent)) {
        this.packetsSent = data().deepCopy(fields()[61].schema(), other.packetsSent);
        fieldSetFlags()[61] = true;
      }
      if (isValidValue(fields()[62], other.bytesSent)) {
        this.bytesSent = data().deepCopy(fields()[62].schema(), other.bytesSent);
        fieldSetFlags()[62] = true;
      }
      if (isValidValue(fields()[63], other.remoteTimestamp)) {
        this.remoteTimestamp = data().deepCopy(fields()[63].schema(), other.remoteTimestamp);
        fieldSetFlags()[63] = true;
      }
      if (isValidValue(fields()[64], other.reportsSent)) {
        this.reportsSent = data().deepCopy(fields()[64].schema(), other.reportsSent);
        fieldSetFlags()[64] = true;
      }
      if (isValidValue(fields()[65], other.ended)) {
        this.ended = data().deepCopy(fields()[65].schema(), other.ended);
        fieldSetFlags()[65] = true;
      }
      if (isValidValue(fields()[66], other.payloadType)) {
        this.payloadType = data().deepCopy(fields()[66].schema(), other.payloadType);
        fieldSetFlags()[66] = true;
      }
      if (isValidValue(fields()[67], other.mimeType)) {
        this.mimeType = data().deepCopy(fields()[67].schema(), other.mimeType);
        fieldSetFlags()[67] = true;
      }
      if (isValidValue(fields()[68], other.clockRate)) {
        this.clockRate = data().deepCopy(fields()[68].schema(), other.clockRate);
        fieldSetFlags()[68] = true;
      }
      if (isValidValue(fields()[69], other.sdpFmtpLine)) {
        this.sdpFmtpLine = data().deepCopy(fields()[69].schema(), other.sdpFmtpLine);
        fieldSetFlags()[69] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing InboundVideoTrackReport instance
     * @param other The existing instance to copy.
     */
    private Builder(InboundVideoTrackReport other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.serviceId)) {
        this.serviceId = data().deepCopy(fields()[0].schema(), other.serviceId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.serviceName)) {
        this.serviceName = data().deepCopy(fields()[1].schema(), other.serviceName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.mediaUnitId)) {
        this.mediaUnitId = data().deepCopy(fields()[2].schema(), other.mediaUnitId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.marker)) {
        this.marker = data().deepCopy(fields()[3].schema(), other.marker);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[4].schema(), other.timestamp);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.callId)) {
        this.callId = data().deepCopy(fields()[5].schema(), other.callId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.roomId)) {
        this.roomId = data().deepCopy(fields()[6].schema(), other.roomId);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.clientId)) {
        this.clientId = data().deepCopy(fields()[7].schema(), other.clientId);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.userId)) {
        this.userId = data().deepCopy(fields()[8].schema(), other.userId);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.peerConnectionId)) {
        this.peerConnectionId = data().deepCopy(fields()[9].schema(), other.peerConnectionId);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.label)) {
        this.label = data().deepCopy(fields()[10].schema(), other.label);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.remoteUserId)) {
        this.remoteUserId = data().deepCopy(fields()[11].schema(), other.remoteUserId);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.remoteClientId)) {
        this.remoteClientId = data().deepCopy(fields()[12].schema(), other.remoteClientId);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.remotePeerConnectionId)) {
        this.remotePeerConnectionId = data().deepCopy(fields()[13].schema(), other.remotePeerConnectionId);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.sampleSeq)) {
        this.sampleSeq = data().deepCopy(fields()[14].schema(), other.sampleSeq);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.ssrc)) {
        this.ssrc = data().deepCopy(fields()[15].schema(), other.ssrc);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.packetsReceived)) {
        this.packetsReceived = data().deepCopy(fields()[16].schema(), other.packetsReceived);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.packetsLost)) {
        this.packetsLost = data().deepCopy(fields()[17].schema(), other.packetsLost);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.jitter)) {
        this.jitter = data().deepCopy(fields()[18].schema(), other.jitter);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.packetsDiscarded)) {
        this.packetsDiscarded = data().deepCopy(fields()[19].schema(), other.packetsDiscarded);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.packetsRepaired)) {
        this.packetsRepaired = data().deepCopy(fields()[20].schema(), other.packetsRepaired);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.burstPacketsLost)) {
        this.burstPacketsLost = data().deepCopy(fields()[21].schema(), other.burstPacketsLost);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.burstPacketsDiscarded)) {
        this.burstPacketsDiscarded = data().deepCopy(fields()[22].schema(), other.burstPacketsDiscarded);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.burstLossCount)) {
        this.burstLossCount = data().deepCopy(fields()[23].schema(), other.burstLossCount);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.burstDiscardCount)) {
        this.burstDiscardCount = data().deepCopy(fields()[24].schema(), other.burstDiscardCount);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.burstLossRate)) {
        this.burstLossRate = data().deepCopy(fields()[25].schema(), other.burstLossRate);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.burstDiscardRate)) {
        this.burstDiscardRate = data().deepCopy(fields()[26].schema(), other.burstDiscardRate);
        fieldSetFlags()[26] = true;
      }
      if (isValidValue(fields()[27], other.gapLossRate)) {
        this.gapLossRate = data().deepCopy(fields()[27].schema(), other.gapLossRate);
        fieldSetFlags()[27] = true;
      }
      if (isValidValue(fields()[28], other.gapDiscardRate)) {
        this.gapDiscardRate = data().deepCopy(fields()[28].schema(), other.gapDiscardRate);
        fieldSetFlags()[28] = true;
      }
      if (isValidValue(fields()[29], other.framesDropped)) {
        this.framesDropped = data().deepCopy(fields()[29].schema(), other.framesDropped);
        fieldSetFlags()[29] = true;
      }
      if (isValidValue(fields()[30], other.partialFramesLost)) {
        this.partialFramesLost = data().deepCopy(fields()[30].schema(), other.partialFramesLost);
        fieldSetFlags()[30] = true;
      }
      if (isValidValue(fields()[31], other.fullFramesLost)) {
        this.fullFramesLost = data().deepCopy(fields()[31].schema(), other.fullFramesLost);
        fieldSetFlags()[31] = true;
      }
      if (isValidValue(fields()[32], other.framesDecoded)) {
        this.framesDecoded = data().deepCopy(fields()[32].schema(), other.framesDecoded);
        fieldSetFlags()[32] = true;
      }
      if (isValidValue(fields()[33], other.keyFramesDecoded)) {
        this.keyFramesDecoded = data().deepCopy(fields()[33].schema(), other.keyFramesDecoded);
        fieldSetFlags()[33] = true;
      }
      if (isValidValue(fields()[34], other.frameWidth)) {
        this.frameWidth = data().deepCopy(fields()[34].schema(), other.frameWidth);
        fieldSetFlags()[34] = true;
      }
      if (isValidValue(fields()[35], other.frameHeight)) {
        this.frameHeight = data().deepCopy(fields()[35].schema(), other.frameHeight);
        fieldSetFlags()[35] = true;
      }
      if (isValidValue(fields()[36], other.frameBitDepth)) {
        this.frameBitDepth = data().deepCopy(fields()[36].schema(), other.frameBitDepth);
        fieldSetFlags()[36] = true;
      }
      if (isValidValue(fields()[37], other.framesPerSecond)) {
        this.framesPerSecond = data().deepCopy(fields()[37].schema(), other.framesPerSecond);
        fieldSetFlags()[37] = true;
      }
      if (isValidValue(fields()[38], other.qpSum)) {
        this.qpSum = data().deepCopy(fields()[38].schema(), other.qpSum);
        fieldSetFlags()[38] = true;
      }
      if (isValidValue(fields()[39], other.totalDecodeTime)) {
        this.totalDecodeTime = data().deepCopy(fields()[39].schema(), other.totalDecodeTime);
        fieldSetFlags()[39] = true;
      }
      if (isValidValue(fields()[40], other.totalInterFrameDelay)) {
        this.totalInterFrameDelay = data().deepCopy(fields()[40].schema(), other.totalInterFrameDelay);
        fieldSetFlags()[40] = true;
      }
      if (isValidValue(fields()[41], other.totalSquaredInterFrameDelay)) {
        this.totalSquaredInterFrameDelay = data().deepCopy(fields()[41].schema(), other.totalSquaredInterFrameDelay);
        fieldSetFlags()[41] = true;
      }
      if (isValidValue(fields()[42], other.lastPacketReceivedTimestamp)) {
        this.lastPacketReceivedTimestamp = data().deepCopy(fields()[42].schema(), other.lastPacketReceivedTimestamp);
        fieldSetFlags()[42] = true;
      }
      if (isValidValue(fields()[43], other.averageRtcpInterval)) {
        this.averageRtcpInterval = data().deepCopy(fields()[43].schema(), other.averageRtcpInterval);
        fieldSetFlags()[43] = true;
      }
      if (isValidValue(fields()[44], other.headerBytesReceived)) {
        this.headerBytesReceived = data().deepCopy(fields()[44].schema(), other.headerBytesReceived);
        fieldSetFlags()[44] = true;
      }
      if (isValidValue(fields()[45], other.fecPacketsReceived)) {
        this.fecPacketsReceived = data().deepCopy(fields()[45].schema(), other.fecPacketsReceived);
        fieldSetFlags()[45] = true;
      }
      if (isValidValue(fields()[46], other.fecPacketsDiscarded)) {
        this.fecPacketsDiscarded = data().deepCopy(fields()[46].schema(), other.fecPacketsDiscarded);
        fieldSetFlags()[46] = true;
      }
      if (isValidValue(fields()[47], other.bytesReceived)) {
        this.bytesReceived = data().deepCopy(fields()[47].schema(), other.bytesReceived);
        fieldSetFlags()[47] = true;
      }
      if (isValidValue(fields()[48], other.packetsFailedDecryption)) {
        this.packetsFailedDecryption = data().deepCopy(fields()[48].schema(), other.packetsFailedDecryption);
        fieldSetFlags()[48] = true;
      }
      if (isValidValue(fields()[49], other.packetsDuplicated)) {
        this.packetsDuplicated = data().deepCopy(fields()[49].schema(), other.packetsDuplicated);
        fieldSetFlags()[49] = true;
      }
      if (isValidValue(fields()[50], other.perDscpPacketsReceived)) {
        this.perDscpPacketsReceived = data().deepCopy(fields()[50].schema(), other.perDscpPacketsReceived);
        fieldSetFlags()[50] = true;
      }
      if (isValidValue(fields()[51], other.firCount)) {
        this.firCount = data().deepCopy(fields()[51].schema(), other.firCount);
        fieldSetFlags()[51] = true;
      }
      if (isValidValue(fields()[52], other.pliCount)) {
        this.pliCount = data().deepCopy(fields()[52].schema(), other.pliCount);
        fieldSetFlags()[52] = true;
      }
      if (isValidValue(fields()[53], other.nackCount)) {
        this.nackCount = data().deepCopy(fields()[53].schema(), other.nackCount);
        fieldSetFlags()[53] = true;
      }
      if (isValidValue(fields()[54], other.sliCount)) {
        this.sliCount = data().deepCopy(fields()[54].schema(), other.sliCount);
        fieldSetFlags()[54] = true;
      }
      if (isValidValue(fields()[55], other.totalProcessingDelay)) {
        this.totalProcessingDelay = data().deepCopy(fields()[55].schema(), other.totalProcessingDelay);
        fieldSetFlags()[55] = true;
      }
      if (isValidValue(fields()[56], other.estimatedPlayoutTimestamp)) {
        this.estimatedPlayoutTimestamp = data().deepCopy(fields()[56].schema(), other.estimatedPlayoutTimestamp);
        fieldSetFlags()[56] = true;
      }
      if (isValidValue(fields()[57], other.jitterBufferDelay)) {
        this.jitterBufferDelay = data().deepCopy(fields()[57].schema(), other.jitterBufferDelay);
        fieldSetFlags()[57] = true;
      }
      if (isValidValue(fields()[58], other.jitterBufferEmittedCount)) {
        this.jitterBufferEmittedCount = data().deepCopy(fields()[58].schema(), other.jitterBufferEmittedCount);
        fieldSetFlags()[58] = true;
      }
      if (isValidValue(fields()[59], other.framesReceived)) {
        this.framesReceived = data().deepCopy(fields()[59].schema(), other.framesReceived);
        fieldSetFlags()[59] = true;
      }
      if (isValidValue(fields()[60], other.decoderImplementation)) {
        this.decoderImplementation = data().deepCopy(fields()[60].schema(), other.decoderImplementation);
        fieldSetFlags()[60] = true;
      }
      if (isValidValue(fields()[61], other.packetsSent)) {
        this.packetsSent = data().deepCopy(fields()[61].schema(), other.packetsSent);
        fieldSetFlags()[61] = true;
      }
      if (isValidValue(fields()[62], other.bytesSent)) {
        this.bytesSent = data().deepCopy(fields()[62].schema(), other.bytesSent);
        fieldSetFlags()[62] = true;
      }
      if (isValidValue(fields()[63], other.remoteTimestamp)) {
        this.remoteTimestamp = data().deepCopy(fields()[63].schema(), other.remoteTimestamp);
        fieldSetFlags()[63] = true;
      }
      if (isValidValue(fields()[64], other.reportsSent)) {
        this.reportsSent = data().deepCopy(fields()[64].schema(), other.reportsSent);
        fieldSetFlags()[64] = true;
      }
      if (isValidValue(fields()[65], other.ended)) {
        this.ended = data().deepCopy(fields()[65].schema(), other.ended);
        fieldSetFlags()[65] = true;
      }
      if (isValidValue(fields()[66], other.payloadType)) {
        this.payloadType = data().deepCopy(fields()[66].schema(), other.payloadType);
        fieldSetFlags()[66] = true;
      }
      if (isValidValue(fields()[67], other.mimeType)) {
        this.mimeType = data().deepCopy(fields()[67].schema(), other.mimeType);
        fieldSetFlags()[67] = true;
      }
      if (isValidValue(fields()[68], other.clockRate)) {
        this.clockRate = data().deepCopy(fields()[68].schema(), other.clockRate);
        fieldSetFlags()[68] = true;
      }
      if (isValidValue(fields()[69], other.sdpFmtpLine)) {
        this.sdpFmtpLine = data().deepCopy(fields()[69].schema(), other.sdpFmtpLine);
        fieldSetFlags()[69] = true;
      }
    }

    /**
      * Gets the value of the 'serviceId' field.
      * The unique identifier of the service
      * @return The value.
      */
    public String getServiceId() {
      return serviceId;
    }

    /**
      * Sets the value of the 'serviceId' field.
      * The unique identifier of the service
      * @param value The value of 'serviceId'.
      * @return This builder.
      */
    public Builder setServiceId(String value) {
      validate(fields()[0], value);
      this.serviceId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'serviceId' field has been set.
      * The unique identifier of the service
      * @return True if the 'serviceId' field has been set, false otherwise.
      */
    public boolean hasServiceId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'serviceId' field.
      * The unique identifier of the service
      * @return This builder.
      */
    public Builder clearServiceId() {
      serviceId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'serviceName' field.
      * The resolved service name configured for the service Id
      * @return The value.
      */
    public String getServiceName() {
      return serviceName;
    }

    /**
      * Sets the value of the 'serviceName' field.
      * The resolved service name configured for the service Id
      * @param value The value of 'serviceName'.
      * @return This builder.
      */
    public Builder setServiceName(String value) {
      validate(fields()[1], value);
      this.serviceName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'serviceName' field has been set.
      * The resolved service name configured for the service Id
      * @return True if the 'serviceName' field has been set, false otherwise.
      */
    public boolean hasServiceName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'serviceName' field.
      * The resolved service name configured for the service Id
      * @return This builder.
      */
    public Builder clearServiceName() {
      serviceName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'mediaUnitId' field.
      * The media unit id the report belongs to
      * @return The value.
      */
    public String getMediaUnitId() {
      return mediaUnitId;
    }

    /**
      * Sets the value of the 'mediaUnitId' field.
      * The media unit id the report belongs to
      * @param value The value of 'mediaUnitId'.
      * @return This builder.
      */
    public Builder setMediaUnitId(String value) {
      validate(fields()[2], value);
      this.mediaUnitId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'mediaUnitId' field has been set.
      * The media unit id the report belongs to
      * @return True if the 'mediaUnitId' field has been set, false otherwise.
      */
    public boolean hasMediaUnitId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'mediaUnitId' field.
      * The media unit id the report belongs to
      * @return This builder.
      */
    public Builder clearMediaUnitId() {
      mediaUnitId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'marker' field.
      * The marker the originated sample is reported with
      * @return The value.
      */
    public String getMarker() {
      return marker;
    }

    /**
      * Sets the value of the 'marker' field.
      * The marker the originated sample is reported with
      * @param value The value of 'marker'.
      * @return This builder.
      */
    public Builder setMarker(String value) {
      validate(fields()[3], value);
      this.marker = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'marker' field has been set.
      * The marker the originated sample is reported with
      * @return True if the 'marker' field has been set, false otherwise.
      */
    public boolean hasMarker() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'marker' field.
      * The marker the originated sample is reported with
      * @return This builder.
      */
    public Builder clearMarker() {
      marker = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @return The value.
      */
    public Long getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public Builder setTimestamp(long value) {
      validate(fields()[4], value);
      this.timestamp = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @return This builder.
      */
    public Builder clearTimestamp() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'callId' field.
      * The generated unique identifier of the call
      * @return The value.
      */
    public String getCallId() {
      return callId;
    }

    /**
      * Sets the value of the 'callId' field.
      * The generated unique identifier of the call
      * @param value The value of 'callId'.
      * @return This builder.
      */
    public Builder setCallId(String value) {
      validate(fields()[5], value);
      this.callId = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'callId' field has been set.
      * The generated unique identifier of the call
      * @return True if the 'callId' field has been set, false otherwise.
      */
    public boolean hasCallId() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'callId' field.
      * The generated unique identifier of the call
      * @return This builder.
      */
    public Builder clearCallId() {
      callId = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'roomId' field.
      * webrtc app provided room id
      * @return The value.
      */
    public String getRoomId() {
      return roomId;
    }

    /**
      * Sets the value of the 'roomId' field.
      * webrtc app provided room id
      * @param value The value of 'roomId'.
      * @return This builder.
      */
    public Builder setRoomId(String value) {
      validate(fields()[6], value);
      this.roomId = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'roomId' field has been set.
      * webrtc app provided room id
      * @return True if the 'roomId' field has been set, false otherwise.
      */
    public boolean hasRoomId() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'roomId' field.
      * webrtc app provided room id
      * @return This builder.
      */
    public Builder clearRoomId() {
      roomId = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'clientId' field.
      * The generated unique identifier of the client
      * @return The value.
      */
    public String getClientId() {
      return clientId;
    }

    /**
      * Sets the value of the 'clientId' field.
      * The generated unique identifier of the client
      * @param value The value of 'clientId'.
      * @return This builder.
      */
    public Builder setClientId(String value) {
      validate(fields()[7], value);
      this.clientId = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'clientId' field has been set.
      * The generated unique identifier of the client
      * @return True if the 'clientId' field has been set, false otherwise.
      */
    public boolean hasClientId() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'clientId' field.
      * The generated unique identifier of the client
      * @return This builder.
      */
    public Builder clearClientId() {
      clientId = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'userId' field.
      * webrtc app provided user identifier
      * @return The value.
      */
    public String getUserId() {
      return userId;
    }

    /**
      * Sets the value of the 'userId' field.
      * webrtc app provided user identifier
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public Builder setUserId(String value) {
      validate(fields()[8], value);
      this.userId = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * webrtc app provided user identifier
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'userId' field.
      * webrtc app provided user identifier
      * @return This builder.
      */
    public Builder clearUserId() {
      userId = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'peerConnectionId' field.
      * The unique identifier of the peer connection
      * @return The value.
      */
    public String getPeerConnectionId() {
      return peerConnectionId;
    }

    /**
      * Sets the value of the 'peerConnectionId' field.
      * The unique identifier of the peer connection
      * @param value The value of 'peerConnectionId'.
      * @return This builder.
      */
    public Builder setPeerConnectionId(String value) {
      validate(fields()[9], value);
      this.peerConnectionId = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'peerConnectionId' field has been set.
      * The unique identifier of the peer connection
      * @return True if the 'peerConnectionId' field has been set, false otherwise.
      */
    public boolean hasPeerConnectionId() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'peerConnectionId' field.
      * The unique identifier of the peer connection
      * @return This builder.
      */
    public Builder clearPeerConnectionId() {
      peerConnectionId = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'label' field.
      * The webrtc app provided label the peer connection is labeled with
      * @return The value.
      */
    public String getLabel() {
      return label;
    }

    /**
      * Sets the value of the 'label' field.
      * The webrtc app provided label the peer connection is labeled with
      * @param value The value of 'label'.
      * @return This builder.
      */
    public Builder setLabel(String value) {
      validate(fields()[10], value);
      this.label = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'label' field has been set.
      * The webrtc app provided label the peer connection is labeled with
      * @return True if the 'label' field has been set, false otherwise.
      */
    public boolean hasLabel() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'label' field.
      * The webrtc app provided label the peer connection is labeled with
      * @return This builder.
      */
    public Builder clearLabel() {
      label = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'remoteUserId' field.
      * The webrtc app provided user id the track belongs to, or if the webrtc app did not provided the observer tried to match it
      * @return The value.
      */
    public String getRemoteUserId() {
      return remoteUserId;
    }

    /**
      * Sets the value of the 'remoteUserId' field.
      * The webrtc app provided user id the track belongs to, or if the webrtc app did not provided the observer tried to match it
      * @param value The value of 'remoteUserId'.
      * @return This builder.
      */
    public Builder setRemoteUserId(String value) {
      validate(fields()[11], value);
      this.remoteUserId = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'remoteUserId' field has been set.
      * The webrtc app provided user id the track belongs to, or if the webrtc app did not provided the observer tried to match it
      * @return True if the 'remoteUserId' field has been set, false otherwise.
      */
    public boolean hasRemoteUserId() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'remoteUserId' field.
      * The webrtc app provided user id the track belongs to, or if the webrtc app did not provided the observer tried to match it
      * @return This builder.
      */
    public Builder clearRemoteUserId() {
      remoteUserId = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'remoteClientId' field.
      * The observer matched remote client Id
      * @return The value.
      */
    public String getRemoteClientId() {
      return remoteClientId;
    }

    /**
      * Sets the value of the 'remoteClientId' field.
      * The observer matched remote client Id
      * @param value The value of 'remoteClientId'.
      * @return This builder.
      */
    public Builder setRemoteClientId(String value) {
      validate(fields()[12], value);
      this.remoteClientId = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'remoteClientId' field has been set.
      * The observer matched remote client Id
      * @return True if the 'remoteClientId' field has been set, false otherwise.
      */
    public boolean hasRemoteClientId() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'remoteClientId' field.
      * The observer matched remote client Id
      * @return This builder.
      */
    public Builder clearRemoteClientId() {
      remoteClientId = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'remotePeerConnectionId' field.
      * The observer matched remote Peer Connection Id
      * @return The value.
      */
    public String getRemotePeerConnectionId() {
      return remotePeerConnectionId;
    }

    /**
      * Sets the value of the 'remotePeerConnectionId' field.
      * The observer matched remote Peer Connection Id
      * @param value The value of 'remotePeerConnectionId'.
      * @return This builder.
      */
    public Builder setRemotePeerConnectionId(String value) {
      validate(fields()[13], value);
      this.remotePeerConnectionId = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'remotePeerConnectionId' field has been set.
      * The observer matched remote Peer Connection Id
      * @return True if the 'remotePeerConnectionId' field has been set, false otherwise.
      */
    public boolean hasRemotePeerConnectionId() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'remotePeerConnectionId' field.
      * The observer matched remote Peer Connection Id
      * @return This builder.
      */
    public Builder clearRemotePeerConnectionId() {
      remotePeerConnectionId = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'sampleSeq' field.
      * The sequence number of the sample the report is generated from
      * @return The value.
      */
    public Integer getSampleSeq() {
      return sampleSeq;
    }

    /**
      * Sets the value of the 'sampleSeq' field.
      * The sequence number of the sample the report is generated from
      * @param value The value of 'sampleSeq'.
      * @return This builder.
      */
    public Builder setSampleSeq(int value) {
      validate(fields()[14], value);
      this.sampleSeq = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'sampleSeq' field has been set.
      * The sequence number of the sample the report is generated from
      * @return True if the 'sampleSeq' field has been set, false otherwise.
      */
    public boolean hasSampleSeq() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'sampleSeq' field.
      * The sequence number of the sample the report is generated from
      * @return This builder.
      */
    public Builder clearSampleSeq() {
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'ssrc' field.
      * The RTP SSRC field
      * @return The value.
      */
    public Long getSsrc() {
      return ssrc;
    }

    /**
      * Sets the value of the 'ssrc' field.
      * The RTP SSRC field
      * @param value The value of 'ssrc'.
      * @return This builder.
      */
    public Builder setSsrc(long value) {
      validate(fields()[15], value);
      this.ssrc = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'ssrc' field has been set.
      * The RTP SSRC field
      * @return True if the 'ssrc' field has been set, false otherwise.
      */
    public boolean hasSsrc() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'ssrc' field.
      * The RTP SSRC field
      * @return This builder.
      */
    public Builder clearSsrc() {
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'packetsReceived' field.
      * The total number of packets received on the corresponded synchronization source
      * @return The value.
      */
    public Integer getPacketsReceived() {
      return packetsReceived;
    }

    /**
      * Sets the value of the 'packetsReceived' field.
      * The total number of packets received on the corresponded synchronization source
      * @param value The value of 'packetsReceived'.
      * @return This builder.
      */
    public Builder setPacketsReceived(Integer value) {
      validate(fields()[16], value);
      this.packetsReceived = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'packetsReceived' field has been set.
      * The total number of packets received on the corresponded synchronization source
      * @return True if the 'packetsReceived' field has been set, false otherwise.
      */
    public boolean hasPacketsReceived() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'packetsReceived' field.
      * The total number of packets received on the corresponded synchronization source
      * @return This builder.
      */
    public Builder clearPacketsReceived() {
      packetsReceived = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'packetsLost' field.
      * The total number of bytes received on the corresponded synchronization source
      * @return The value.
      */
    public Integer getPacketsLost() {
      return packetsLost;
    }

    /**
      * Sets the value of the 'packetsLost' field.
      * The total number of bytes received on the corresponded synchronization source
      * @param value The value of 'packetsLost'.
      * @return This builder.
      */
    public Builder setPacketsLost(Integer value) {
      validate(fields()[17], value);
      this.packetsLost = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'packetsLost' field has been set.
      * The total number of bytes received on the corresponded synchronization source
      * @return True if the 'packetsLost' field has been set, false otherwise.
      */
    public boolean hasPacketsLost() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'packetsLost' field.
      * The total number of bytes received on the corresponded synchronization source
      * @return This builder.
      */
    public Builder clearPacketsLost() {
      packetsLost = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'jitter' field.
      * The corresponded synchronization source reported jitter
      * @return The value.
      */
    public Double getJitter() {
      return jitter;
    }

    /**
      * Sets the value of the 'jitter' field.
      * The corresponded synchronization source reported jitter
      * @param value The value of 'jitter'.
      * @return This builder.
      */
    public Builder setJitter(Double value) {
      validate(fields()[18], value);
      this.jitter = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'jitter' field has been set.
      * The corresponded synchronization source reported jitter
      * @return True if the 'jitter' field has been set, false otherwise.
      */
    public boolean hasJitter() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'jitter' field.
      * The corresponded synchronization source reported jitter
      * @return This builder.
      */
    public Builder clearJitter() {
      jitter = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'packetsDiscarded' field.
      * The total number of packets missed the playout point and therefore discarded by the jitterbuffer
      * @return The value.
      */
    public Integer getPacketsDiscarded() {
      return packetsDiscarded;
    }

    /**
      * Sets the value of the 'packetsDiscarded' field.
      * The total number of packets missed the playout point and therefore discarded by the jitterbuffer
      * @param value The value of 'packetsDiscarded'.
      * @return This builder.
      */
    public Builder setPacketsDiscarded(Integer value) {
      validate(fields()[19], value);
      this.packetsDiscarded = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'packetsDiscarded' field has been set.
      * The total number of packets missed the playout point and therefore discarded by the jitterbuffer
      * @return True if the 'packetsDiscarded' field has been set, false otherwise.
      */
    public boolean hasPacketsDiscarded() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 'packetsDiscarded' field.
      * The total number of packets missed the playout point and therefore discarded by the jitterbuffer
      * @return This builder.
      */
    public Builder clearPacketsDiscarded() {
      packetsDiscarded = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    /**
      * Gets the value of the 'packetsRepaired' field.
      * The total number of packets repaired by either FEC or due to retransmission on the corresponded synchronization source
      * @return The value.
      */
    public Integer getPacketsRepaired() {
      return packetsRepaired;
    }

    /**
      * Sets the value of the 'packetsRepaired' field.
      * The total number of packets repaired by either FEC or due to retransmission on the corresponded synchronization source
      * @param value The value of 'packetsRepaired'.
      * @return This builder.
      */
    public Builder setPacketsRepaired(Integer value) {
      validate(fields()[20], value);
      this.packetsRepaired = value;
      fieldSetFlags()[20] = true;
      return this;
    }

    /**
      * Checks whether the 'packetsRepaired' field has been set.
      * The total number of packets repaired by either FEC or due to retransmission on the corresponded synchronization source
      * @return True if the 'packetsRepaired' field has been set, false otherwise.
      */
    public boolean hasPacketsRepaired() {
      return fieldSetFlags()[20];
    }


    /**
      * Clears the value of the 'packetsRepaired' field.
      * The total number of packets repaired by either FEC or due to retransmission on the corresponded synchronization source
      * @return This builder.
      */
    public Builder clearPacketsRepaired() {
      packetsRepaired = null;
      fieldSetFlags()[20] = false;
      return this;
    }

    /**
      * Gets the value of the 'burstPacketsLost' field.
      * The total number of packets lost in burst (RFC6958)
      * @return The value.
      */
    public Integer getBurstPacketsLost() {
      return burstPacketsLost;
    }

    /**
      * Sets the value of the 'burstPacketsLost' field.
      * The total number of packets lost in burst (RFC6958)
      * @param value The value of 'burstPacketsLost'.
      * @return This builder.
      */
    public Builder setBurstPacketsLost(Integer value) {
      validate(fields()[21], value);
      this.burstPacketsLost = value;
      fieldSetFlags()[21] = true;
      return this;
    }

    /**
      * Checks whether the 'burstPacketsLost' field has been set.
      * The total number of packets lost in burst (RFC6958)
      * @return True if the 'burstPacketsLost' field has been set, false otherwise.
      */
    public boolean hasBurstPacketsLost() {
      return fieldSetFlags()[21];
    }


    /**
      * Clears the value of the 'burstPacketsLost' field.
      * The total number of packets lost in burst (RFC6958)
      * @return This builder.
      */
    public Builder clearBurstPacketsLost() {
      burstPacketsLost = null;
      fieldSetFlags()[21] = false;
      return this;
    }

    /**
      * Gets the value of the 'burstPacketsDiscarded' field.
      * The total number of packets discarded in burst (RFC6958)
      * @return The value.
      */
    public Integer getBurstPacketsDiscarded() {
      return burstPacketsDiscarded;
    }

    /**
      * Sets the value of the 'burstPacketsDiscarded' field.
      * The total number of packets discarded in burst (RFC6958)
      * @param value The value of 'burstPacketsDiscarded'.
      * @return This builder.
      */
    public Builder setBurstPacketsDiscarded(Integer value) {
      validate(fields()[22], value);
      this.burstPacketsDiscarded = value;
      fieldSetFlags()[22] = true;
      return this;
    }

    /**
      * Checks whether the 'burstPacketsDiscarded' field has been set.
      * The total number of packets discarded in burst (RFC6958)
      * @return True if the 'burstPacketsDiscarded' field has been set, false otherwise.
      */
    public boolean hasBurstPacketsDiscarded() {
      return fieldSetFlags()[22];
    }


    /**
      * Clears the value of the 'burstPacketsDiscarded' field.
      * The total number of packets discarded in burst (RFC6958)
      * @return This builder.
      */
    public Builder clearBurstPacketsDiscarded() {
      burstPacketsDiscarded = null;
      fieldSetFlags()[22] = false;
      return this;
    }

    /**
      * Gets the value of the 'burstLossCount' field.
      * The total number of burst happened causes burstPacketsLost on the corresponding synchronization source
      * @return The value.
      */
    public Integer getBurstLossCount() {
      return burstLossCount;
    }

    /**
      * Sets the value of the 'burstLossCount' field.
      * The total number of burst happened causes burstPacketsLost on the corresponding synchronization source
      * @param value The value of 'burstLossCount'.
      * @return This builder.
      */
    public Builder setBurstLossCount(Integer value) {
      validate(fields()[23], value);
      this.burstLossCount = value;
      fieldSetFlags()[23] = true;
      return this;
    }

    /**
      * Checks whether the 'burstLossCount' field has been set.
      * The total number of burst happened causes burstPacketsLost on the corresponding synchronization source
      * @return True if the 'burstLossCount' field has been set, false otherwise.
      */
    public boolean hasBurstLossCount() {
      return fieldSetFlags()[23];
    }


    /**
      * Clears the value of the 'burstLossCount' field.
      * The total number of burst happened causes burstPacketsLost on the corresponding synchronization source
      * @return This builder.
      */
    public Builder clearBurstLossCount() {
      burstLossCount = null;
      fieldSetFlags()[23] = false;
      return this;
    }

    /**
      * Gets the value of the 'burstDiscardCount' field.
      * The total number of burst happened causes burstPacketsDiscarded on the corresponding synchronization source
      * @return The value.
      */
    public Integer getBurstDiscardCount() {
      return burstDiscardCount;
    }

    /**
      * Sets the value of the 'burstDiscardCount' field.
      * The total number of burst happened causes burstPacketsDiscarded on the corresponding synchronization source
      * @param value The value of 'burstDiscardCount'.
      * @return This builder.
      */
    public Builder setBurstDiscardCount(Integer value) {
      validate(fields()[24], value);
      this.burstDiscardCount = value;
      fieldSetFlags()[24] = true;
      return this;
    }

    /**
      * Checks whether the 'burstDiscardCount' field has been set.
      * The total number of burst happened causes burstPacketsDiscarded on the corresponding synchronization source
      * @return True if the 'burstDiscardCount' field has been set, false otherwise.
      */
    public boolean hasBurstDiscardCount() {
      return fieldSetFlags()[24];
    }


    /**
      * Clears the value of the 'burstDiscardCount' field.
      * The total number of burst happened causes burstPacketsDiscarded on the corresponding synchronization source
      * @return This builder.
      */
    public Builder clearBurstDiscardCount() {
      burstDiscardCount = null;
      fieldSetFlags()[24] = false;
      return this;
    }

    /**
      * Gets the value of the 'burstLossRate' field.
      * The fraction of RTP packets lost during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @return The value.
      */
    public Double getBurstLossRate() {
      return burstLossRate;
    }

    /**
      * Sets the value of the 'burstLossRate' field.
      * The fraction of RTP packets lost during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @param value The value of 'burstLossRate'.
      * @return This builder.
      */
    public Builder setBurstLossRate(Double value) {
      validate(fields()[25], value);
      this.burstLossRate = value;
      fieldSetFlags()[25] = true;
      return this;
    }

    /**
      * Checks whether the 'burstLossRate' field has been set.
      * The fraction of RTP packets lost during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @return True if the 'burstLossRate' field has been set, false otherwise.
      */
    public boolean hasBurstLossRate() {
      return fieldSetFlags()[25];
    }


    /**
      * Clears the value of the 'burstLossRate' field.
      * The fraction of RTP packets lost during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @return This builder.
      */
    public Builder clearBurstLossRate() {
      burstLossRate = null;
      fieldSetFlags()[25] = false;
      return this;
    }

    /**
      * Gets the value of the 'burstDiscardRate' field.
      * The fraction of RTP packets discarded during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @return The value.
      */
    public Integer getBurstDiscardRate() {
      return burstDiscardRate;
    }

    /**
      * Sets the value of the 'burstDiscardRate' field.
      * The fraction of RTP packets discarded during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @param value The value of 'burstDiscardRate'.
      * @return This builder.
      */
    public Builder setBurstDiscardRate(Integer value) {
      validate(fields()[26], value);
      this.burstDiscardRate = value;
      fieldSetFlags()[26] = true;
      return this;
    }

    /**
      * Checks whether the 'burstDiscardRate' field has been set.
      * The fraction of RTP packets discarded during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @return True if the 'burstDiscardRate' field has been set, false otherwise.
      */
    public boolean hasBurstDiscardRate() {
      return fieldSetFlags()[26];
    }


    /**
      * Clears the value of the 'burstDiscardRate' field.
      * The fraction of RTP packets discarded during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @return This builder.
      */
    public Builder clearBurstDiscardRate() {
      burstDiscardRate = null;
      fieldSetFlags()[26] = false;
      return this;
    }

    /**
      * Gets the value of the 'gapLossRate' field.
      * The fraction of RTP packets lost during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @return The value.
      */
    public Double getGapLossRate() {
      return gapLossRate;
    }

    /**
      * Sets the value of the 'gapLossRate' field.
      * The fraction of RTP packets lost during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @param value The value of 'gapLossRate'.
      * @return This builder.
      */
    public Builder setGapLossRate(Double value) {
      validate(fields()[27], value);
      this.gapLossRate = value;
      fieldSetFlags()[27] = true;
      return this;
    }

    /**
      * Checks whether the 'gapLossRate' field has been set.
      * The fraction of RTP packets lost during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @return True if the 'gapLossRate' field has been set, false otherwise.
      */
    public boolean hasGapLossRate() {
      return fieldSetFlags()[27];
    }


    /**
      * Clears the value of the 'gapLossRate' field.
      * The fraction of RTP packets lost during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @return This builder.
      */
    public Builder clearGapLossRate() {
      gapLossRate = null;
      fieldSetFlags()[27] = false;
      return this;
    }

    /**
      * Gets the value of the 'gapDiscardRate' field.
      * The fraction of RTP packets discarded during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @return The value.
      */
    public Double getGapDiscardRate() {
      return gapDiscardRate;
    }

    /**
      * Sets the value of the 'gapDiscardRate' field.
      * The fraction of RTP packets discarded during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @param value The value of 'gapDiscardRate'.
      * @return This builder.
      */
    public Builder setGapDiscardRate(Double value) {
      validate(fields()[28], value);
      this.gapDiscardRate = value;
      fieldSetFlags()[28] = true;
      return this;
    }

    /**
      * Checks whether the 'gapDiscardRate' field has been set.
      * The fraction of RTP packets discarded during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @return True if the 'gapDiscardRate' field has been set, false otherwise.
      */
    public boolean hasGapDiscardRate() {
      return fieldSetFlags()[28];
    }


    /**
      * Clears the value of the 'gapDiscardRate' field.
      * The fraction of RTP packets discarded during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @return This builder.
      */
    public Builder clearGapDiscardRate() {
      gapDiscardRate = null;
      fieldSetFlags()[28] = false;
      return this;
    }

    /**
      * Gets the value of the 'framesDropped' field.
      * The total number of frames dropped at decoding process on the corresponding synchronization source
      * @return The value.
      */
    public Double getFramesDropped() {
      return framesDropped;
    }

    /**
      * Sets the value of the 'framesDropped' field.
      * The total number of frames dropped at decoding process on the corresponding synchronization source
      * @param value The value of 'framesDropped'.
      * @return This builder.
      */
    public Builder setFramesDropped(Double value) {
      validate(fields()[29], value);
      this.framesDropped = value;
      fieldSetFlags()[29] = true;
      return this;
    }

    /**
      * Checks whether the 'framesDropped' field has been set.
      * The total number of frames dropped at decoding process on the corresponding synchronization source
      * @return True if the 'framesDropped' field has been set, false otherwise.
      */
    public boolean hasFramesDropped() {
      return fieldSetFlags()[29];
    }


    /**
      * Clears the value of the 'framesDropped' field.
      * The total number of frames dropped at decoding process on the corresponding synchronization source
      * @return This builder.
      */
    public Builder clearFramesDropped() {
      framesDropped = null;
      fieldSetFlags()[29] = false;
      return this;
    }

    /**
      * Gets the value of the 'partialFramesLost' field.
      * The total number of partial frames lost at decoding process on the corresponding synchronization source
      * @return The value.
      */
    public Double getPartialFramesLost() {
      return partialFramesLost;
    }

    /**
      * Sets the value of the 'partialFramesLost' field.
      * The total number of partial frames lost at decoding process on the corresponding synchronization source
      * @param value The value of 'partialFramesLost'.
      * @return This builder.
      */
    public Builder setPartialFramesLost(Double value) {
      validate(fields()[30], value);
      this.partialFramesLost = value;
      fieldSetFlags()[30] = true;
      return this;
    }

    /**
      * Checks whether the 'partialFramesLost' field has been set.
      * The total number of partial frames lost at decoding process on the corresponding synchronization source
      * @return True if the 'partialFramesLost' field has been set, false otherwise.
      */
    public boolean hasPartialFramesLost() {
      return fieldSetFlags()[30];
    }


    /**
      * Clears the value of the 'partialFramesLost' field.
      * The total number of partial frames lost at decoding process on the corresponding synchronization source
      * @return This builder.
      */
    public Builder clearPartialFramesLost() {
      partialFramesLost = null;
      fieldSetFlags()[30] = false;
      return this;
    }

    /**
      * Gets the value of the 'fullFramesLost' field.
      * The total number of full frames lost at decoding process on the corresponding synchronization source
      * @return The value.
      */
    public Integer getFullFramesLost() {
      return fullFramesLost;
    }

    /**
      * Sets the value of the 'fullFramesLost' field.
      * The total number of full frames lost at decoding process on the corresponding synchronization source
      * @param value The value of 'fullFramesLost'.
      * @return This builder.
      */
    public Builder setFullFramesLost(Integer value) {
      validate(fields()[31], value);
      this.fullFramesLost = value;
      fieldSetFlags()[31] = true;
      return this;
    }

    /**
      * Checks whether the 'fullFramesLost' field has been set.
      * The total number of full frames lost at decoding process on the corresponding synchronization source
      * @return True if the 'fullFramesLost' field has been set, false otherwise.
      */
    public boolean hasFullFramesLost() {
      return fieldSetFlags()[31];
    }


    /**
      * Clears the value of the 'fullFramesLost' field.
      * The total number of full frames lost at decoding process on the corresponding synchronization source
      * @return This builder.
      */
    public Builder clearFullFramesLost() {
      fullFramesLost = null;
      fieldSetFlags()[31] = false;
      return this;
    }

    /**
      * Gets the value of the 'framesDecoded' field.
      * Indicate the number of frames completly and without error decoded on the corresponded synchronization source (ssrc)
      * @return The value.
      */
    public Integer getFramesDecoded() {
      return framesDecoded;
    }

    /**
      * Sets the value of the 'framesDecoded' field.
      * Indicate the number of frames completly and without error decoded on the corresponded synchronization source (ssrc)
      * @param value The value of 'framesDecoded'.
      * @return This builder.
      */
    public Builder setFramesDecoded(Integer value) {
      validate(fields()[32], value);
      this.framesDecoded = value;
      fieldSetFlags()[32] = true;
      return this;
    }

    /**
      * Checks whether the 'framesDecoded' field has been set.
      * Indicate the number of frames completly and without error decoded on the corresponded synchronization source (ssrc)
      * @return True if the 'framesDecoded' field has been set, false otherwise.
      */
    public boolean hasFramesDecoded() {
      return fieldSetFlags()[32];
    }


    /**
      * Clears the value of the 'framesDecoded' field.
      * Indicate the number of frames completly and without error decoded on the corresponded synchronization source (ssrc)
      * @return This builder.
      */
    public Builder clearFramesDecoded() {
      framesDecoded = null;
      fieldSetFlags()[32] = false;
      return this;
    }

    /**
      * Gets the value of the 'keyFramesDecoded' field.
      * Indicate the number of keyframes received on the corresponded synchronization source (ssrc)
      * @return The value.
      */
    public Integer getKeyFramesDecoded() {
      return keyFramesDecoded;
    }

    /**
      * Sets the value of the 'keyFramesDecoded' field.
      * Indicate the number of keyframes received on the corresponded synchronization source (ssrc)
      * @param value The value of 'keyFramesDecoded'.
      * @return This builder.
      */
    public Builder setKeyFramesDecoded(Integer value) {
      validate(fields()[33], value);
      this.keyFramesDecoded = value;
      fieldSetFlags()[33] = true;
      return this;
    }

    /**
      * Checks whether the 'keyFramesDecoded' field has been set.
      * Indicate the number of keyframes received on the corresponded synchronization source (ssrc)
      * @return True if the 'keyFramesDecoded' field has been set, false otherwise.
      */
    public boolean hasKeyFramesDecoded() {
      return fieldSetFlags()[33];
    }


    /**
      * Clears the value of the 'keyFramesDecoded' field.
      * Indicate the number of keyframes received on the corresponded synchronization source (ssrc)
      * @return This builder.
      */
    public Builder clearKeyFramesDecoded() {
      keyFramesDecoded = null;
      fieldSetFlags()[33] = false;
      return this;
    }

    /**
      * Gets the value of the 'frameWidth' field.
      * Indicate the width of the frame received on the corresponded synchronization source (ssrc)
      * @return The value.
      */
    public Integer getFrameWidth() {
      return frameWidth;
    }

    /**
      * Sets the value of the 'frameWidth' field.
      * Indicate the width of the frame received on the corresponded synchronization source (ssrc)
      * @param value The value of 'frameWidth'.
      * @return This builder.
      */
    public Builder setFrameWidth(Integer value) {
      validate(fields()[34], value);
      this.frameWidth = value;
      fieldSetFlags()[34] = true;
      return this;
    }

    /**
      * Checks whether the 'frameWidth' field has been set.
      * Indicate the width of the frame received on the corresponded synchronization source (ssrc)
      * @return True if the 'frameWidth' field has been set, false otherwise.
      */
    public boolean hasFrameWidth() {
      return fieldSetFlags()[34];
    }


    /**
      * Clears the value of the 'frameWidth' field.
      * Indicate the width of the frame received on the corresponded synchronization source (ssrc)
      * @return This builder.
      */
    public Builder clearFrameWidth() {
      frameWidth = null;
      fieldSetFlags()[34] = false;
      return this;
    }

    /**
      * Gets the value of the 'frameHeight' field.
      * Indicate the height of the frame received on the corresponded synchronization source (ssrc)
      * @return The value.
      */
    public Integer getFrameHeight() {
      return frameHeight;
    }

    /**
      * Sets the value of the 'frameHeight' field.
      * Indicate the height of the frame received on the corresponded synchronization source (ssrc)
      * @param value The value of 'frameHeight'.
      * @return This builder.
      */
    public Builder setFrameHeight(Integer value) {
      validate(fields()[35], value);
      this.frameHeight = value;
      fieldSetFlags()[35] = true;
      return this;
    }

    /**
      * Checks whether the 'frameHeight' field has been set.
      * Indicate the height of the frame received on the corresponded synchronization source (ssrc)
      * @return True if the 'frameHeight' field has been set, false otherwise.
      */
    public boolean hasFrameHeight() {
      return fieldSetFlags()[35];
    }


    /**
      * Clears the value of the 'frameHeight' field.
      * Indicate the height of the frame received on the corresponded synchronization source (ssrc)
      * @return This builder.
      */
    public Builder clearFrameHeight() {
      frameHeight = null;
      fieldSetFlags()[35] = false;
      return this;
    }

    /**
      * Gets the value of the 'frameBitDepth' field.
      * Indicate the bit depth per pixel of the last decoded frame received on the corresponded synchronization source (ssrc)
      * @return The value.
      */
    public Integer getFrameBitDepth() {
      return frameBitDepth;
    }

    /**
      * Sets the value of the 'frameBitDepth' field.
      * Indicate the bit depth per pixel of the last decoded frame received on the corresponded synchronization source (ssrc)
      * @param value The value of 'frameBitDepth'.
      * @return This builder.
      */
    public Builder setFrameBitDepth(Integer value) {
      validate(fields()[36], value);
      this.frameBitDepth = value;
      fieldSetFlags()[36] = true;
      return this;
    }

    /**
      * Checks whether the 'frameBitDepth' field has been set.
      * Indicate the bit depth per pixel of the last decoded frame received on the corresponded synchronization source (ssrc)
      * @return True if the 'frameBitDepth' field has been set, false otherwise.
      */
    public boolean hasFrameBitDepth() {
      return fieldSetFlags()[36];
    }


    /**
      * Clears the value of the 'frameBitDepth' field.
      * Indicate the bit depth per pixel of the last decoded frame received on the corresponded synchronization source (ssrc)
      * @return This builder.
      */
    public Builder clearFrameBitDepth() {
      frameBitDepth = null;
      fieldSetFlags()[36] = false;
      return this;
    }

    /**
      * Gets the value of the 'framesPerSecond' field.
      * Indicate the number of decoded frames in the last second received on the corresponded synchronization source (ssrc)
      * @return The value.
      */
    public Double getFramesPerSecond() {
      return framesPerSecond;
    }

    /**
      * Sets the value of the 'framesPerSecond' field.
      * Indicate the number of decoded frames in the last second received on the corresponded synchronization source (ssrc)
      * @param value The value of 'framesPerSecond'.
      * @return This builder.
      */
    public Builder setFramesPerSecond(Double value) {
      validate(fields()[37], value);
      this.framesPerSecond = value;
      fieldSetFlags()[37] = true;
      return this;
    }

    /**
      * Checks whether the 'framesPerSecond' field has been set.
      * Indicate the number of decoded frames in the last second received on the corresponded synchronization source (ssrc)
      * @return True if the 'framesPerSecond' field has been set, false otherwise.
      */
    public boolean hasFramesPerSecond() {
      return fieldSetFlags()[37];
    }


    /**
      * Clears the value of the 'framesPerSecond' field.
      * Indicate the number of decoded frames in the last second received on the corresponded synchronization source (ssrc)
      * @return This builder.
      */
    public Builder clearFramesPerSecond() {
      framesPerSecond = null;
      fieldSetFlags()[37] = false;
      return this;
    }

    /**
      * Gets the value of the 'qpSum' field.
      * sum of QP values of frames decoded on the corresponded synchronization source (ssrc)
      * @return The value.
      */
    public Long getQpSum() {
      return qpSum;
    }

    /**
      * Sets the value of the 'qpSum' field.
      * sum of QP values of frames decoded on the corresponded synchronization source (ssrc)
      * @param value The value of 'qpSum'.
      * @return This builder.
      */
    public Builder setQpSum(Long value) {
      validate(fields()[38], value);
      this.qpSum = value;
      fieldSetFlags()[38] = true;
      return this;
    }

    /**
      * Checks whether the 'qpSum' field has been set.
      * sum of QP values of frames decoded on the corresponded synchronization source (ssrc)
      * @return True if the 'qpSum' field has been set, false otherwise.
      */
    public boolean hasQpSum() {
      return fieldSetFlags()[38];
    }


    /**
      * Clears the value of the 'qpSum' field.
      * sum of QP values of frames decoded on the corresponded synchronization source (ssrc)
      * @return This builder.
      */
    public Builder clearQpSum() {
      qpSum = null;
      fieldSetFlags()[38] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalDecodeTime' field.
      * The total number of seconds spent on decoding frames on the corresponded synchronization source (ssrc)
      * @return The value.
      */
    public Long getTotalDecodeTime() {
      return totalDecodeTime;
    }

    /**
      * Sets the value of the 'totalDecodeTime' field.
      * The total number of seconds spent on decoding frames on the corresponded synchronization source (ssrc)
      * @param value The value of 'totalDecodeTime'.
      * @return This builder.
      */
    public Builder setTotalDecodeTime(Long value) {
      validate(fields()[39], value);
      this.totalDecodeTime = value;
      fieldSetFlags()[39] = true;
      return this;
    }

    /**
      * Checks whether the 'totalDecodeTime' field has been set.
      * The total number of seconds spent on decoding frames on the corresponded synchronization source (ssrc)
      * @return True if the 'totalDecodeTime' field has been set, false otherwise.
      */
    public boolean hasTotalDecodeTime() {
      return fieldSetFlags()[39];
    }


    /**
      * Clears the value of the 'totalDecodeTime' field.
      * The total number of seconds spent on decoding frames on the corresponded synchronization source (ssrc)
      * @return This builder.
      */
    public Builder clearTotalDecodeTime() {
      totalDecodeTime = null;
      fieldSetFlags()[39] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalInterFrameDelay' field.
      * The total number of inter frame delay on the corresponded synchronization source (ssrc)
      * @return The value.
      */
    public Long getTotalInterFrameDelay() {
      return totalInterFrameDelay;
    }

    /**
      * Sets the value of the 'totalInterFrameDelay' field.
      * The total number of inter frame delay on the corresponded synchronization source (ssrc)
      * @param value The value of 'totalInterFrameDelay'.
      * @return This builder.
      */
    public Builder setTotalInterFrameDelay(Long value) {
      validate(fields()[40], value);
      this.totalInterFrameDelay = value;
      fieldSetFlags()[40] = true;
      return this;
    }

    /**
      * Checks whether the 'totalInterFrameDelay' field has been set.
      * The total number of inter frame delay on the corresponded synchronization source (ssrc)
      * @return True if the 'totalInterFrameDelay' field has been set, false otherwise.
      */
    public boolean hasTotalInterFrameDelay() {
      return fieldSetFlags()[40];
    }


    /**
      * Clears the value of the 'totalInterFrameDelay' field.
      * The total number of inter frame delay on the corresponded synchronization source (ssrc)
      * @return This builder.
      */
    public Builder clearTotalInterFrameDelay() {
      totalInterFrameDelay = null;
      fieldSetFlags()[40] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalSquaredInterFrameDelay' field.
      * The total number of inter frame delay squere on the corresponded synchronization source (ssrc) Useful for variance calculation for interframe delays
      * @return The value.
      */
    public Long getTotalSquaredInterFrameDelay() {
      return totalSquaredInterFrameDelay;
    }

    /**
      * Sets the value of the 'totalSquaredInterFrameDelay' field.
      * The total number of inter frame delay squere on the corresponded synchronization source (ssrc) Useful for variance calculation for interframe delays
      * @param value The value of 'totalSquaredInterFrameDelay'.
      * @return This builder.
      */
    public Builder setTotalSquaredInterFrameDelay(Long value) {
      validate(fields()[41], value);
      this.totalSquaredInterFrameDelay = value;
      fieldSetFlags()[41] = true;
      return this;
    }

    /**
      * Checks whether the 'totalSquaredInterFrameDelay' field has been set.
      * The total number of inter frame delay squere on the corresponded synchronization source (ssrc) Useful for variance calculation for interframe delays
      * @return True if the 'totalSquaredInterFrameDelay' field has been set, false otherwise.
      */
    public boolean hasTotalSquaredInterFrameDelay() {
      return fieldSetFlags()[41];
    }


    /**
      * Clears the value of the 'totalSquaredInterFrameDelay' field.
      * The total number of inter frame delay squere on the corresponded synchronization source (ssrc) Useful for variance calculation for interframe delays
      * @return This builder.
      */
    public Builder clearTotalSquaredInterFrameDelay() {
      totalSquaredInterFrameDelay = null;
      fieldSetFlags()[41] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastPacketReceivedTimestamp' field.
      * Represents the timestamp at which the last packet was received on the corresponded synchronization source (ssrc)
      * @return The value.
      */
    public Boolean getLastPacketReceivedTimestamp() {
      return lastPacketReceivedTimestamp;
    }

    /**
      * Sets the value of the 'lastPacketReceivedTimestamp' field.
      * Represents the timestamp at which the last packet was received on the corresponded synchronization source (ssrc)
      * @param value The value of 'lastPacketReceivedTimestamp'.
      * @return This builder.
      */
    public Builder setLastPacketReceivedTimestamp(Boolean value) {
      validate(fields()[42], value);
      this.lastPacketReceivedTimestamp = value;
      fieldSetFlags()[42] = true;
      return this;
    }

    /**
      * Checks whether the 'lastPacketReceivedTimestamp' field has been set.
      * Represents the timestamp at which the last packet was received on the corresponded synchronization source (ssrc)
      * @return True if the 'lastPacketReceivedTimestamp' field has been set, false otherwise.
      */
    public boolean hasLastPacketReceivedTimestamp() {
      return fieldSetFlags()[42];
    }


    /**
      * Clears the value of the 'lastPacketReceivedTimestamp' field.
      * Represents the timestamp at which the last packet was received on the corresponded synchronization source (ssrc)
      * @return This builder.
      */
    public Builder clearLastPacketReceivedTimestamp() {
      lastPacketReceivedTimestamp = null;
      fieldSetFlags()[42] = false;
      return this;
    }

    /**
      * Gets the value of the 'averageRtcpInterval' field.
      * The average RTCP interval between two consecutive compound RTCP packets sent for the corresponding synchronization source (ssrc)
      * @return The value.
      */
    public Double getAverageRtcpInterval() {
      return averageRtcpInterval;
    }

    /**
      * Sets the value of the 'averageRtcpInterval' field.
      * The average RTCP interval between two consecutive compound RTCP packets sent for the corresponding synchronization source (ssrc)
      * @param value The value of 'averageRtcpInterval'.
      * @return This builder.
      */
    public Builder setAverageRtcpInterval(Double value) {
      validate(fields()[43], value);
      this.averageRtcpInterval = value;
      fieldSetFlags()[43] = true;
      return this;
    }

    /**
      * Checks whether the 'averageRtcpInterval' field has been set.
      * The average RTCP interval between two consecutive compound RTCP packets sent for the corresponding synchronization source (ssrc)
      * @return True if the 'averageRtcpInterval' field has been set, false otherwise.
      */
    public boolean hasAverageRtcpInterval() {
      return fieldSetFlags()[43];
    }


    /**
      * Clears the value of the 'averageRtcpInterval' field.
      * The average RTCP interval between two consecutive compound RTCP packets sent for the corresponding synchronization source (ssrc)
      * @return This builder.
      */
    public Builder clearAverageRtcpInterval() {
      averageRtcpInterval = null;
      fieldSetFlags()[43] = false;
      return this;
    }

    /**
      * Gets the value of the 'headerBytesReceived' field.
      * Total number of RTP header and padding bytes received over the corresponding synchronization source (ssrc)
      * @return The value.
      */
    public Long getHeaderBytesReceived() {
      return headerBytesReceived;
    }

    /**
      * Sets the value of the 'headerBytesReceived' field.
      * Total number of RTP header and padding bytes received over the corresponding synchronization source (ssrc)
      * @param value The value of 'headerBytesReceived'.
      * @return This builder.
      */
    public Builder setHeaderBytesReceived(Long value) {
      validate(fields()[44], value);
      this.headerBytesReceived = value;
      fieldSetFlags()[44] = true;
      return this;
    }

    /**
      * Checks whether the 'headerBytesReceived' field has been set.
      * Total number of RTP header and padding bytes received over the corresponding synchronization source (ssrc)
      * @return True if the 'headerBytesReceived' field has been set, false otherwise.
      */
    public boolean hasHeaderBytesReceived() {
      return fieldSetFlags()[44];
    }


    /**
      * Clears the value of the 'headerBytesReceived' field.
      * Total number of RTP header and padding bytes received over the corresponding synchronization source (ssrc)
      * @return This builder.
      */
    public Builder clearHeaderBytesReceived() {
      headerBytesReceived = null;
      fieldSetFlags()[44] = false;
      return this;
    }

    /**
      * Gets the value of the 'fecPacketsReceived' field.
      * Total number of FEC packets received over the corresponding synchronization source (ssrc)
      * @return The value.
      */
    public Integer getFecPacketsReceived() {
      return fecPacketsReceived;
    }

    /**
      * Sets the value of the 'fecPacketsReceived' field.
      * Total number of FEC packets received over the corresponding synchronization source (ssrc)
      * @param value The value of 'fecPacketsReceived'.
      * @return This builder.
      */
    public Builder setFecPacketsReceived(Integer value) {
      validate(fields()[45], value);
      this.fecPacketsReceived = value;
      fieldSetFlags()[45] = true;
      return this;
    }

    /**
      * Checks whether the 'fecPacketsReceived' field has been set.
      * Total number of FEC packets received over the corresponding synchronization source (ssrc)
      * @return True if the 'fecPacketsReceived' field has been set, false otherwise.
      */
    public boolean hasFecPacketsReceived() {
      return fieldSetFlags()[45];
    }


    /**
      * Clears the value of the 'fecPacketsReceived' field.
      * Total number of FEC packets received over the corresponding synchronization source (ssrc)
      * @return This builder.
      */
    public Builder clearFecPacketsReceived() {
      fecPacketsReceived = null;
      fieldSetFlags()[45] = false;
      return this;
    }

    /**
      * Gets the value of the 'fecPacketsDiscarded' field.
      * Total number of FEC packets discarded over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired.
      * @return The value.
      */
    public Integer getFecPacketsDiscarded() {
      return fecPacketsDiscarded;
    }

    /**
      * Sets the value of the 'fecPacketsDiscarded' field.
      * Total number of FEC packets discarded over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired.
      * @param value The value of 'fecPacketsDiscarded'.
      * @return This builder.
      */
    public Builder setFecPacketsDiscarded(Integer value) {
      validate(fields()[46], value);
      this.fecPacketsDiscarded = value;
      fieldSetFlags()[46] = true;
      return this;
    }

    /**
      * Checks whether the 'fecPacketsDiscarded' field has been set.
      * Total number of FEC packets discarded over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired.
      * @return True if the 'fecPacketsDiscarded' field has been set, false otherwise.
      */
    public boolean hasFecPacketsDiscarded() {
      return fieldSetFlags()[46];
    }


    /**
      * Clears the value of the 'fecPacketsDiscarded' field.
      * Total number of FEC packets discarded over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired.
      * @return This builder.
      */
    public Builder clearFecPacketsDiscarded() {
      fecPacketsDiscarded = null;
      fieldSetFlags()[46] = false;
      return this;
    }

    /**
      * Gets the value of the 'bytesReceived' field.
      * Total number of bytes received over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired.
      * @return The value.
      */
    public Long getBytesReceived() {
      return bytesReceived;
    }

    /**
      * Sets the value of the 'bytesReceived' field.
      * Total number of bytes received over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired.
      * @param value The value of 'bytesReceived'.
      * @return This builder.
      */
    public Builder setBytesReceived(Long value) {
      validate(fields()[47], value);
      this.bytesReceived = value;
      fieldSetFlags()[47] = true;
      return this;
    }

    /**
      * Checks whether the 'bytesReceived' field has been set.
      * Total number of bytes received over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired.
      * @return True if the 'bytesReceived' field has been set, false otherwise.
      */
    public boolean hasBytesReceived() {
      return fieldSetFlags()[47];
    }


    /**
      * Clears the value of the 'bytesReceived' field.
      * Total number of bytes received over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired.
      * @return This builder.
      */
    public Builder clearBytesReceived() {
      bytesReceived = null;
      fieldSetFlags()[47] = false;
      return this;
    }

    /**
      * Gets the value of the 'packetsFailedDecryption' field.
      * Total number of packets received and failed to decrypt over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired.
      * @return The value.
      */
    public Integer getPacketsFailedDecryption() {
      return packetsFailedDecryption;
    }

    /**
      * Sets the value of the 'packetsFailedDecryption' field.
      * Total number of packets received and failed to decrypt over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired.
      * @param value The value of 'packetsFailedDecryption'.
      * @return This builder.
      */
    public Builder setPacketsFailedDecryption(Integer value) {
      validate(fields()[48], value);
      this.packetsFailedDecryption = value;
      fieldSetFlags()[48] = true;
      return this;
    }

    /**
      * Checks whether the 'packetsFailedDecryption' field has been set.
      * Total number of packets received and failed to decrypt over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired.
      * @return True if the 'packetsFailedDecryption' field has been set, false otherwise.
      */
    public boolean hasPacketsFailedDecryption() {
      return fieldSetFlags()[48];
    }


    /**
      * Clears the value of the 'packetsFailedDecryption' field.
      * Total number of packets received and failed to decrypt over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired.
      * @return This builder.
      */
    public Builder clearPacketsFailedDecryption() {
      packetsFailedDecryption = null;
      fieldSetFlags()[48] = false;
      return this;
    }

    /**
      * Gets the value of the 'packetsDuplicated' field.
      * Total number of packets identified as duplicated over the corresponding synchronization source (ssrc).
      * @return The value.
      */
    public Integer getPacketsDuplicated() {
      return packetsDuplicated;
    }

    /**
      * Sets the value of the 'packetsDuplicated' field.
      * Total number of packets identified as duplicated over the corresponding synchronization source (ssrc).
      * @param value The value of 'packetsDuplicated'.
      * @return This builder.
      */
    public Builder setPacketsDuplicated(Integer value) {
      validate(fields()[49], value);
      this.packetsDuplicated = value;
      fieldSetFlags()[49] = true;
      return this;
    }

    /**
      * Checks whether the 'packetsDuplicated' field has been set.
      * Total number of packets identified as duplicated over the corresponding synchronization source (ssrc).
      * @return True if the 'packetsDuplicated' field has been set, false otherwise.
      */
    public boolean hasPacketsDuplicated() {
      return fieldSetFlags()[49];
    }


    /**
      * Clears the value of the 'packetsDuplicated' field.
      * Total number of packets identified as duplicated over the corresponding synchronization source (ssrc).
      * @return This builder.
      */
    public Builder clearPacketsDuplicated() {
      packetsDuplicated = null;
      fieldSetFlags()[49] = false;
      return this;
    }

    /**
      * Gets the value of the 'perDscpPacketsReceived' field.
      * The total number of DSCP flagged RTP packets received over the corresponding synchronization source (ssrc)
      * @return The value.
      */
    public Double getPerDscpPacketsReceived() {
      return perDscpPacketsReceived;
    }

    /**
      * Sets the value of the 'perDscpPacketsReceived' field.
      * The total number of DSCP flagged RTP packets received over the corresponding synchronization source (ssrc)
      * @param value The value of 'perDscpPacketsReceived'.
      * @return This builder.
      */
    public Builder setPerDscpPacketsReceived(Double value) {
      validate(fields()[50], value);
      this.perDscpPacketsReceived = value;
      fieldSetFlags()[50] = true;
      return this;
    }

    /**
      * Checks whether the 'perDscpPacketsReceived' field has been set.
      * The total number of DSCP flagged RTP packets received over the corresponding synchronization source (ssrc)
      * @return True if the 'perDscpPacketsReceived' field has been set, false otherwise.
      */
    public boolean hasPerDscpPacketsReceived() {
      return fieldSetFlags()[50];
    }


    /**
      * Clears the value of the 'perDscpPacketsReceived' field.
      * The total number of DSCP flagged RTP packets received over the corresponding synchronization source (ssrc)
      * @return This builder.
      */
    public Builder clearPerDscpPacketsReceived() {
      perDscpPacketsReceived = null;
      fieldSetFlags()[50] = false;
      return this;
    }

    /**
      * Gets the value of the 'firCount' field.
      * Count the total number of Full Intra Request sent by this receiver and belongs to the corresponded synchronization source (ssrc)
      * @return The value.
      */
    public Integer getFirCount() {
      return firCount;
    }

    /**
      * Sets the value of the 'firCount' field.
      * Count the total number of Full Intra Request sent by this receiver and belongs to the corresponded synchronization source (ssrc)
      * @param value The value of 'firCount'.
      * @return This builder.
      */
    public Builder setFirCount(Integer value) {
      validate(fields()[51], value);
      this.firCount = value;
      fieldSetFlags()[51] = true;
      return this;
    }

    /**
      * Checks whether the 'firCount' field has been set.
      * Count the total number of Full Intra Request sent by this receiver and belongs to the corresponded synchronization source (ssrc)
      * @return True if the 'firCount' field has been set, false otherwise.
      */
    public boolean hasFirCount() {
      return fieldSetFlags()[51];
    }


    /**
      * Clears the value of the 'firCount' field.
      * Count the total number of Full Intra Request sent by this receiver and belongs to the corresponded synchronization source (ssrc)
      * @return This builder.
      */
    public Builder clearFirCount() {
      firCount = null;
      fieldSetFlags()[51] = false;
      return this;
    }

    /**
      * Gets the value of the 'pliCount' field.
      * Count the total number of Picture Loss Indication sent by this receiver and belongs to the corresponded synchronization source (ssrc)
      * @return The value.
      */
    public Integer getPliCount() {
      return pliCount;
    }

    /**
      * Sets the value of the 'pliCount' field.
      * Count the total number of Picture Loss Indication sent by this receiver and belongs to the corresponded synchronization source (ssrc)
      * @param value The value of 'pliCount'.
      * @return This builder.
      */
    public Builder setPliCount(Integer value) {
      validate(fields()[52], value);
      this.pliCount = value;
      fieldSetFlags()[52] = true;
      return this;
    }

    /**
      * Checks whether the 'pliCount' field has been set.
      * Count the total number of Picture Loss Indication sent by this receiver and belongs to the corresponded synchronization source (ssrc)
      * @return True if the 'pliCount' field has been set, false otherwise.
      */
    public boolean hasPliCount() {
      return fieldSetFlags()[52];
    }


    /**
      * Clears the value of the 'pliCount' field.
      * Count the total number of Picture Loss Indication sent by this receiver and belongs to the corresponded synchronization source (ssrc)
      * @return This builder.
      */
    public Builder clearPliCount() {
      pliCount = null;
      fieldSetFlags()[52] = false;
      return this;
    }

    /**
      * Gets the value of the 'nackCount' field.
      * Count the total number of Negative ACKnowledgement (NACK) packets sent and belongs to the corresponded synchronization source (ssrc)
      * @return The value.
      */
    public Integer getNackCount() {
      return nackCount;
    }

    /**
      * Sets the value of the 'nackCount' field.
      * Count the total number of Negative ACKnowledgement (NACK) packets sent and belongs to the corresponded synchronization source (ssrc)
      * @param value The value of 'nackCount'.
      * @return This builder.
      */
    public Builder setNackCount(Integer value) {
      validate(fields()[53], value);
      this.nackCount = value;
      fieldSetFlags()[53] = true;
      return this;
    }

    /**
      * Checks whether the 'nackCount' field has been set.
      * Count the total number of Negative ACKnowledgement (NACK) packets sent and belongs to the corresponded synchronization source (ssrc)
      * @return True if the 'nackCount' field has been set, false otherwise.
      */
    public boolean hasNackCount() {
      return fieldSetFlags()[53];
    }


    /**
      * Clears the value of the 'nackCount' field.
      * Count the total number of Negative ACKnowledgement (NACK) packets sent and belongs to the corresponded synchronization source (ssrc)
      * @return This builder.
      */
    public Builder clearNackCount() {
      nackCount = null;
      fieldSetFlags()[53] = false;
      return this;
    }

    /**
      * Gets the value of the 'sliCount' field.
      * Count the total number of Slice Loss Indication sent by this receiver and belongs to the corresponded synchronization source (ssrc)
      * @return The value.
      */
    public Integer getSliCount() {
      return sliCount;
    }

    /**
      * Sets the value of the 'sliCount' field.
      * Count the total number of Slice Loss Indication sent by this receiver and belongs to the corresponded synchronization source (ssrc)
      * @param value The value of 'sliCount'.
      * @return This builder.
      */
    public Builder setSliCount(Integer value) {
      validate(fields()[54], value);
      this.sliCount = value;
      fieldSetFlags()[54] = true;
      return this;
    }

    /**
      * Checks whether the 'sliCount' field has been set.
      * Count the total number of Slice Loss Indication sent by this receiver and belongs to the corresponded synchronization source (ssrc)
      * @return True if the 'sliCount' field has been set, false otherwise.
      */
    public boolean hasSliCount() {
      return fieldSetFlags()[54];
    }


    /**
      * Clears the value of the 'sliCount' field.
      * Count the total number of Slice Loss Indication sent by this receiver and belongs to the corresponded synchronization source (ssrc)
      * @return This builder.
      */
    public Builder clearSliCount() {
      sliCount = null;
      fieldSetFlags()[54] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalProcessingDelay' field.
      * The total processing delay in seconds spend on buffering RTP packets from received up until packets are decoded
      * @return The value.
      */
    public Double getTotalProcessingDelay() {
      return totalProcessingDelay;
    }

    /**
      * Sets the value of the 'totalProcessingDelay' field.
      * The total processing delay in seconds spend on buffering RTP packets from received up until packets are decoded
      * @param value The value of 'totalProcessingDelay'.
      * @return This builder.
      */
    public Builder setTotalProcessingDelay(Double value) {
      validate(fields()[55], value);
      this.totalProcessingDelay = value;
      fieldSetFlags()[55] = true;
      return this;
    }

    /**
      * Checks whether the 'totalProcessingDelay' field has been set.
      * The total processing delay in seconds spend on buffering RTP packets from received up until packets are decoded
      * @return True if the 'totalProcessingDelay' field has been set, false otherwise.
      */
    public boolean hasTotalProcessingDelay() {
      return fieldSetFlags()[55];
    }


    /**
      * Clears the value of the 'totalProcessingDelay' field.
      * The total processing delay in seconds spend on buffering RTP packets from received up until packets are decoded
      * @return This builder.
      */
    public Builder clearTotalProcessingDelay() {
      totalProcessingDelay = null;
      fieldSetFlags()[55] = false;
      return this;
    }

    /**
      * Gets the value of the 'estimatedPlayoutTimestamp' field.
      * The estimated playout time of the corresponded synchronization source
      * @return The value.
      */
    public Double getEstimatedPlayoutTimestamp() {
      return estimatedPlayoutTimestamp;
    }

    /**
      * Sets the value of the 'estimatedPlayoutTimestamp' field.
      * The estimated playout time of the corresponded synchronization source
      * @param value The value of 'estimatedPlayoutTimestamp'.
      * @return This builder.
      */
    public Builder setEstimatedPlayoutTimestamp(Double value) {
      validate(fields()[56], value);
      this.estimatedPlayoutTimestamp = value;
      fieldSetFlags()[56] = true;
      return this;
    }

    /**
      * Checks whether the 'estimatedPlayoutTimestamp' field has been set.
      * The estimated playout time of the corresponded synchronization source
      * @return True if the 'estimatedPlayoutTimestamp' field has been set, false otherwise.
      */
    public boolean hasEstimatedPlayoutTimestamp() {
      return fieldSetFlags()[56];
    }


    /**
      * Clears the value of the 'estimatedPlayoutTimestamp' field.
      * The estimated playout time of the corresponded synchronization source
      * @return This builder.
      */
    public Builder clearEstimatedPlayoutTimestamp() {
      estimatedPlayoutTimestamp = null;
      fieldSetFlags()[56] = false;
      return this;
    }

    /**
      * Gets the value of the 'jitterBufferDelay' field.
      * The total time of RTP packets spent in jitterbuffer waiting for frame completion due to network uncertenity.
      * @return The value.
      */
    public Double getJitterBufferDelay() {
      return jitterBufferDelay;
    }

    /**
      * Sets the value of the 'jitterBufferDelay' field.
      * The total time of RTP packets spent in jitterbuffer waiting for frame completion due to network uncertenity.
      * @param value The value of 'jitterBufferDelay'.
      * @return This builder.
      */
    public Builder setJitterBufferDelay(Double value) {
      validate(fields()[57], value);
      this.jitterBufferDelay = value;
      fieldSetFlags()[57] = true;
      return this;
    }

    /**
      * Checks whether the 'jitterBufferDelay' field has been set.
      * The total time of RTP packets spent in jitterbuffer waiting for frame completion due to network uncertenity.
      * @return True if the 'jitterBufferDelay' field has been set, false otherwise.
      */
    public boolean hasJitterBufferDelay() {
      return fieldSetFlags()[57];
    }


    /**
      * Clears the value of the 'jitterBufferDelay' field.
      * The total time of RTP packets spent in jitterbuffer waiting for frame completion due to network uncertenity.
      * @return This builder.
      */
    public Builder clearJitterBufferDelay() {
      jitterBufferDelay = null;
      fieldSetFlags()[57] = false;
      return this;
    }

    /**
      * Gets the value of the 'jitterBufferEmittedCount' field.
      * The total number of audio samples or video frames that have come out of the jitter buffer on the corresponded synchronization source (ssrc)
      * @return The value.
      */
    public Integer getJitterBufferEmittedCount() {
      return jitterBufferEmittedCount;
    }

    /**
      * Sets the value of the 'jitterBufferEmittedCount' field.
      * The total number of audio samples or video frames that have come out of the jitter buffer on the corresponded synchronization source (ssrc)
      * @param value The value of 'jitterBufferEmittedCount'.
      * @return This builder.
      */
    public Builder setJitterBufferEmittedCount(Integer value) {
      validate(fields()[58], value);
      this.jitterBufferEmittedCount = value;
      fieldSetFlags()[58] = true;
      return this;
    }

    /**
      * Checks whether the 'jitterBufferEmittedCount' field has been set.
      * The total number of audio samples or video frames that have come out of the jitter buffer on the corresponded synchronization source (ssrc)
      * @return True if the 'jitterBufferEmittedCount' field has been set, false otherwise.
      */
    public boolean hasJitterBufferEmittedCount() {
      return fieldSetFlags()[58];
    }


    /**
      * Clears the value of the 'jitterBufferEmittedCount' field.
      * The total number of audio samples or video frames that have come out of the jitter buffer on the corresponded synchronization source (ssrc)
      * @return This builder.
      */
    public Builder clearJitterBufferEmittedCount() {
      jitterBufferEmittedCount = null;
      fieldSetFlags()[58] = false;
      return this;
    }

    /**
      * Gets the value of the 'framesReceived' field.
      * Represents the total number of complete frames received on the corresponded synchronization source (ssrc)
      * @return The value.
      */
    public Integer getFramesReceived() {
      return framesReceived;
    }

    /**
      * Sets the value of the 'framesReceived' field.
      * Represents the total number of complete frames received on the corresponded synchronization source (ssrc)
      * @param value The value of 'framesReceived'.
      * @return This builder.
      */
    public Builder setFramesReceived(Integer value) {
      validate(fields()[59], value);
      this.framesReceived = value;
      fieldSetFlags()[59] = true;
      return this;
    }

    /**
      * Checks whether the 'framesReceived' field has been set.
      * Represents the total number of complete frames received on the corresponded synchronization source (ssrc)
      * @return True if the 'framesReceived' field has been set, false otherwise.
      */
    public boolean hasFramesReceived() {
      return fieldSetFlags()[59];
    }


    /**
      * Clears the value of the 'framesReceived' field.
      * Represents the total number of complete frames received on the corresponded synchronization source (ssrc)
      * @return This builder.
      */
    public Builder clearFramesReceived() {
      framesReceived = null;
      fieldSetFlags()[59] = false;
      return this;
    }

    /**
      * Gets the value of the 'decoderImplementation' field.
      * Indicate the name of the decoder implementation library
      * @return The value.
      */
    public String getDecoderImplementation() {
      return decoderImplementation;
    }

    /**
      * Sets the value of the 'decoderImplementation' field.
      * Indicate the name of the decoder implementation library
      * @param value The value of 'decoderImplementation'.
      * @return This builder.
      */
    public Builder setDecoderImplementation(String value) {
      validate(fields()[60], value);
      this.decoderImplementation = value;
      fieldSetFlags()[60] = true;
      return this;
    }

    /**
      * Checks whether the 'decoderImplementation' field has been set.
      * Indicate the name of the decoder implementation library
      * @return True if the 'decoderImplementation' field has been set, false otherwise.
      */
    public boolean hasDecoderImplementation() {
      return fieldSetFlags()[60];
    }


    /**
      * Clears the value of the 'decoderImplementation' field.
      * Indicate the name of the decoder implementation library
      * @return This builder.
      */
    public Builder clearDecoderImplementation() {
      decoderImplementation = null;
      fieldSetFlags()[60] = false;
      return this;
    }

    /**
      * Gets the value of the 'packetsSent' field.
      * Total number of RTP packets sent at the remote endpoint to this endpoint on this synchronization source
      * @return The value.
      */
    public Integer getPacketsSent() {
      return packetsSent;
    }

    /**
      * Sets the value of the 'packetsSent' field.
      * Total number of RTP packets sent at the remote endpoint to this endpoint on this synchronization source
      * @param value The value of 'packetsSent'.
      * @return This builder.
      */
    public Builder setPacketsSent(Integer value) {
      validate(fields()[61], value);
      this.packetsSent = value;
      fieldSetFlags()[61] = true;
      return this;
    }

    /**
      * Checks whether the 'packetsSent' field has been set.
      * Total number of RTP packets sent at the remote endpoint to this endpoint on this synchronization source
      * @return True if the 'packetsSent' field has been set, false otherwise.
      */
    public boolean hasPacketsSent() {
      return fieldSetFlags()[61];
    }


    /**
      * Clears the value of the 'packetsSent' field.
      * Total number of RTP packets sent at the remote endpoint to this endpoint on this synchronization source
      * @return This builder.
      */
    public Builder clearPacketsSent() {
      packetsSent = null;
      fieldSetFlags()[61] = false;
      return this;
    }

    /**
      * Gets the value of the 'bytesSent' field.
      * Total number of payload bytes sent at the remote endpoint to this endpoint on this synchronization source
      * @return The value.
      */
    public Integer getBytesSent() {
      return bytesSent;
    }

    /**
      * Sets the value of the 'bytesSent' field.
      * Total number of payload bytes sent at the remote endpoint to this endpoint on this synchronization source
      * @param value The value of 'bytesSent'.
      * @return This builder.
      */
    public Builder setBytesSent(Integer value) {
      validate(fields()[62], value);
      this.bytesSent = value;
      fieldSetFlags()[62] = true;
      return this;
    }

    /**
      * Checks whether the 'bytesSent' field has been set.
      * Total number of payload bytes sent at the remote endpoint to this endpoint on this synchronization source
      * @return True if the 'bytesSent' field has been set, false otherwise.
      */
    public boolean hasBytesSent() {
      return fieldSetFlags()[62];
    }


    /**
      * Clears the value of the 'bytesSent' field.
      * Total number of payload bytes sent at the remote endpoint to this endpoint on this synchronization source
      * @return This builder.
      */
    public Builder clearBytesSent() {
      bytesSent = null;
      fieldSetFlags()[62] = false;
      return this;
    }

    /**
      * Gets the value of the 'remoteTimestamp' field.
      * The timestamp corresnponds to the time in UTC Epoch the remote endpoint reported the statistics belong to the sender side and correspond to the synchronization source (ssrc)
      * @return The value.
      */
    public Double getRemoteTimestamp() {
      return remoteTimestamp;
    }

    /**
      * Sets the value of the 'remoteTimestamp' field.
      * The timestamp corresnponds to the time in UTC Epoch the remote endpoint reported the statistics belong to the sender side and correspond to the synchronization source (ssrc)
      * @param value The value of 'remoteTimestamp'.
      * @return This builder.
      */
    public Builder setRemoteTimestamp(Double value) {
      validate(fields()[63], value);
      this.remoteTimestamp = value;
      fieldSetFlags()[63] = true;
      return this;
    }

    /**
      * Checks whether the 'remoteTimestamp' field has been set.
      * The timestamp corresnponds to the time in UTC Epoch the remote endpoint reported the statistics belong to the sender side and correspond to the synchronization source (ssrc)
      * @return True if the 'remoteTimestamp' field has been set, false otherwise.
      */
    public boolean hasRemoteTimestamp() {
      return fieldSetFlags()[63];
    }


    /**
      * Clears the value of the 'remoteTimestamp' field.
      * The timestamp corresnponds to the time in UTC Epoch the remote endpoint reported the statistics belong to the sender side and correspond to the synchronization source (ssrc)
      * @return This builder.
      */
    public Builder clearRemoteTimestamp() {
      remoteTimestamp = null;
      fieldSetFlags()[63] = false;
      return this;
    }

    /**
      * Gets the value of the 'reportsSent' field.
      * The number of SR reports the remote endpoint sent corresponded to synchronization source (ssrc) this report belongs to
      * @return The value.
      */
    public Integer getReportsSent() {
      return reportsSent;
    }

    /**
      * Sets the value of the 'reportsSent' field.
      * The number of SR reports the remote endpoint sent corresponded to synchronization source (ssrc) this report belongs to
      * @param value The value of 'reportsSent'.
      * @return This builder.
      */
    public Builder setReportsSent(Integer value) {
      validate(fields()[64], value);
      this.reportsSent = value;
      fieldSetFlags()[64] = true;
      return this;
    }

    /**
      * Checks whether the 'reportsSent' field has been set.
      * The number of SR reports the remote endpoint sent corresponded to synchronization source (ssrc) this report belongs to
      * @return True if the 'reportsSent' field has been set, false otherwise.
      */
    public boolean hasReportsSent() {
      return fieldSetFlags()[64];
    }


    /**
      * Clears the value of the 'reportsSent' field.
      * The number of SR reports the remote endpoint sent corresponded to synchronization source (ssrc) this report belongs to
      * @return This builder.
      */
    public Builder clearReportsSent() {
      reportsSent = null;
      fieldSetFlags()[64] = false;
      return this;
    }

    /**
      * Gets the value of the 'ended' field.
      * Flag represents if the receiver ended the media stream track or not.
      * @return The value.
      */
    public Boolean getEnded() {
      return ended;
    }

    /**
      * Sets the value of the 'ended' field.
      * Flag represents if the receiver ended the media stream track or not.
      * @param value The value of 'ended'.
      * @return This builder.
      */
    public Builder setEnded(Boolean value) {
      validate(fields()[65], value);
      this.ended = value;
      fieldSetFlags()[65] = true;
      return this;
    }

    /**
      * Checks whether the 'ended' field has been set.
      * Flag represents if the receiver ended the media stream track or not.
      * @return True if the 'ended' field has been set, false otherwise.
      */
    public boolean hasEnded() {
      return fieldSetFlags()[65];
    }


    /**
      * Clears the value of the 'ended' field.
      * Flag represents if the receiver ended the media stream track or not.
      * @return This builder.
      */
    public Builder clearEnded() {
      ended = null;
      fieldSetFlags()[65] = false;
      return this;
    }

    /**
      * Gets the value of the 'payloadType' field.
      * The type of the payload the RTP packet SSRC belongs to
      * @return The value.
      */
    public Integer getPayloadType() {
      return payloadType;
    }

    /**
      * Sets the value of the 'payloadType' field.
      * The type of the payload the RTP packet SSRC belongs to
      * @param value The value of 'payloadType'.
      * @return This builder.
      */
    public Builder setPayloadType(Integer value) {
      validate(fields()[66], value);
      this.payloadType = value;
      fieldSetFlags()[66] = true;
      return this;
    }

    /**
      * Checks whether the 'payloadType' field has been set.
      * The type of the payload the RTP packet SSRC belongs to
      * @return True if the 'payloadType' field has been set, false otherwise.
      */
    public boolean hasPayloadType() {
      return fieldSetFlags()[66];
    }


    /**
      * Clears the value of the 'payloadType' field.
      * The type of the payload the RTP packet SSRC belongs to
      * @return This builder.
      */
    public Builder clearPayloadType() {
      payloadType = null;
      fieldSetFlags()[66] = false;
      return this;
    }

    /**
      * Gets the value of the 'mimeType' field.
      * the MIME type of the codec (e.g.: video/vp8)
      * @return The value.
      */
    public String getMimeType() {
      return mimeType;
    }

    /**
      * Sets the value of the 'mimeType' field.
      * the MIME type of the codec (e.g.: video/vp8)
      * @param value The value of 'mimeType'.
      * @return This builder.
      */
    public Builder setMimeType(String value) {
      validate(fields()[67], value);
      this.mimeType = value;
      fieldSetFlags()[67] = true;
      return this;
    }

    /**
      * Checks whether the 'mimeType' field has been set.
      * the MIME type of the codec (e.g.: video/vp8)
      * @return True if the 'mimeType' field has been set, false otherwise.
      */
    public boolean hasMimeType() {
      return fieldSetFlags()[67];
    }


    /**
      * Clears the value of the 'mimeType' field.
      * the MIME type of the codec (e.g.: video/vp8)
      * @return This builder.
      */
    public Builder clearMimeType() {
      mimeType = null;
      fieldSetFlags()[67] = false;
      return this;
    }

    /**
      * Gets the value of the 'clockRate' field.
      * The negotiated clock rate the RTP timestamp is generated of
      * @return The value.
      */
    public Long getClockRate() {
      return clockRate;
    }

    /**
      * Sets the value of the 'clockRate' field.
      * The negotiated clock rate the RTP timestamp is generated of
      * @param value The value of 'clockRate'.
      * @return This builder.
      */
    public Builder setClockRate(Long value) {
      validate(fields()[68], value);
      this.clockRate = value;
      fieldSetFlags()[68] = true;
      return this;
    }

    /**
      * Checks whether the 'clockRate' field has been set.
      * The negotiated clock rate the RTP timestamp is generated of
      * @return True if the 'clockRate' field has been set, false otherwise.
      */
    public boolean hasClockRate() {
      return fieldSetFlags()[68];
    }


    /**
      * Clears the value of the 'clockRate' field.
      * The negotiated clock rate the RTP timestamp is generated of
      * @return This builder.
      */
    public Builder clearClockRate() {
      clockRate = null;
      fieldSetFlags()[68] = false;
      return this;
    }

    /**
      * Gets the value of the 'sdpFmtpLine' field.
      * The a=fmtp line in the SDP corresponding to the codec
      * @return The value.
      */
    public String getSdpFmtpLine() {
      return sdpFmtpLine;
    }

    /**
      * Sets the value of the 'sdpFmtpLine' field.
      * The a=fmtp line in the SDP corresponding to the codec
      * @param value The value of 'sdpFmtpLine'.
      * @return This builder.
      */
    public Builder setSdpFmtpLine(String value) {
      validate(fields()[69], value);
      this.sdpFmtpLine = value;
      fieldSetFlags()[69] = true;
      return this;
    }

    /**
      * Checks whether the 'sdpFmtpLine' field has been set.
      * The a=fmtp line in the SDP corresponding to the codec
      * @return True if the 'sdpFmtpLine' field has been set, false otherwise.
      */
    public boolean hasSdpFmtpLine() {
      return fieldSetFlags()[69];
    }


    /**
      * Clears the value of the 'sdpFmtpLine' field.
      * The a=fmtp line in the SDP corresponding to the codec
      * @return This builder.
      */
    public Builder clearSdpFmtpLine() {
      sdpFmtpLine = null;
      fieldSetFlags()[69] = false;
      return this;
    }

    @Override
    public InboundVideoTrackReport build() {
      try {
        InboundVideoTrackReport record = new InboundVideoTrackReport();
        record.serviceId = fieldSetFlags()[0] ? this.serviceId : (String) defaultValue(fields()[0]);
        record.serviceName = fieldSetFlags()[1] ? this.serviceName : (String) defaultValue(fields()[1]);
        record.mediaUnitId = fieldSetFlags()[2] ? this.mediaUnitId : (String) defaultValue(fields()[2]);
        record.marker = fieldSetFlags()[3] ? this.marker : (String) defaultValue(fields()[3]);
        record.timestamp = fieldSetFlags()[4] ? this.timestamp : (Long) defaultValue(fields()[4]);
        record.callId = fieldSetFlags()[5] ? this.callId : (String) defaultValue(fields()[5]);
        record.roomId = fieldSetFlags()[6] ? this.roomId : (String) defaultValue(fields()[6]);
        record.clientId = fieldSetFlags()[7] ? this.clientId : (String) defaultValue(fields()[7]);
        record.userId = fieldSetFlags()[8] ? this.userId : (String) defaultValue(fields()[8]);
        record.peerConnectionId = fieldSetFlags()[9] ? this.peerConnectionId : (String) defaultValue(fields()[9]);
        record.label = fieldSetFlags()[10] ? this.label : (String) defaultValue(fields()[10]);
        record.remoteUserId = fieldSetFlags()[11] ? this.remoteUserId : (String) defaultValue(fields()[11]);
        record.remoteClientId = fieldSetFlags()[12] ? this.remoteClientId : (String) defaultValue(fields()[12]);
        record.remotePeerConnectionId = fieldSetFlags()[13] ? this.remotePeerConnectionId : (String) defaultValue(fields()[13]);
        record.sampleSeq = fieldSetFlags()[14] ? this.sampleSeq : (Integer) defaultValue(fields()[14]);
        record.ssrc = fieldSetFlags()[15] ? this.ssrc : (Long) defaultValue(fields()[15]);
        record.packetsReceived = fieldSetFlags()[16] ? this.packetsReceived : (Integer) defaultValue(fields()[16]);
        record.packetsLost = fieldSetFlags()[17] ? this.packetsLost : (Integer) defaultValue(fields()[17]);
        record.jitter = fieldSetFlags()[18] ? this.jitter : (Double) defaultValue(fields()[18]);
        record.packetsDiscarded = fieldSetFlags()[19] ? this.packetsDiscarded : (Integer) defaultValue(fields()[19]);
        record.packetsRepaired = fieldSetFlags()[20] ? this.packetsRepaired : (Integer) defaultValue(fields()[20]);
        record.burstPacketsLost = fieldSetFlags()[21] ? this.burstPacketsLost : (Integer) defaultValue(fields()[21]);
        record.burstPacketsDiscarded = fieldSetFlags()[22] ? this.burstPacketsDiscarded : (Integer) defaultValue(fields()[22]);
        record.burstLossCount = fieldSetFlags()[23] ? this.burstLossCount : (Integer) defaultValue(fields()[23]);
        record.burstDiscardCount = fieldSetFlags()[24] ? this.burstDiscardCount : (Integer) defaultValue(fields()[24]);
        record.burstLossRate = fieldSetFlags()[25] ? this.burstLossRate : (Double) defaultValue(fields()[25]);
        record.burstDiscardRate = fieldSetFlags()[26] ? this.burstDiscardRate : (Integer) defaultValue(fields()[26]);
        record.gapLossRate = fieldSetFlags()[27] ? this.gapLossRate : (Double) defaultValue(fields()[27]);
        record.gapDiscardRate = fieldSetFlags()[28] ? this.gapDiscardRate : (Double) defaultValue(fields()[28]);
        record.framesDropped = fieldSetFlags()[29] ? this.framesDropped : (Double) defaultValue(fields()[29]);
        record.partialFramesLost = fieldSetFlags()[30] ? this.partialFramesLost : (Double) defaultValue(fields()[30]);
        record.fullFramesLost = fieldSetFlags()[31] ? this.fullFramesLost : (Integer) defaultValue(fields()[31]);
        record.framesDecoded = fieldSetFlags()[32] ? this.framesDecoded : (Integer) defaultValue(fields()[32]);
        record.keyFramesDecoded = fieldSetFlags()[33] ? this.keyFramesDecoded : (Integer) defaultValue(fields()[33]);
        record.frameWidth = fieldSetFlags()[34] ? this.frameWidth : (Integer) defaultValue(fields()[34]);
        record.frameHeight = fieldSetFlags()[35] ? this.frameHeight : (Integer) defaultValue(fields()[35]);
        record.frameBitDepth = fieldSetFlags()[36] ? this.frameBitDepth : (Integer) defaultValue(fields()[36]);
        record.framesPerSecond = fieldSetFlags()[37] ? this.framesPerSecond : (Double) defaultValue(fields()[37]);
        record.qpSum = fieldSetFlags()[38] ? this.qpSum : (Long) defaultValue(fields()[38]);
        record.totalDecodeTime = fieldSetFlags()[39] ? this.totalDecodeTime : (Long) defaultValue(fields()[39]);
        record.totalInterFrameDelay = fieldSetFlags()[40] ? this.totalInterFrameDelay : (Long) defaultValue(fields()[40]);
        record.totalSquaredInterFrameDelay = fieldSetFlags()[41] ? this.totalSquaredInterFrameDelay : (Long) defaultValue(fields()[41]);
        record.lastPacketReceivedTimestamp = fieldSetFlags()[42] ? this.lastPacketReceivedTimestamp : (Boolean) defaultValue(fields()[42]);
        record.averageRtcpInterval = fieldSetFlags()[43] ? this.averageRtcpInterval : (Double) defaultValue(fields()[43]);
        record.headerBytesReceived = fieldSetFlags()[44] ? this.headerBytesReceived : (Long) defaultValue(fields()[44]);
        record.fecPacketsReceived = fieldSetFlags()[45] ? this.fecPacketsReceived : (Integer) defaultValue(fields()[45]);
        record.fecPacketsDiscarded = fieldSetFlags()[46] ? this.fecPacketsDiscarded : (Integer) defaultValue(fields()[46]);
        record.bytesReceived = fieldSetFlags()[47] ? this.bytesReceived : (Long) defaultValue(fields()[47]);
        record.packetsFailedDecryption = fieldSetFlags()[48] ? this.packetsFailedDecryption : (Integer) defaultValue(fields()[48]);
        record.packetsDuplicated = fieldSetFlags()[49] ? this.packetsDuplicated : (Integer) defaultValue(fields()[49]);
        record.perDscpPacketsReceived = fieldSetFlags()[50] ? this.perDscpPacketsReceived : (Double) defaultValue(fields()[50]);
        record.firCount = fieldSetFlags()[51] ? this.firCount : (Integer) defaultValue(fields()[51]);
        record.pliCount = fieldSetFlags()[52] ? this.pliCount : (Integer) defaultValue(fields()[52]);
        record.nackCount = fieldSetFlags()[53] ? this.nackCount : (Integer) defaultValue(fields()[53]);
        record.sliCount = fieldSetFlags()[54] ? this.sliCount : (Integer) defaultValue(fields()[54]);
        record.totalProcessingDelay = fieldSetFlags()[55] ? this.totalProcessingDelay : (Double) defaultValue(fields()[55]);
        record.estimatedPlayoutTimestamp = fieldSetFlags()[56] ? this.estimatedPlayoutTimestamp : (Double) defaultValue(fields()[56]);
        record.jitterBufferDelay = fieldSetFlags()[57] ? this.jitterBufferDelay : (Double) defaultValue(fields()[57]);
        record.jitterBufferEmittedCount = fieldSetFlags()[58] ? this.jitterBufferEmittedCount : (Integer) defaultValue(fields()[58]);
        record.framesReceived = fieldSetFlags()[59] ? this.framesReceived : (Integer) defaultValue(fields()[59]);
        record.decoderImplementation = fieldSetFlags()[60] ? this.decoderImplementation : (String) defaultValue(fields()[60]);
        record.packetsSent = fieldSetFlags()[61] ? this.packetsSent : (Integer) defaultValue(fields()[61]);
        record.bytesSent = fieldSetFlags()[62] ? this.bytesSent : (Integer) defaultValue(fields()[62]);
        record.remoteTimestamp = fieldSetFlags()[63] ? this.remoteTimestamp : (Double) defaultValue(fields()[63]);
        record.reportsSent = fieldSetFlags()[64] ? this.reportsSent : (Integer) defaultValue(fields()[64]);
        record.ended = fieldSetFlags()[65] ? this.ended : (Boolean) defaultValue(fields()[65]);
        record.payloadType = fieldSetFlags()[66] ? this.payloadType : (Integer) defaultValue(fields()[66]);
        record.mimeType = fieldSetFlags()[67] ? this.mimeType : (String) defaultValue(fields()[67]);
        record.clockRate = fieldSetFlags()[68] ? this.clockRate : (Long) defaultValue(fields()[68]);
        record.sdpFmtpLine = fieldSetFlags()[69] ? this.sdpFmtpLine : (String) defaultValue(fields()[69]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
