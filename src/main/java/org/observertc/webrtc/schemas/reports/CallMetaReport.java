/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.observertc.webrtc.schemas.reports;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** Metadata belongs to a call and can be useful */
@org.apache.avro.specific.AvroGenerated
public class CallMetaReport extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5563323191664833883L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CallMetaReport\",\"namespace\":\"org.observertc.webrtc.schemas.reports\",\"doc\":\"Metadata belongs to a call and can be useful\",\"fields\":[{\"name\":\"serviceId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The unique identifier of the service\"},{\"name\":\"serviceName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The resolved service name configured for the service Id\",\"default\":null},{\"name\":\"mediaUnitId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The media unit id the report belongs to\",\"default\":null},{\"name\":\"marker\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The marker the originated sample is reported with\",\"default\":null},{\"name\":\"timestamp\",\"type\":\"long\",\"doc\":\"The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)\"},{\"name\":\"callId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The generated unique identifier of the call\",\"default\":null},{\"name\":\"roomId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"webrtc app provided room id\",\"default\":null},{\"name\":\"clientId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The generated unique identifier of the client\",\"default\":null},{\"name\":\"userId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"webrtc app provided user identifier\",\"default\":null},{\"name\":\"peerConnectionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The unique identifier of the peer connection\",\"default\":null},{\"name\":\"sampleTimestamp\",\"type\":[\"null\",\"long\"],\"doc\":\"The timestamp of the sample the event related to\",\"default\":null},{\"name\":\"sampleSeq\",\"type\":[\"null\",\"int\"],\"doc\":\"The sequence number of the sample the event may related to\",\"default\":null},{\"name\":\"type\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The type of the meta data reported for the peer connection\",\"default\":null},{\"name\":\"payload\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The payload for the metadata reported for the peeer connection\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The unique identifier of the service */
   private String serviceId;
  /** The resolved service name configured for the service Id */
   private String serviceName;
  /** The media unit id the report belongs to */
   private String mediaUnitId;
  /** The marker the originated sample is reported with */
   private String marker;
  /** The timestamp when the corresponded data is generated for the report (UTC Epoch in ms) */
   private long timestamp;
  /** The generated unique identifier of the call */
   private String callId;
  /** webrtc app provided room id */
   private String roomId;
  /** The generated unique identifier of the client */
   private String clientId;
  /** webrtc app provided user identifier */
   private String userId;
  /** The unique identifier of the peer connection */
   private String peerConnectionId;
  /** The timestamp of the sample the event related to */
   private Long sampleTimestamp;
  /** The sequence number of the sample the event may related to */
   private Integer sampleSeq;
  /** The type of the meta data reported for the peer connection */
   private String type;
  /** The payload for the metadata reported for the peeer connection */
   private String payload;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CallMetaReport() {}

  /**
   * All-args constructor.
   * @param serviceId The unique identifier of the service
   * @param serviceName The resolved service name configured for the service Id
   * @param mediaUnitId The media unit id the report belongs to
   * @param marker The marker the originated sample is reported with
   * @param timestamp The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
   * @param callId The generated unique identifier of the call
   * @param roomId webrtc app provided room id
   * @param clientId The generated unique identifier of the client
   * @param userId webrtc app provided user identifier
   * @param peerConnectionId The unique identifier of the peer connection
   * @param sampleTimestamp The timestamp of the sample the event related to
   * @param sampleSeq The sequence number of the sample the event may related to
   * @param type The type of the meta data reported for the peer connection
   * @param payload The payload for the metadata reported for the peeer connection
   */
  public CallMetaReport(String serviceId, String serviceName, String mediaUnitId, String marker, Long timestamp, String callId, String roomId, String clientId, String userId, String peerConnectionId, Long sampleTimestamp, Integer sampleSeq, String type, String payload) {
    this.serviceId = serviceId;
    this.serviceName = serviceName;
    this.mediaUnitId = mediaUnitId;
    this.marker = marker;
    this.timestamp = timestamp;
    this.callId = callId;
    this.roomId = roomId;
    this.clientId = clientId;
    this.userId = userId;
    this.peerConnectionId = peerConnectionId;
    this.sampleTimestamp = sampleTimestamp;
    this.sampleSeq = sampleSeq;
    this.type = type;
    this.payload = payload;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return serviceId;
    case 1: return serviceName;
    case 2: return mediaUnitId;
    case 3: return marker;
    case 4: return timestamp;
    case 5: return callId;
    case 6: return roomId;
    case 7: return clientId;
    case 8: return userId;
    case 9: return peerConnectionId;
    case 10: return sampleTimestamp;
    case 11: return sampleSeq;
    case 12: return type;
    case 13: return payload;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: serviceId = (String)value$; break;
    case 1: serviceName = (String)value$; break;
    case 2: mediaUnitId = (String)value$; break;
    case 3: marker = (String)value$; break;
    case 4: timestamp = (Long)value$; break;
    case 5: callId = (String)value$; break;
    case 6: roomId = (String)value$; break;
    case 7: clientId = (String)value$; break;
    case 8: userId = (String)value$; break;
    case 9: peerConnectionId = (String)value$; break;
    case 10: sampleTimestamp = (Long)value$; break;
    case 11: sampleSeq = (Integer)value$; break;
    case 12: type = (String)value$; break;
    case 13: payload = (String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'serviceId' field.
   * @return The unique identifier of the service
   */
  public String getServiceId() {
    return serviceId;
  }


  /**
   * Gets the value of the 'serviceName' field.
   * @return The resolved service name configured for the service Id
   */
  public String getServiceName() {
    return serviceName;
  }


  /**
   * Gets the value of the 'mediaUnitId' field.
   * @return The media unit id the report belongs to
   */
  public String getMediaUnitId() {
    return mediaUnitId;
  }


  /**
   * Gets the value of the 'marker' field.
   * @return The marker the originated sample is reported with
   */
  public String getMarker() {
    return marker;
  }


  /**
   * Gets the value of the 'timestamp' field.
   * @return The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
   */
  public Long getTimestamp() {
    return timestamp;
  }


  /**
   * Gets the value of the 'callId' field.
   * @return The generated unique identifier of the call
   */
  public String getCallId() {
    return callId;
  }


  /**
   * Gets the value of the 'roomId' field.
   * @return webrtc app provided room id
   */
  public String getRoomId() {
    return roomId;
  }


  /**
   * Gets the value of the 'clientId' field.
   * @return The generated unique identifier of the client
   */
  public String getClientId() {
    return clientId;
  }


  /**
   * Gets the value of the 'userId' field.
   * @return webrtc app provided user identifier
   */
  public String getUserId() {
    return userId;
  }


  /**
   * Gets the value of the 'peerConnectionId' field.
   * @return The unique identifier of the peer connection
   */
  public String getPeerConnectionId() {
    return peerConnectionId;
  }


  /**
   * Gets the value of the 'sampleTimestamp' field.
   * @return The timestamp of the sample the event related to
   */
  public Long getSampleTimestamp() {
    return sampleTimestamp;
  }


  /**
   * Gets the value of the 'sampleSeq' field.
   * @return The sequence number of the sample the event may related to
   */
  public Integer getSampleSeq() {
    return sampleSeq;
  }


  /**
   * Gets the value of the 'type' field.
   * @return The type of the meta data reported for the peer connection
   */
  public String getType() {
    return type;
  }


  /**
   * Gets the value of the 'payload' field.
   * @return The payload for the metadata reported for the peeer connection
   */
  public String getPayload() {
    return payload;
  }


  /**
   * Creates a new CallMetaReport RecordBuilder.
   * @return A new CallMetaReport RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new CallMetaReport RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CallMetaReport RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }

  /**
   * Creates a new CallMetaReport RecordBuilder by copying an existing CallMetaReport instance.
   * @param other The existing instance to copy.
   * @return A new CallMetaReport RecordBuilder
   */
  public static Builder newBuilder(CallMetaReport other) {
    return new Builder(other);
  }

  /**
   * RecordBuilder for CallMetaReport instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CallMetaReport>
    implements org.apache.avro.data.RecordBuilder<CallMetaReport> {

    /** The unique identifier of the service */
    private String serviceId;
    /** The resolved service name configured for the service Id */
    private String serviceName;
    /** The media unit id the report belongs to */
    private String mediaUnitId;
    /** The marker the originated sample is reported with */
    private String marker;
    /** The timestamp when the corresponded data is generated for the report (UTC Epoch in ms) */
    private long timestamp;
    /** The generated unique identifier of the call */
    private String callId;
    /** webrtc app provided room id */
    private String roomId;
    /** The generated unique identifier of the client */
    private String clientId;
    /** webrtc app provided user identifier */
    private String userId;
    /** The unique identifier of the peer connection */
    private String peerConnectionId;
    /** The timestamp of the sample the event related to */
    private Long sampleTimestamp;
    /** The sequence number of the sample the event may related to */
    private Integer sampleSeq;
    /** The type of the meta data reported for the peer connection */
    private String type;
    /** The payload for the metadata reported for the peeer connection */
    private String payload;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.serviceId)) {
        this.serviceId = data().deepCopy(fields()[0].schema(), other.serviceId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.serviceName)) {
        this.serviceName = data().deepCopy(fields()[1].schema(), other.serviceName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.mediaUnitId)) {
        this.mediaUnitId = data().deepCopy(fields()[2].schema(), other.mediaUnitId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.marker)) {
        this.marker = data().deepCopy(fields()[3].schema(), other.marker);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[4].schema(), other.timestamp);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.callId)) {
        this.callId = data().deepCopy(fields()[5].schema(), other.callId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.roomId)) {
        this.roomId = data().deepCopy(fields()[6].schema(), other.roomId);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.clientId)) {
        this.clientId = data().deepCopy(fields()[7].schema(), other.clientId);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.userId)) {
        this.userId = data().deepCopy(fields()[8].schema(), other.userId);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.peerConnectionId)) {
        this.peerConnectionId = data().deepCopy(fields()[9].schema(), other.peerConnectionId);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.sampleTimestamp)) {
        this.sampleTimestamp = data().deepCopy(fields()[10].schema(), other.sampleTimestamp);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.sampleSeq)) {
        this.sampleSeq = data().deepCopy(fields()[11].schema(), other.sampleSeq);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.type)) {
        this.type = data().deepCopy(fields()[12].schema(), other.type);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.payload)) {
        this.payload = data().deepCopy(fields()[13].schema(), other.payload);
        fieldSetFlags()[13] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing CallMetaReport instance
     * @param other The existing instance to copy.
     */
    private Builder(CallMetaReport other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.serviceId)) {
        this.serviceId = data().deepCopy(fields()[0].schema(), other.serviceId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.serviceName)) {
        this.serviceName = data().deepCopy(fields()[1].schema(), other.serviceName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.mediaUnitId)) {
        this.mediaUnitId = data().deepCopy(fields()[2].schema(), other.mediaUnitId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.marker)) {
        this.marker = data().deepCopy(fields()[3].schema(), other.marker);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[4].schema(), other.timestamp);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.callId)) {
        this.callId = data().deepCopy(fields()[5].schema(), other.callId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.roomId)) {
        this.roomId = data().deepCopy(fields()[6].schema(), other.roomId);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.clientId)) {
        this.clientId = data().deepCopy(fields()[7].schema(), other.clientId);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.userId)) {
        this.userId = data().deepCopy(fields()[8].schema(), other.userId);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.peerConnectionId)) {
        this.peerConnectionId = data().deepCopy(fields()[9].schema(), other.peerConnectionId);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.sampleTimestamp)) {
        this.sampleTimestamp = data().deepCopy(fields()[10].schema(), other.sampleTimestamp);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.sampleSeq)) {
        this.sampleSeq = data().deepCopy(fields()[11].schema(), other.sampleSeq);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.type)) {
        this.type = data().deepCopy(fields()[12].schema(), other.type);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.payload)) {
        this.payload = data().deepCopy(fields()[13].schema(), other.payload);
        fieldSetFlags()[13] = true;
      }
    }

    /**
      * Gets the value of the 'serviceId' field.
      * The unique identifier of the service
      * @return The value.
      */
    public String getServiceId() {
      return serviceId;
    }

    /**
      * Sets the value of the 'serviceId' field.
      * The unique identifier of the service
      * @param value The value of 'serviceId'.
      * @return This builder.
      */
    public Builder setServiceId(String value) {
      validate(fields()[0], value);
      this.serviceId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'serviceId' field has been set.
      * The unique identifier of the service
      * @return True if the 'serviceId' field has been set, false otherwise.
      */
    public boolean hasServiceId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'serviceId' field.
      * The unique identifier of the service
      * @return This builder.
      */
    public Builder clearServiceId() {
      serviceId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'serviceName' field.
      * The resolved service name configured for the service Id
      * @return The value.
      */
    public String getServiceName() {
      return serviceName;
    }

    /**
      * Sets the value of the 'serviceName' field.
      * The resolved service name configured for the service Id
      * @param value The value of 'serviceName'.
      * @return This builder.
      */
    public Builder setServiceName(String value) {
      validate(fields()[1], value);
      this.serviceName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'serviceName' field has been set.
      * The resolved service name configured for the service Id
      * @return True if the 'serviceName' field has been set, false otherwise.
      */
    public boolean hasServiceName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'serviceName' field.
      * The resolved service name configured for the service Id
      * @return This builder.
      */
    public Builder clearServiceName() {
      serviceName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'mediaUnitId' field.
      * The media unit id the report belongs to
      * @return The value.
      */
    public String getMediaUnitId() {
      return mediaUnitId;
    }

    /**
      * Sets the value of the 'mediaUnitId' field.
      * The media unit id the report belongs to
      * @param value The value of 'mediaUnitId'.
      * @return This builder.
      */
    public Builder setMediaUnitId(String value) {
      validate(fields()[2], value);
      this.mediaUnitId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'mediaUnitId' field has been set.
      * The media unit id the report belongs to
      * @return True if the 'mediaUnitId' field has been set, false otherwise.
      */
    public boolean hasMediaUnitId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'mediaUnitId' field.
      * The media unit id the report belongs to
      * @return This builder.
      */
    public Builder clearMediaUnitId() {
      mediaUnitId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'marker' field.
      * The marker the originated sample is reported with
      * @return The value.
      */
    public String getMarker() {
      return marker;
    }

    /**
      * Sets the value of the 'marker' field.
      * The marker the originated sample is reported with
      * @param value The value of 'marker'.
      * @return This builder.
      */
    public Builder setMarker(String value) {
      validate(fields()[3], value);
      this.marker = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'marker' field has been set.
      * The marker the originated sample is reported with
      * @return True if the 'marker' field has been set, false otherwise.
      */
    public boolean hasMarker() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'marker' field.
      * The marker the originated sample is reported with
      * @return This builder.
      */
    public Builder clearMarker() {
      marker = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @return The value.
      */
    public Long getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public Builder setTimestamp(long value) {
      validate(fields()[4], value);
      this.timestamp = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @return This builder.
      */
    public Builder clearTimestamp() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'callId' field.
      * The generated unique identifier of the call
      * @return The value.
      */
    public String getCallId() {
      return callId;
    }

    /**
      * Sets the value of the 'callId' field.
      * The generated unique identifier of the call
      * @param value The value of 'callId'.
      * @return This builder.
      */
    public Builder setCallId(String value) {
      validate(fields()[5], value);
      this.callId = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'callId' field has been set.
      * The generated unique identifier of the call
      * @return True if the 'callId' field has been set, false otherwise.
      */
    public boolean hasCallId() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'callId' field.
      * The generated unique identifier of the call
      * @return This builder.
      */
    public Builder clearCallId() {
      callId = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'roomId' field.
      * webrtc app provided room id
      * @return The value.
      */
    public String getRoomId() {
      return roomId;
    }

    /**
      * Sets the value of the 'roomId' field.
      * webrtc app provided room id
      * @param value The value of 'roomId'.
      * @return This builder.
      */
    public Builder setRoomId(String value) {
      validate(fields()[6], value);
      this.roomId = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'roomId' field has been set.
      * webrtc app provided room id
      * @return True if the 'roomId' field has been set, false otherwise.
      */
    public boolean hasRoomId() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'roomId' field.
      * webrtc app provided room id
      * @return This builder.
      */
    public Builder clearRoomId() {
      roomId = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'clientId' field.
      * The generated unique identifier of the client
      * @return The value.
      */
    public String getClientId() {
      return clientId;
    }

    /**
      * Sets the value of the 'clientId' field.
      * The generated unique identifier of the client
      * @param value The value of 'clientId'.
      * @return This builder.
      */
    public Builder setClientId(String value) {
      validate(fields()[7], value);
      this.clientId = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'clientId' field has been set.
      * The generated unique identifier of the client
      * @return True if the 'clientId' field has been set, false otherwise.
      */
    public boolean hasClientId() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'clientId' field.
      * The generated unique identifier of the client
      * @return This builder.
      */
    public Builder clearClientId() {
      clientId = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'userId' field.
      * webrtc app provided user identifier
      * @return The value.
      */
    public String getUserId() {
      return userId;
    }

    /**
      * Sets the value of the 'userId' field.
      * webrtc app provided user identifier
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public Builder setUserId(String value) {
      validate(fields()[8], value);
      this.userId = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * webrtc app provided user identifier
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'userId' field.
      * webrtc app provided user identifier
      * @return This builder.
      */
    public Builder clearUserId() {
      userId = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'peerConnectionId' field.
      * The unique identifier of the peer connection
      * @return The value.
      */
    public String getPeerConnectionId() {
      return peerConnectionId;
    }

    /**
      * Sets the value of the 'peerConnectionId' field.
      * The unique identifier of the peer connection
      * @param value The value of 'peerConnectionId'.
      * @return This builder.
      */
    public Builder setPeerConnectionId(String value) {
      validate(fields()[9], value);
      this.peerConnectionId = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'peerConnectionId' field has been set.
      * The unique identifier of the peer connection
      * @return True if the 'peerConnectionId' field has been set, false otherwise.
      */
    public boolean hasPeerConnectionId() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'peerConnectionId' field.
      * The unique identifier of the peer connection
      * @return This builder.
      */
    public Builder clearPeerConnectionId() {
      peerConnectionId = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'sampleTimestamp' field.
      * The timestamp of the sample the event related to
      * @return The value.
      */
    public Long getSampleTimestamp() {
      return sampleTimestamp;
    }

    /**
      * Sets the value of the 'sampleTimestamp' field.
      * The timestamp of the sample the event related to
      * @param value The value of 'sampleTimestamp'.
      * @return This builder.
      */
    public Builder setSampleTimestamp(Long value) {
      validate(fields()[10], value);
      this.sampleTimestamp = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'sampleTimestamp' field has been set.
      * The timestamp of the sample the event related to
      * @return True if the 'sampleTimestamp' field has been set, false otherwise.
      */
    public boolean hasSampleTimestamp() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'sampleTimestamp' field.
      * The timestamp of the sample the event related to
      * @return This builder.
      */
    public Builder clearSampleTimestamp() {
      sampleTimestamp = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'sampleSeq' field.
      * The sequence number of the sample the event may related to
      * @return The value.
      */
    public Integer getSampleSeq() {
      return sampleSeq;
    }

    /**
      * Sets the value of the 'sampleSeq' field.
      * The sequence number of the sample the event may related to
      * @param value The value of 'sampleSeq'.
      * @return This builder.
      */
    public Builder setSampleSeq(Integer value) {
      validate(fields()[11], value);
      this.sampleSeq = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'sampleSeq' field has been set.
      * The sequence number of the sample the event may related to
      * @return True if the 'sampleSeq' field has been set, false otherwise.
      */
    public boolean hasSampleSeq() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'sampleSeq' field.
      * The sequence number of the sample the event may related to
      * @return This builder.
      */
    public Builder clearSampleSeq() {
      sampleSeq = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * The type of the meta data reported for the peer connection
      * @return The value.
      */
    public String getType() {
      return type;
    }

    /**
      * Sets the value of the 'type' field.
      * The type of the meta data reported for the peer connection
      * @param value The value of 'type'.
      * @return This builder.
      */
    public Builder setType(String value) {
      validate(fields()[12], value);
      this.type = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * The type of the meta data reported for the peer connection
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'type' field.
      * The type of the meta data reported for the peer connection
      * @return This builder.
      */
    public Builder clearType() {
      type = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'payload' field.
      * The payload for the metadata reported for the peeer connection
      * @return The value.
      */
    public String getPayload() {
      return payload;
    }

    /**
      * Sets the value of the 'payload' field.
      * The payload for the metadata reported for the peeer connection
      * @param value The value of 'payload'.
      * @return This builder.
      */
    public Builder setPayload(String value) {
      validate(fields()[13], value);
      this.payload = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'payload' field has been set.
      * The payload for the metadata reported for the peeer connection
      * @return True if the 'payload' field has been set, false otherwise.
      */
    public boolean hasPayload() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'payload' field.
      * The payload for the metadata reported for the peeer connection
      * @return This builder.
      */
    public Builder clearPayload() {
      payload = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    @Override
    public CallMetaReport build() {
      try {
        CallMetaReport record = new CallMetaReport();
        record.serviceId = fieldSetFlags()[0] ? this.serviceId : (String) defaultValue(fields()[0]);
        record.serviceName = fieldSetFlags()[1] ? this.serviceName : (String) defaultValue(fields()[1]);
        record.mediaUnitId = fieldSetFlags()[2] ? this.mediaUnitId : (String) defaultValue(fields()[2]);
        record.marker = fieldSetFlags()[3] ? this.marker : (String) defaultValue(fields()[3]);
        record.timestamp = fieldSetFlags()[4] ? this.timestamp : (Long) defaultValue(fields()[4]);
        record.callId = fieldSetFlags()[5] ? this.callId : (String) defaultValue(fields()[5]);
        record.roomId = fieldSetFlags()[6] ? this.roomId : (String) defaultValue(fields()[6]);
        record.clientId = fieldSetFlags()[7] ? this.clientId : (String) defaultValue(fields()[7]);
        record.userId = fieldSetFlags()[8] ? this.userId : (String) defaultValue(fields()[8]);
        record.peerConnectionId = fieldSetFlags()[9] ? this.peerConnectionId : (String) defaultValue(fields()[9]);
        record.sampleTimestamp = fieldSetFlags()[10] ? this.sampleTimestamp : (Long) defaultValue(fields()[10]);
        record.sampleSeq = fieldSetFlags()[11] ? this.sampleSeq : (Integer) defaultValue(fields()[11]);
        record.type = fieldSetFlags()[12] ? this.type : (String) defaultValue(fields()[12]);
        record.payload = fieldSetFlags()[13] ? this.payload : (String) defaultValue(fields()[13]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
